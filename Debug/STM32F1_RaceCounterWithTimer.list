
STM32F1_RaceCounterWithTimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08004500  08004500  00014500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046e4  080046e4  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080046e4  080046e4  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046e4  080046e4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046e4  080046e4  000146e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046e8  080046e8  000146e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080046ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000090  0800477c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  0800477c  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e972  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e8c  00000000  00000000  0002ea2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e50  00000000  00000000  000308b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d68  00000000  00000000  00031708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014ee6  00000000  00000000  00032470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a823  00000000  00000000  00047356  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074703  00000000  00000000  00051b79  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c627c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f08  00000000  00000000  000c62f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	080044e8 	.word	0x080044e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	080044e8 	.word	0x080044e8

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f923 	bl	80003a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f003 fbc0 	bl	80038ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f93b 	bl	8000412 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f903 	bl	80003be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000028 	.word	0x20000028
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000124 	.word	0x20000124

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000124 	.word	0x20000124

08000210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <__NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	2b00      	cmp	r3, #0
 8000284:	db0b      	blt.n	800029e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 021f 	and.w	r2, r3, #31
 800028c:	4906      	ldr	r1, [pc, #24]	; (80002a8 <__NVIC_EnableIRQ+0x34>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	095b      	lsrs	r3, r3, #5
 8000294:	2001      	movs	r0, #1
 8000296:	fa00 f202 	lsl.w	r2, r0, r2
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000300:	b480      	push	{r7}
 8000302:	b089      	sub	sp, #36	; 0x24
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f003 0307 	and.w	r3, r3, #7
 8000312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	f1c3 0307 	rsb	r3, r3, #7
 800031a:	2b04      	cmp	r3, #4
 800031c:	bf28      	it	cs
 800031e:	2304      	movcs	r3, #4
 8000320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3304      	adds	r3, #4
 8000326:	2b06      	cmp	r3, #6
 8000328:	d902      	bls.n	8000330 <NVIC_EncodePriority+0x30>
 800032a:	69fb      	ldr	r3, [r7, #28]
 800032c:	3b03      	subs	r3, #3
 800032e:	e000      	b.n	8000332 <NVIC_EncodePriority+0x32>
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000334:	f04f 32ff 	mov.w	r2, #4294967295
 8000338:	69bb      	ldr	r3, [r7, #24]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	43da      	mvns	r2, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	401a      	ands	r2, r3
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000348:	f04f 31ff 	mov.w	r1, #4294967295
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	43d9      	mvns	r1, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	4313      	orrs	r3, r2
         );
}
 800035a:	4618      	mov	r0, r3
 800035c:	3724      	adds	r7, #36	; 0x24
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3b01      	subs	r3, #1
 8000370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000374:	d301      	bcc.n	800037a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000376:	2301      	movs	r3, #1
 8000378:	e00f      	b.n	800039a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <SysTick_Config+0x40>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3b01      	subs	r3, #1
 8000380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000382:	210f      	movs	r1, #15
 8000384:	f04f 30ff 	mov.w	r0, #4294967295
 8000388:	f7ff ff90 	bl	80002ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <SysTick_Config+0x40>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000392:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <SysTick_Config+0x40>)
 8000394:	2207      	movs	r2, #7
 8000396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000398:	2300      	movs	r3, #0
}
 800039a:	4618      	mov	r0, r3
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	e000e010 	.word	0xe000e010

080003a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff2d 	bl	8000210 <__NVIC_SetPriorityGrouping>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003be:	b580      	push	{r7, lr}
 80003c0:	b086      	sub	sp, #24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	4603      	mov	r3, r0
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
 80003ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003d0:	f7ff ff42 	bl	8000258 <__NVIC_GetPriorityGrouping>
 80003d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	68b9      	ldr	r1, [r7, #8]
 80003da:	6978      	ldr	r0, [r7, #20]
 80003dc:	f7ff ff90 	bl	8000300 <NVIC_EncodePriority>
 80003e0:	4602      	mov	r2, r0
 80003e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003e6:	4611      	mov	r1, r2
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff5f 	bl	80002ac <__NVIC_SetPriority>
}
 80003ee:	bf00      	nop
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	4603      	mov	r3, r0
 80003fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff35 	bl	8000274 <__NVIC_EnableIRQ>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f7ff ffa2 	bl	8000364 <SysTick_Config>
 8000420:	4603      	mov	r3, r0
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2b04      	cmp	r3, #4
 8000438:	d106      	bne.n	8000448 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a08      	ldr	r2, [pc, #32]	; (8000460 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000440:	f043 0304 	orr.w	r3, r3, #4
 8000444:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000446:	e005      	b.n	8000454 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a04      	ldr	r2, [pc, #16]	; (8000460 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800044e:	f023 0304 	bic.w	r3, r3, #4
 8000452:	6013      	str	r3, [r2, #0]
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	e000e010 	.word	0xe000e010

08000464 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000464:	b480      	push	{r7}
 8000466:	b08b      	sub	sp, #44	; 0x2c
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800046e:	2300      	movs	r3, #0
 8000470:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000472:	2300      	movs	r3, #0
 8000474:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000476:	e127      	b.n	80006c8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000478:	2201      	movs	r2, #1
 800047a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800047c:	fa02 f303 	lsl.w	r3, r2, r3
 8000480:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	69fa      	ldr	r2, [r7, #28]
 8000488:	4013      	ands	r3, r2
 800048a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800048c:	69ba      	ldr	r2, [r7, #24]
 800048e:	69fb      	ldr	r3, [r7, #28]
 8000490:	429a      	cmp	r2, r3
 8000492:	f040 8116 	bne.w	80006c2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	2b12      	cmp	r3, #18
 800049c:	d034      	beq.n	8000508 <HAL_GPIO_Init+0xa4>
 800049e:	2b12      	cmp	r3, #18
 80004a0:	d80d      	bhi.n	80004be <HAL_GPIO_Init+0x5a>
 80004a2:	2b02      	cmp	r3, #2
 80004a4:	d02b      	beq.n	80004fe <HAL_GPIO_Init+0x9a>
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	d804      	bhi.n	80004b4 <HAL_GPIO_Init+0x50>
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d031      	beq.n	8000512 <HAL_GPIO_Init+0xae>
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d01c      	beq.n	80004ec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004b2:	e048      	b.n	8000546 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004b4:	2b03      	cmp	r3, #3
 80004b6:	d043      	beq.n	8000540 <HAL_GPIO_Init+0xdc>
 80004b8:	2b11      	cmp	r3, #17
 80004ba:	d01b      	beq.n	80004f4 <HAL_GPIO_Init+0x90>
          break;
 80004bc:	e043      	b.n	8000546 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004be:	4a89      	ldr	r2, [pc, #548]	; (80006e4 <HAL_GPIO_Init+0x280>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d026      	beq.n	8000512 <HAL_GPIO_Init+0xae>
 80004c4:	4a87      	ldr	r2, [pc, #540]	; (80006e4 <HAL_GPIO_Init+0x280>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d806      	bhi.n	80004d8 <HAL_GPIO_Init+0x74>
 80004ca:	4a87      	ldr	r2, [pc, #540]	; (80006e8 <HAL_GPIO_Init+0x284>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d020      	beq.n	8000512 <HAL_GPIO_Init+0xae>
 80004d0:	4a86      	ldr	r2, [pc, #536]	; (80006ec <HAL_GPIO_Init+0x288>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d01d      	beq.n	8000512 <HAL_GPIO_Init+0xae>
          break;
 80004d6:	e036      	b.n	8000546 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004d8:	4a85      	ldr	r2, [pc, #532]	; (80006f0 <HAL_GPIO_Init+0x28c>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d019      	beq.n	8000512 <HAL_GPIO_Init+0xae>
 80004de:	4a85      	ldr	r2, [pc, #532]	; (80006f4 <HAL_GPIO_Init+0x290>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d016      	beq.n	8000512 <HAL_GPIO_Init+0xae>
 80004e4:	4a84      	ldr	r2, [pc, #528]	; (80006f8 <HAL_GPIO_Init+0x294>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d013      	beq.n	8000512 <HAL_GPIO_Init+0xae>
          break;
 80004ea:	e02c      	b.n	8000546 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	623b      	str	r3, [r7, #32]
          break;
 80004f2:	e028      	b.n	8000546 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	3304      	adds	r3, #4
 80004fa:	623b      	str	r3, [r7, #32]
          break;
 80004fc:	e023      	b.n	8000546 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	68db      	ldr	r3, [r3, #12]
 8000502:	3308      	adds	r3, #8
 8000504:	623b      	str	r3, [r7, #32]
          break;
 8000506:	e01e      	b.n	8000546 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	330c      	adds	r3, #12
 800050e:	623b      	str	r3, [r7, #32]
          break;
 8000510:	e019      	b.n	8000546 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d102      	bne.n	8000520 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800051a:	2304      	movs	r3, #4
 800051c:	623b      	str	r3, [r7, #32]
          break;
 800051e:	e012      	b.n	8000546 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d105      	bne.n	8000534 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000528:	2308      	movs	r3, #8
 800052a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	69fa      	ldr	r2, [r7, #28]
 8000530:	611a      	str	r2, [r3, #16]
          break;
 8000532:	e008      	b.n	8000546 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000534:	2308      	movs	r3, #8
 8000536:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	615a      	str	r2, [r3, #20]
          break;
 800053e:	e002      	b.n	8000546 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000540:	2300      	movs	r3, #0
 8000542:	623b      	str	r3, [r7, #32]
          break;
 8000544:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000546:	69bb      	ldr	r3, [r7, #24]
 8000548:	2bff      	cmp	r3, #255	; 0xff
 800054a:	d801      	bhi.n	8000550 <HAL_GPIO_Init+0xec>
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	e001      	b.n	8000554 <HAL_GPIO_Init+0xf0>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3304      	adds	r3, #4
 8000554:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000556:	69bb      	ldr	r3, [r7, #24]
 8000558:	2bff      	cmp	r3, #255	; 0xff
 800055a:	d802      	bhi.n	8000562 <HAL_GPIO_Init+0xfe>
 800055c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	e002      	b.n	8000568 <HAL_GPIO_Init+0x104>
 8000562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000564:	3b08      	subs	r3, #8
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	210f      	movs	r1, #15
 8000570:	693b      	ldr	r3, [r7, #16]
 8000572:	fa01 f303 	lsl.w	r3, r1, r3
 8000576:	43db      	mvns	r3, r3
 8000578:	401a      	ands	r2, r3
 800057a:	6a39      	ldr	r1, [r7, #32]
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	431a      	orrs	r2, r3
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	2b00      	cmp	r3, #0
 8000592:	f000 8096 	beq.w	80006c2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000596:	4b59      	ldr	r3, [pc, #356]	; (80006fc <HAL_GPIO_Init+0x298>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	4a58      	ldr	r2, [pc, #352]	; (80006fc <HAL_GPIO_Init+0x298>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6193      	str	r3, [r2, #24]
 80005a2:	4b56      	ldr	r3, [pc, #344]	; (80006fc <HAL_GPIO_Init+0x298>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005ae:	4a54      	ldr	r2, [pc, #336]	; (8000700 <HAL_GPIO_Init+0x29c>)
 80005b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b2:	089b      	lsrs	r3, r3, #2
 80005b4:	3302      	adds	r3, #2
 80005b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005be:	f003 0303 	and.w	r3, r3, #3
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	220f      	movs	r2, #15
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	43db      	mvns	r3, r3
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	4013      	ands	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a4b      	ldr	r2, [pc, #300]	; (8000704 <HAL_GPIO_Init+0x2a0>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d013      	beq.n	8000602 <HAL_GPIO_Init+0x19e>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a4a      	ldr	r2, [pc, #296]	; (8000708 <HAL_GPIO_Init+0x2a4>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d00d      	beq.n	80005fe <HAL_GPIO_Init+0x19a>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a49      	ldr	r2, [pc, #292]	; (800070c <HAL_GPIO_Init+0x2a8>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d007      	beq.n	80005fa <HAL_GPIO_Init+0x196>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4a48      	ldr	r2, [pc, #288]	; (8000710 <HAL_GPIO_Init+0x2ac>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d101      	bne.n	80005f6 <HAL_GPIO_Init+0x192>
 80005f2:	2303      	movs	r3, #3
 80005f4:	e006      	b.n	8000604 <HAL_GPIO_Init+0x1a0>
 80005f6:	2304      	movs	r3, #4
 80005f8:	e004      	b.n	8000604 <HAL_GPIO_Init+0x1a0>
 80005fa:	2302      	movs	r3, #2
 80005fc:	e002      	b.n	8000604 <HAL_GPIO_Init+0x1a0>
 80005fe:	2301      	movs	r3, #1
 8000600:	e000      	b.n	8000604 <HAL_GPIO_Init+0x1a0>
 8000602:	2300      	movs	r3, #0
 8000604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000606:	f002 0203 	and.w	r2, r2, #3
 800060a:	0092      	lsls	r2, r2, #2
 800060c:	4093      	lsls	r3, r2
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	4313      	orrs	r3, r2
 8000612:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000614:	493a      	ldr	r1, [pc, #232]	; (8000700 <HAL_GPIO_Init+0x29c>)
 8000616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000618:	089b      	lsrs	r3, r3, #2
 800061a:	3302      	adds	r3, #2
 800061c:	68fa      	ldr	r2, [r7, #12]
 800061e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800062a:	2b00      	cmp	r3, #0
 800062c:	d006      	beq.n	800063c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800062e:	4b39      	ldr	r3, [pc, #228]	; (8000714 <HAL_GPIO_Init+0x2b0>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	4938      	ldr	r1, [pc, #224]	; (8000714 <HAL_GPIO_Init+0x2b0>)
 8000634:	69bb      	ldr	r3, [r7, #24]
 8000636:	4313      	orrs	r3, r2
 8000638:	600b      	str	r3, [r1, #0]
 800063a:	e006      	b.n	800064a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800063c:	4b35      	ldr	r3, [pc, #212]	; (8000714 <HAL_GPIO_Init+0x2b0>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	43db      	mvns	r3, r3
 8000644:	4933      	ldr	r1, [pc, #204]	; (8000714 <HAL_GPIO_Init+0x2b0>)
 8000646:	4013      	ands	r3, r2
 8000648:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000652:	2b00      	cmp	r3, #0
 8000654:	d006      	beq.n	8000664 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000656:	4b2f      	ldr	r3, [pc, #188]	; (8000714 <HAL_GPIO_Init+0x2b0>)
 8000658:	685a      	ldr	r2, [r3, #4]
 800065a:	492e      	ldr	r1, [pc, #184]	; (8000714 <HAL_GPIO_Init+0x2b0>)
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	4313      	orrs	r3, r2
 8000660:	604b      	str	r3, [r1, #4]
 8000662:	e006      	b.n	8000672 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000664:	4b2b      	ldr	r3, [pc, #172]	; (8000714 <HAL_GPIO_Init+0x2b0>)
 8000666:	685a      	ldr	r2, [r3, #4]
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	43db      	mvns	r3, r3
 800066c:	4929      	ldr	r1, [pc, #164]	; (8000714 <HAL_GPIO_Init+0x2b0>)
 800066e:	4013      	ands	r3, r2
 8000670:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800067a:	2b00      	cmp	r3, #0
 800067c:	d006      	beq.n	800068c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800067e:	4b25      	ldr	r3, [pc, #148]	; (8000714 <HAL_GPIO_Init+0x2b0>)
 8000680:	689a      	ldr	r2, [r3, #8]
 8000682:	4924      	ldr	r1, [pc, #144]	; (8000714 <HAL_GPIO_Init+0x2b0>)
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	4313      	orrs	r3, r2
 8000688:	608b      	str	r3, [r1, #8]
 800068a:	e006      	b.n	800069a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800068c:	4b21      	ldr	r3, [pc, #132]	; (8000714 <HAL_GPIO_Init+0x2b0>)
 800068e:	689a      	ldr	r2, [r3, #8]
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	43db      	mvns	r3, r3
 8000694:	491f      	ldr	r1, [pc, #124]	; (8000714 <HAL_GPIO_Init+0x2b0>)
 8000696:	4013      	ands	r3, r2
 8000698:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d006      	beq.n	80006b4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006a6:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <HAL_GPIO_Init+0x2b0>)
 80006a8:	68da      	ldr	r2, [r3, #12]
 80006aa:	491a      	ldr	r1, [pc, #104]	; (8000714 <HAL_GPIO_Init+0x2b0>)
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	60cb      	str	r3, [r1, #12]
 80006b2:	e006      	b.n	80006c2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <HAL_GPIO_Init+0x2b0>)
 80006b6:	68da      	ldr	r2, [r3, #12]
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	43db      	mvns	r3, r3
 80006bc:	4915      	ldr	r1, [pc, #84]	; (8000714 <HAL_GPIO_Init+0x2b0>)
 80006be:	4013      	ands	r3, r2
 80006c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80006c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c4:	3301      	adds	r3, #1
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ce:	fa22 f303 	lsr.w	r3, r2, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	f47f aed0 	bne.w	8000478 <HAL_GPIO_Init+0x14>
  }
}
 80006d8:	bf00      	nop
 80006da:	372c      	adds	r7, #44	; 0x2c
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	10210000 	.word	0x10210000
 80006e8:	10110000 	.word	0x10110000
 80006ec:	10120000 	.word	0x10120000
 80006f0:	10310000 	.word	0x10310000
 80006f4:	10320000 	.word	0x10320000
 80006f8:	10220000 	.word	0x10220000
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010000 	.word	0x40010000
 8000704:	40010800 	.word	0x40010800
 8000708:	40010c00 	.word	0x40010c00
 800070c:	40011000 	.word	0x40011000
 8000710:	40011400 	.word	0x40011400
 8000714:	40010400 	.word	0x40010400

08000718 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	689a      	ldr	r2, [r3, #8]
 8000728:	887b      	ldrh	r3, [r7, #2]
 800072a:	4013      	ands	r3, r2
 800072c:	2b00      	cmp	r3, #0
 800072e:	d002      	beq.n	8000736 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000730:	2301      	movs	r3, #1
 8000732:	73fb      	strb	r3, [r7, #15]
 8000734:	e001      	b.n	800073a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000736:	2300      	movs	r3, #0
 8000738:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800073a:	7bfb      	ldrb	r3, [r7, #15]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
 800074e:	460b      	mov	r3, r1
 8000750:	807b      	strh	r3, [r7, #2]
 8000752:	4613      	mov	r3, r2
 8000754:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000756:	787b      	ldrb	r3, [r7, #1]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d003      	beq.n	8000764 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800075c:	887a      	ldrh	r2, [r7, #2]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000762:	e003      	b.n	800076c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000764:	887b      	ldrh	r3, [r7, #2]
 8000766:	041a      	lsls	r2, r3, #16
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	611a      	str	r2, [r3, #16]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr

08000776 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000776:	b480      	push	{r7}
 8000778:	b083      	sub	sp, #12
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
 800077e:	460b      	mov	r3, r1
 8000780:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	68da      	ldr	r2, [r3, #12]
 8000786:	887b      	ldrh	r3, [r7, #2]
 8000788:	4013      	ands	r3, r2
 800078a:	2b00      	cmp	r3, #0
 800078c:	d003      	beq.n	8000796 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800078e:	887a      	ldrh	r2, [r7, #2]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000794:	e002      	b.n	800079c <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000796:	887a      	ldrh	r2, [r7, #2]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	611a      	str	r2, [r3, #16]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
	...

080007a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d101      	bne.n	80007ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e10f      	b.n	80009da <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d106      	bne.n	80007d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f003 f8be 	bl	8003950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2224      	movs	r2, #36	; 0x24
 80007d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f022 0201 	bic.w	r2, r2, #1
 80007ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80007ec:	f000 ffd4 	bl	8001798 <HAL_RCC_GetPCLK1Freq>
 80007f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	4a7b      	ldr	r2, [pc, #492]	; (80009e4 <HAL_I2C_Init+0x23c>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d807      	bhi.n	800080c <HAL_I2C_Init+0x64>
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	4a7a      	ldr	r2, [pc, #488]	; (80009e8 <HAL_I2C_Init+0x240>)
 8000800:	4293      	cmp	r3, r2
 8000802:	bf94      	ite	ls
 8000804:	2301      	movls	r3, #1
 8000806:	2300      	movhi	r3, #0
 8000808:	b2db      	uxtb	r3, r3
 800080a:	e006      	b.n	800081a <HAL_I2C_Init+0x72>
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	4a77      	ldr	r2, [pc, #476]	; (80009ec <HAL_I2C_Init+0x244>)
 8000810:	4293      	cmp	r3, r2
 8000812:	bf94      	ite	ls
 8000814:	2301      	movls	r3, #1
 8000816:	2300      	movhi	r3, #0
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
 8000820:	e0db      	b.n	80009da <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	4a72      	ldr	r2, [pc, #456]	; (80009f0 <HAL_I2C_Init+0x248>)
 8000826:	fba2 2303 	umull	r2, r3, r2, r3
 800082a:	0c9b      	lsrs	r3, r3, #18
 800082c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	430a      	orrs	r2, r1
 8000840:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6a1b      	ldr	r3, [r3, #32]
 8000848:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	4a64      	ldr	r2, [pc, #400]	; (80009e4 <HAL_I2C_Init+0x23c>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d802      	bhi.n	800085c <HAL_I2C_Init+0xb4>
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	3301      	adds	r3, #1
 800085a:	e009      	b.n	8000870 <HAL_I2C_Init+0xc8>
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000862:	fb02 f303 	mul.w	r3, r2, r3
 8000866:	4a63      	ldr	r2, [pc, #396]	; (80009f4 <HAL_I2C_Init+0x24c>)
 8000868:	fba2 2303 	umull	r2, r3, r2, r3
 800086c:	099b      	lsrs	r3, r3, #6
 800086e:	3301      	adds	r3, #1
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	6812      	ldr	r2, [r2, #0]
 8000874:	430b      	orrs	r3, r1
 8000876:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000882:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	4956      	ldr	r1, [pc, #344]	; (80009e4 <HAL_I2C_Init+0x23c>)
 800088c:	428b      	cmp	r3, r1
 800088e:	d80d      	bhi.n	80008ac <HAL_I2C_Init+0x104>
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	1e59      	subs	r1, r3, #1
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	fbb1 f3f3 	udiv	r3, r1, r3
 800089e:	3301      	adds	r3, #1
 80008a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	bf38      	it	cc
 80008a8:	2304      	movcc	r3, #4
 80008aa:	e04f      	b.n	800094c <HAL_I2C_Init+0x1a4>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d111      	bne.n	80008d8 <HAL_I2C_Init+0x130>
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	1e58      	subs	r0, r3, #1
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6859      	ldr	r1, [r3, #4]
 80008bc:	460b      	mov	r3, r1
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	440b      	add	r3, r1
 80008c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80008c6:	3301      	adds	r3, #1
 80008c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	bf0c      	ite	eq
 80008d0:	2301      	moveq	r3, #1
 80008d2:	2300      	movne	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	e012      	b.n	80008fe <HAL_I2C_Init+0x156>
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	1e58      	subs	r0, r3, #1
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6859      	ldr	r1, [r3, #4]
 80008e0:	460b      	mov	r3, r1
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	440b      	add	r3, r1
 80008e6:	0099      	lsls	r1, r3, #2
 80008e8:	440b      	add	r3, r1
 80008ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80008ee:	3301      	adds	r3, #1
 80008f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	bf0c      	ite	eq
 80008f8:	2301      	moveq	r3, #1
 80008fa:	2300      	movne	r3, #0
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_I2C_Init+0x15e>
 8000902:	2301      	movs	r3, #1
 8000904:	e022      	b.n	800094c <HAL_I2C_Init+0x1a4>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d10e      	bne.n	800092c <HAL_I2C_Init+0x184>
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	1e58      	subs	r0, r3, #1
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6859      	ldr	r1, [r3, #4]
 8000916:	460b      	mov	r3, r1
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	440b      	add	r3, r1
 800091c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000920:	3301      	adds	r3, #1
 8000922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800092a:	e00f      	b.n	800094c <HAL_I2C_Init+0x1a4>
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	1e58      	subs	r0, r3, #1
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6859      	ldr	r1, [r3, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	440b      	add	r3, r1
 800093a:	0099      	lsls	r1, r3, #2
 800093c:	440b      	add	r3, r1
 800093e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000942:	3301      	adds	r3, #1
 8000944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800094c:	6879      	ldr	r1, [r7, #4]
 800094e:	6809      	ldr	r1, [r1, #0]
 8000950:	4313      	orrs	r3, r2
 8000952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	69da      	ldr	r2, [r3, #28]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6a1b      	ldr	r3, [r3, #32]
 8000966:	431a      	orrs	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	430a      	orrs	r2, r1
 800096e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800097a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	6911      	ldr	r1, [r2, #16]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	68d2      	ldr	r2, [r2, #12]
 8000986:	4311      	orrs	r1, r2
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	6812      	ldr	r2, [r2, #0]
 800098c:	430b      	orrs	r3, r1
 800098e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	695a      	ldr	r2, [r3, #20]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	431a      	orrs	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	430a      	orrs	r2, r1
 80009aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f042 0201 	orr.w	r2, r2, #1
 80009ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2220      	movs	r2, #32
 80009c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	000186a0 	.word	0x000186a0
 80009e8:	001e847f 	.word	0x001e847f
 80009ec:	003d08ff 	.word	0x003d08ff
 80009f0:	431bde83 	.word	0x431bde83
 80009f4:	10624dd3 	.word	0x10624dd3

080009f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af02      	add	r7, sp, #8
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	607a      	str	r2, [r7, #4]
 8000a02:	461a      	mov	r2, r3
 8000a04:	460b      	mov	r3, r1
 8000a06:	817b      	strh	r3, [r7, #10]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000a0c:	f7ff fbf6 	bl	80001fc <HAL_GetTick>
 8000a10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b20      	cmp	r3, #32
 8000a1c:	f040 80e0 	bne.w	8000be0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2319      	movs	r3, #25
 8000a26:	2201      	movs	r2, #1
 8000a28:	4970      	ldr	r1, [pc, #448]	; (8000bec <HAL_I2C_Master_Transmit+0x1f4>)
 8000a2a:	68f8      	ldr	r0, [r7, #12]
 8000a2c:	f000 f958 	bl	8000ce0 <I2C_WaitOnFlagUntilTimeout>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000a36:	2302      	movs	r3, #2
 8000a38:	e0d3      	b.n	8000be2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d101      	bne.n	8000a48 <HAL_I2C_Master_Transmit+0x50>
 8000a44:	2302      	movs	r3, #2
 8000a46:	e0cc      	b.n	8000be2 <HAL_I2C_Master_Transmit+0x1ea>
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d007      	beq.n	8000a6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f042 0201 	orr.w	r2, r2, #1
 8000a6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	2221      	movs	r2, #33	; 0x21
 8000a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2210      	movs	r2, #16
 8000a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	2200      	movs	r2, #0
 8000a92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	893a      	ldrh	r2, [r7, #8]
 8000a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4a50      	ldr	r2, [pc, #320]	; (8000bf0 <HAL_I2C_Master_Transmit+0x1f8>)
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000ab0:	8979      	ldrh	r1, [r7, #10]
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	6a3a      	ldr	r2, [r7, #32]
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f000 f89c 	bl	8000bf4 <I2C_MasterRequestWrite>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e08d      	b.n	8000be2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000adc:	e066      	b.n	8000bac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	6a39      	ldr	r1, [r7, #32]
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f000 f9d2 	bl	8000e8c <I2C_WaitOnTXEFlagUntilTimeout>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d00d      	beq.n	8000b0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	d107      	bne.n	8000b06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e06b      	b.n	8000be2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	3b01      	subs	r3, #1
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b32:	3b01      	subs	r3, #1
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	695b      	ldr	r3, [r3, #20]
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	2b04      	cmp	r3, #4
 8000b46:	d11b      	bne.n	8000b80 <HAL_I2C_Master_Transmit+0x188>
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d017      	beq.n	8000b80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b54:	781a      	ldrb	r2, [r3, #0]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b60:	1c5a      	adds	r2, r3, #1
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	6a39      	ldr	r1, [r7, #32]
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f000 f9c2 	bl	8000f0e <I2C_WaitOnBTFFlagUntilTimeout>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d00d      	beq.n	8000bac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	2b04      	cmp	r3, #4
 8000b96:	d107      	bne.n	8000ba8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ba6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e01a      	b.n	8000be2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d194      	bne.n	8000ade <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2220      	movs	r2, #32
 8000bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	e000      	b.n	8000be2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000be0:	2302      	movs	r3, #2
  }
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	00100002 	.word	0x00100002
 8000bf0:	ffff0000 	.word	0xffff0000

08000bf4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af02      	add	r7, sp, #8
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	460b      	mov	r3, r1
 8000c02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	2b08      	cmp	r3, #8
 8000c0e:	d006      	beq.n	8000c1e <I2C_MasterRequestWrite+0x2a>
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d003      	beq.n	8000c1e <I2C_MasterRequestWrite+0x2a>
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000c1c:	d108      	bne.n	8000c30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	e00b      	b.n	8000c48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	2b12      	cmp	r3, #18
 8000c36:	d107      	bne.n	8000c48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000c54:	68f8      	ldr	r0, [r7, #12]
 8000c56:	f000 f843 	bl	8000ce0 <I2C_WaitOnFlagUntilTimeout>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e035      	b.n	8000cd0 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c6c:	d108      	bne.n	8000c80 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000c6e:	897b      	ldrh	r3, [r7, #10]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	461a      	mov	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000c7c:	611a      	str	r2, [r3, #16]
 8000c7e:	e01b      	b.n	8000cb8 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000c80:	897b      	ldrh	r3, [r7, #10]
 8000c82:	11db      	asrs	r3, r3, #7
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	f003 0306 	and.w	r3, r3, #6
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	f063 030f 	orn	r3, r3, #15
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	490e      	ldr	r1, [pc, #56]	; (8000cd8 <I2C_MasterRequestWrite+0xe4>)
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f000 f875 	bl	8000d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e010      	b.n	8000cd0 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000cae:	897b      	ldrh	r3, [r7, #10]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	4907      	ldr	r1, [pc, #28]	; (8000cdc <I2C_MasterRequestWrite+0xe8>)
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	f000 f865 	bl	8000d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e000      	b.n	8000cd0 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	00010008 	.word	0x00010008
 8000cdc:	00010002 	.word	0x00010002

08000ce0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	4613      	mov	r3, r2
 8000cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000cf0:	e025      	b.n	8000d3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf8:	d021      	beq.n	8000d3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000cfa:	f7ff fa7f 	bl	80001fc <HAL_GetTick>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	683a      	ldr	r2, [r7, #0]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d302      	bcc.n	8000d10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d116      	bne.n	8000d3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2200      	movs	r2, #0
 8000d14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2220      	movs	r2, #32
 8000d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f043 0220 	orr.w	r2, r3, #32
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e023      	b.n	8000d86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	0c1b      	lsrs	r3, r3, #16
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d10d      	bne.n	8000d64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4013      	ands	r3, r2
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	bf0c      	ite	eq
 8000d5a:	2301      	moveq	r3, #1
 8000d5c:	2300      	movne	r3, #0
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	461a      	mov	r2, r3
 8000d62:	e00c      	b.n	8000d7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	bf0c      	ite	eq
 8000d76:	2301      	moveq	r3, #1
 8000d78:	2300      	movne	r3, #0
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d0b6      	beq.n	8000cf2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b084      	sub	sp, #16
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000d9c:	e051      	b.n	8000e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dac:	d123      	bne.n	8000df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000dc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2220      	movs	r2, #32
 8000dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f043 0204 	orr.w	r2, r3, #4
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e046      	b.n	8000e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dfc:	d021      	beq.n	8000e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000dfe:	f7ff f9fd 	bl	80001fc <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d302      	bcc.n	8000e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d116      	bne.n	8000e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2200      	movs	r2, #0
 8000e18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2220      	movs	r2, #32
 8000e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f043 0220 	orr.w	r2, r3, #32
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e020      	b.n	8000e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	0c1b      	lsrs	r3, r3, #16
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d10c      	bne.n	8000e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4013      	ands	r3, r2
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	bf14      	ite	ne
 8000e5e:	2301      	movne	r3, #1
 8000e60:	2300      	moveq	r3, #0
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	e00b      	b.n	8000e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	43da      	mvns	r2, r3
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	4013      	ands	r3, r2
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	bf14      	ite	ne
 8000e78:	2301      	movne	r3, #1
 8000e7a:	2300      	moveq	r3, #0
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d18d      	bne.n	8000d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e98:	e02d      	b.n	8000ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000e9a:	68f8      	ldr	r0, [r7, #12]
 8000e9c:	f000 f878 	bl	8000f90 <I2C_IsAcknowledgeFailed>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e02d      	b.n	8000f06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d021      	beq.n	8000ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000eb2:	f7ff f9a3 	bl	80001fc <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	68ba      	ldr	r2, [r7, #8]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d302      	bcc.n	8000ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d116      	bne.n	8000ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2220      	movs	r2, #32
 8000ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f043 0220 	orr.w	r2, r3, #32
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e007      	b.n	8000f06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f00:	2b80      	cmp	r3, #128	; 0x80
 8000f02:	d1ca      	bne.n	8000e9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b084      	sub	sp, #16
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	60f8      	str	r0, [r7, #12]
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000f1a:	e02d      	b.n	8000f78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f000 f837 	bl	8000f90 <I2C_IsAcknowledgeFailed>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e02d      	b.n	8000f88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f32:	d021      	beq.n	8000f78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f34:	f7ff f962 	bl	80001fc <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d302      	bcc.n	8000f4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d116      	bne.n	8000f78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2220      	movs	r2, #32
 8000f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	f043 0220 	orr.w	r2, r3, #32
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e007      	b.n	8000f88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	d1ca      	bne.n	8000f1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fa6:	d11b      	bne.n	8000fe0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000fb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2220      	movs	r2, #32
 8000fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	f043 0204 	orr.w	r2, r3, #4
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e26c      	b.n	80014d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	2b00      	cmp	r3, #0
 8001008:	f000 8087 	beq.w	800111a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800100c:	4b92      	ldr	r3, [pc, #584]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 030c 	and.w	r3, r3, #12
 8001014:	2b04      	cmp	r3, #4
 8001016:	d00c      	beq.n	8001032 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001018:	4b8f      	ldr	r3, [pc, #572]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 030c 	and.w	r3, r3, #12
 8001020:	2b08      	cmp	r3, #8
 8001022:	d112      	bne.n	800104a <HAL_RCC_OscConfig+0x5e>
 8001024:	4b8c      	ldr	r3, [pc, #560]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800102c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001030:	d10b      	bne.n	800104a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001032:	4b89      	ldr	r3, [pc, #548]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d06c      	beq.n	8001118 <HAL_RCC_OscConfig+0x12c>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d168      	bne.n	8001118 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e246      	b.n	80014d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001052:	d106      	bne.n	8001062 <HAL_RCC_OscConfig+0x76>
 8001054:	4b80      	ldr	r3, [pc, #512]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a7f      	ldr	r2, [pc, #508]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 800105a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	e02e      	b.n	80010c0 <HAL_RCC_OscConfig+0xd4>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10c      	bne.n	8001084 <HAL_RCC_OscConfig+0x98>
 800106a:	4b7b      	ldr	r3, [pc, #492]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a7a      	ldr	r2, [pc, #488]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 8001070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	4b78      	ldr	r3, [pc, #480]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a77      	ldr	r2, [pc, #476]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 800107c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e01d      	b.n	80010c0 <HAL_RCC_OscConfig+0xd4>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800108c:	d10c      	bne.n	80010a8 <HAL_RCC_OscConfig+0xbc>
 800108e:	4b72      	ldr	r3, [pc, #456]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a71      	ldr	r2, [pc, #452]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 8001094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	4b6f      	ldr	r3, [pc, #444]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a6e      	ldr	r2, [pc, #440]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e00b      	b.n	80010c0 <HAL_RCC_OscConfig+0xd4>
 80010a8:	4b6b      	ldr	r3, [pc, #428]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a6a      	ldr	r2, [pc, #424]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 80010ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b68      	ldr	r3, [pc, #416]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a67      	ldr	r2, [pc, #412]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 80010ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d013      	beq.n	80010f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff f898 	bl	80001fc <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d0:	f7ff f894 	bl	80001fc <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b64      	cmp	r3, #100	; 0x64
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e1fa      	b.n	80014d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e2:	4b5d      	ldr	r3, [pc, #372]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0f0      	beq.n	80010d0 <HAL_RCC_OscConfig+0xe4>
 80010ee:	e014      	b.n	800111a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff f884 	bl	80001fc <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff f880 	bl	80001fc <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e1e6      	b.n	80014d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110a:	4b53      	ldr	r3, [pc, #332]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x10c>
 8001116:	e000      	b.n	800111a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d063      	beq.n	80011ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001126:	4b4c      	ldr	r3, [pc, #304]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00b      	beq.n	800114a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001132:	4b49      	ldr	r3, [pc, #292]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 030c 	and.w	r3, r3, #12
 800113a:	2b08      	cmp	r3, #8
 800113c:	d11c      	bne.n	8001178 <HAL_RCC_OscConfig+0x18c>
 800113e:	4b46      	ldr	r3, [pc, #280]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d116      	bne.n	8001178 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114a:	4b43      	ldr	r3, [pc, #268]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d005      	beq.n	8001162 <HAL_RCC_OscConfig+0x176>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d001      	beq.n	8001162 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e1ba      	b.n	80014d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001162:	4b3d      	ldr	r3, [pc, #244]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	4939      	ldr	r1, [pc, #228]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 8001172:	4313      	orrs	r3, r2
 8001174:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001176:	e03a      	b.n	80011ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d020      	beq.n	80011c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001180:	4b36      	ldr	r3, [pc, #216]	; (800125c <HAL_RCC_OscConfig+0x270>)
 8001182:	2201      	movs	r2, #1
 8001184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001186:	f7ff f839 	bl	80001fc <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800118e:	f7ff f835 	bl	80001fc <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e19b      	b.n	80014d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a0:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0f0      	beq.n	800118e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ac:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	4927      	ldr	r1, [pc, #156]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	4313      	orrs	r3, r2
 80011be:	600b      	str	r3, [r1, #0]
 80011c0:	e015      	b.n	80011ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <HAL_RCC_OscConfig+0x270>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff f818 	bl	80001fc <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d0:	f7ff f814 	bl	80001fc <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e17a      	b.n	80014d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d03a      	beq.n	8001270 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d019      	beq.n	8001236 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_RCC_OscConfig+0x274>)
 8001204:	2201      	movs	r2, #1
 8001206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001208:	f7fe fff8 	bl	80001fc <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001210:	f7fe fff4 	bl	80001fc <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e15a      	b.n	80014d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <HAL_RCC_OscConfig+0x26c>)
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f0      	beq.n	8001210 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800122e:	2001      	movs	r0, #1
 8001230:	f000 fada 	bl	80017e8 <RCC_Delay>
 8001234:	e01c      	b.n	8001270 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_RCC_OscConfig+0x274>)
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123c:	f7fe ffde 	bl	80001fc <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001242:	e00f      	b.n	8001264 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001244:	f7fe ffda 	bl	80001fc <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d908      	bls.n	8001264 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e140      	b.n	80014d8 <HAL_RCC_OscConfig+0x4ec>
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000
 800125c:	42420000 	.word	0x42420000
 8001260:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001264:	4b9e      	ldr	r3, [pc, #632]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1e9      	bne.n	8001244 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80a6 	beq.w	80013ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001282:	4b97      	ldr	r3, [pc, #604]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10d      	bne.n	80012aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	4b94      	ldr	r3, [pc, #592]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	4a93      	ldr	r2, [pc, #588]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001298:	61d3      	str	r3, [r2, #28]
 800129a:	4b91      	ldr	r3, [pc, #580]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012a6:	2301      	movs	r3, #1
 80012a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012aa:	4b8e      	ldr	r3, [pc, #568]	; (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d118      	bne.n	80012e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012b6:	4b8b      	ldr	r3, [pc, #556]	; (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a8a      	ldr	r2, [pc, #552]	; (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 80012bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012c2:	f7fe ff9b 	bl	80001fc <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ca:	f7fe ff97 	bl	80001fc <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b64      	cmp	r3, #100	; 0x64
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e0fd      	b.n	80014d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012dc:	4b81      	ldr	r3, [pc, #516]	; (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d106      	bne.n	80012fe <HAL_RCC_OscConfig+0x312>
 80012f0:	4b7b      	ldr	r3, [pc, #492]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	4a7a      	ldr	r2, [pc, #488]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6213      	str	r3, [r2, #32]
 80012fc:	e02d      	b.n	800135a <HAL_RCC_OscConfig+0x36e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10c      	bne.n	8001320 <HAL_RCC_OscConfig+0x334>
 8001306:	4b76      	ldr	r3, [pc, #472]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	4a75      	ldr	r2, [pc, #468]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 800130c:	f023 0301 	bic.w	r3, r3, #1
 8001310:	6213      	str	r3, [r2, #32]
 8001312:	4b73      	ldr	r3, [pc, #460]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	4a72      	ldr	r2, [pc, #456]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 8001318:	f023 0304 	bic.w	r3, r3, #4
 800131c:	6213      	str	r3, [r2, #32]
 800131e:	e01c      	b.n	800135a <HAL_RCC_OscConfig+0x36e>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	2b05      	cmp	r3, #5
 8001326:	d10c      	bne.n	8001342 <HAL_RCC_OscConfig+0x356>
 8001328:	4b6d      	ldr	r3, [pc, #436]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4a6c      	ldr	r2, [pc, #432]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	6213      	str	r3, [r2, #32]
 8001334:	4b6a      	ldr	r3, [pc, #424]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	4a69      	ldr	r2, [pc, #420]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6213      	str	r3, [r2, #32]
 8001340:	e00b      	b.n	800135a <HAL_RCC_OscConfig+0x36e>
 8001342:	4b67      	ldr	r3, [pc, #412]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4a66      	ldr	r2, [pc, #408]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 8001348:	f023 0301 	bic.w	r3, r3, #1
 800134c:	6213      	str	r3, [r2, #32]
 800134e:	4b64      	ldr	r3, [pc, #400]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	4a63      	ldr	r2, [pc, #396]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 8001354:	f023 0304 	bic.w	r3, r3, #4
 8001358:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d015      	beq.n	800138e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001362:	f7fe ff4b 	bl	80001fc <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001368:	e00a      	b.n	8001380 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800136a:	f7fe ff47 	bl	80001fc <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	f241 3288 	movw	r2, #5000	; 0x1388
 8001378:	4293      	cmp	r3, r2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e0ab      	b.n	80014d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001380:	4b57      	ldr	r3, [pc, #348]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0ee      	beq.n	800136a <HAL_RCC_OscConfig+0x37e>
 800138c:	e014      	b.n	80013b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138e:	f7fe ff35 	bl	80001fc <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001394:	e00a      	b.n	80013ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001396:	f7fe ff31 	bl	80001fc <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e095      	b.n	80014d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ac:	4b4c      	ldr	r3, [pc, #304]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1ee      	bne.n	8001396 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d105      	bne.n	80013ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013be:	4b48      	ldr	r3, [pc, #288]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	4a47      	ldr	r2, [pc, #284]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 8081 	beq.w	80014d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013d4:	4b42      	ldr	r3, [pc, #264]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 030c 	and.w	r3, r3, #12
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d061      	beq.n	80014a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d146      	bne.n	8001476 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e8:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <HAL_RCC_OscConfig+0x4fc>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ee:	f7fe ff05 	bl	80001fc <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f6:	f7fe ff01 	bl	80001fc <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e067      	b.n	80014d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001408:	4b35      	ldr	r3, [pc, #212]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f0      	bne.n	80013f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800141c:	d108      	bne.n	8001430 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	492d      	ldr	r1, [pc, #180]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001430:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a19      	ldr	r1, [r3, #32]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	430b      	orrs	r3, r1
 8001442:	4927      	ldr	r1, [pc, #156]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 8001444:	4313      	orrs	r3, r2
 8001446:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <HAL_RCC_OscConfig+0x4fc>)
 800144a:	2201      	movs	r2, #1
 800144c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144e:	f7fe fed5 	bl	80001fc <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001456:	f7fe fed1 	bl	80001fc <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e037      	b.n	80014d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x46a>
 8001474:	e02f      	b.n	80014d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <HAL_RCC_OscConfig+0x4fc>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7fe febe 	bl	80001fc <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001484:	f7fe feba 	bl	80001fc <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e020      	b.n	80014d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x498>
 80014a2:	e018      	b.n	80014d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e013      	b.n	80014d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_RCC_OscConfig+0x4f4>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d106      	bne.n	80014d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40007000 	.word	0x40007000
 80014e8:	42420060 	.word	0x42420060

080014ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0d0      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001500:	4b6a      	ldr	r3, [pc, #424]	; (80016ac <HAL_RCC_ClockConfig+0x1c0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d910      	bls.n	8001530 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150e:	4b67      	ldr	r3, [pc, #412]	; (80016ac <HAL_RCC_ClockConfig+0x1c0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 0207 	bic.w	r2, r3, #7
 8001516:	4965      	ldr	r1, [pc, #404]	; (80016ac <HAL_RCC_ClockConfig+0x1c0>)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	4313      	orrs	r3, r2
 800151c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151e:	4b63      	ldr	r3, [pc, #396]	; (80016ac <HAL_RCC_ClockConfig+0x1c0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d001      	beq.n	8001530 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0b8      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d020      	beq.n	800157e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001548:	4b59      	ldr	r3, [pc, #356]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	4a58      	ldr	r2, [pc, #352]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 800154e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001552:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001560:	4b53      	ldr	r3, [pc, #332]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	4a52      	ldr	r2, [pc, #328]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800156a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800156c:	4b50      	ldr	r3, [pc, #320]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	494d      	ldr	r1, [pc, #308]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	4313      	orrs	r3, r2
 800157c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d040      	beq.n	800160c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d107      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d115      	bne.n	80015ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e07f      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d107      	bne.n	80015ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015aa:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d109      	bne.n	80015ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e073      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e06b      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ca:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f023 0203 	bic.w	r2, r3, #3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	4936      	ldr	r1, [pc, #216]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015dc:	f7fe fe0e 	bl	80001fc <HAL_GetTick>
 80015e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e2:	e00a      	b.n	80015fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e4:	f7fe fe0a 	bl	80001fc <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e053      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fa:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 020c 	and.w	r2, r3, #12
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	429a      	cmp	r2, r3
 800160a:	d1eb      	bne.n	80015e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <HAL_RCC_ClockConfig+0x1c0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d210      	bcs.n	800163c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161a:	4b24      	ldr	r3, [pc, #144]	; (80016ac <HAL_RCC_ClockConfig+0x1c0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 0207 	bic.w	r2, r3, #7
 8001622:	4922      	ldr	r1, [pc, #136]	; (80016ac <HAL_RCC_ClockConfig+0x1c0>)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <HAL_RCC_ClockConfig+0x1c0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d001      	beq.n	800163c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e032      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	d008      	beq.n	800165a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	4916      	ldr	r1, [pc, #88]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001656:	4313      	orrs	r3, r2
 8001658:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d009      	beq.n	800167a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	490e      	ldr	r1, [pc, #56]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800167a:	f000 f821 	bl	80016c0 <HAL_RCC_GetSysClockFreq>
 800167e:	4601      	mov	r1, r0
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_RCC_ClockConfig+0x1c8>)
 800168c:	5cd3      	ldrb	r3, [r2, r3]
 800168e:	fa21 f303 	lsr.w	r3, r1, r3
 8001692:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_RCC_ClockConfig+0x1d0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fd6c 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40022000 	.word	0x40022000
 80016b0:	40021000 	.word	0x40021000
 80016b4:	08004698 	.word	0x08004698
 80016b8:	20000028 	.word	0x20000028
 80016bc:	20000000 	.word	0x20000000

080016c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c0:	b490      	push	{r4, r7}
 80016c2:	b08a      	sub	sp, #40	; 0x28
 80016c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016c6:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016c8:	1d3c      	adds	r4, r7, #4
 80016ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016d0:	4b28      	ldr	r3, [pc, #160]	; (8001774 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016ea:	4b23      	ldr	r3, [pc, #140]	; (8001778 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d002      	beq.n	8001700 <HAL_RCC_GetSysClockFreq+0x40>
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d003      	beq.n	8001706 <HAL_RCC_GetSysClockFreq+0x46>
 80016fe:	e02d      	b.n	800175c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001702:	623b      	str	r3, [r7, #32]
      break;
 8001704:	e02d      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	0c9b      	lsrs	r3, r3, #18
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001712:	4413      	add	r3, r2
 8001714:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001718:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d013      	beq.n	800174c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	0c5b      	lsrs	r3, r3, #17
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001732:	4413      	add	r3, r2
 8001734:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001738:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	4a0f      	ldr	r2, [pc, #60]	; (800177c <HAL_RCC_GetSysClockFreq+0xbc>)
 800173e:	fb02 f203 	mul.w	r2, r2, r3
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	fbb2 f3f3 	udiv	r3, r2, r3
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
 800174a:	e004      	b.n	8001756 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001750:	fb02 f303 	mul.w	r3, r2, r3
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	623b      	str	r3, [r7, #32]
      break;
 800175a:	e002      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <HAL_RCC_GetSysClockFreq+0xbc>)
 800175e:	623b      	str	r3, [r7, #32]
      break;
 8001760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001762:	6a3b      	ldr	r3, [r7, #32]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3728      	adds	r7, #40	; 0x28
 8001768:	46bd      	mov	sp, r7
 800176a:	bc90      	pop	{r4, r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	08004500 	.word	0x08004500
 8001774:	08004510 	.word	0x08004510
 8001778:	40021000 	.word	0x40021000
 800177c:	007a1200 	.word	0x007a1200
 8001780:	003d0900 	.word	0x003d0900

08001784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001788:	4b02      	ldr	r3, [pc, #8]	; (8001794 <HAL_RCC_GetHCLKFreq+0x10>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	20000028 	.word	0x20000028

08001798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800179c:	f7ff fff2 	bl	8001784 <HAL_RCC_GetHCLKFreq>
 80017a0:	4601      	mov	r1, r0
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	0a1b      	lsrs	r3, r3, #8
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	4a03      	ldr	r2, [pc, #12]	; (80017bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80017ae:	5cd3      	ldrb	r3, [r2, r3]
 80017b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021000 	.word	0x40021000
 80017bc:	080046a8 	.word	0x080046a8

080017c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017c4:	f7ff ffde 	bl	8001784 <HAL_RCC_GetHCLKFreq>
 80017c8:	4601      	mov	r1, r0
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	0adb      	lsrs	r3, r3, #11
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	4a03      	ldr	r2, [pc, #12]	; (80017e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017d6:	5cd3      	ldrb	r3, [r2, r3]
 80017d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017dc:	4618      	mov	r0, r3
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021000 	.word	0x40021000
 80017e4:	080046a8 	.word	0x080046a8

080017e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <RCC_Delay+0x34>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <RCC_Delay+0x38>)
 80017f6:	fba2 2303 	umull	r2, r3, r2, r3
 80017fa:	0a5b      	lsrs	r3, r3, #9
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	fb02 f303 	mul.w	r3, r2, r3
 8001802:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001804:	bf00      	nop
  }
  while (Delay --);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1e5a      	subs	r2, r3, #1
 800180a:	60fa      	str	r2, [r7, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f9      	bne.n	8001804 <RCC_Delay+0x1c>
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000028 	.word	0x20000028
 8001820:	10624dd3 	.word	0x10624dd3

08001824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e01d      	b.n	8001872 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d106      	bne.n	8001850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f002 f8c0 	bl	80039d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2202      	movs	r2, #2
 8001854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3304      	adds	r3, #4
 8001860:	4619      	mov	r1, r3
 8001862:	4610      	mov	r0, r2
 8001864:	f000 fa3a 	bl	8001cdc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800187a:	b480      	push	{r7}
 800187c:	b085      	sub	sp, #20
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f042 0201 	orr.w	r2, r2, #1
 8001890:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b06      	cmp	r3, #6
 80018a2:	d007      	beq.n	80018b4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0201 	bic.w	r2, r2, #1
 80018d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6a1a      	ldr	r2, [r3, #32]
 80018de:	f241 1311 	movw	r3, #4369	; 0x1111
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10f      	bne.n	8001908 <HAL_TIM_Base_Stop_IT+0x48>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6a1a      	ldr	r2, [r3, #32]
 80018ee:	f240 4344 	movw	r3, #1092	; 0x444
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d107      	bne.n	8001908 <HAL_TIM_Base_Stop_IT+0x48>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0201 	bic.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b02      	cmp	r3, #2
 8001928:	d122      	bne.n	8001970 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b02      	cmp	r3, #2
 8001936:	d11b      	bne.n	8001970 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f06f 0202 	mvn.w	r2, #2
 8001940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f9a4 	bl	8001ca4 <HAL_TIM_IC_CaptureCallback>
 800195c:	e005      	b.n	800196a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f997 	bl	8001c92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f9a6 	bl	8001cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b04      	cmp	r3, #4
 800197c:	d122      	bne.n	80019c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b04      	cmp	r3, #4
 800198a:	d11b      	bne.n	80019c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f06f 0204 	mvn.w	r2, #4
 8001994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2202      	movs	r2, #2
 800199a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f97a 	bl	8001ca4 <HAL_TIM_IC_CaptureCallback>
 80019b0:	e005      	b.n	80019be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f96d 	bl	8001c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f97c 	bl	8001cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d122      	bne.n	8001a18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d11b      	bne.n	8001a18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f06f 0208 	mvn.w	r2, #8
 80019e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2204      	movs	r2, #4
 80019ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f950 	bl	8001ca4 <HAL_TIM_IC_CaptureCallback>
 8001a04:	e005      	b.n	8001a12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f943 	bl	8001c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 f952 	bl	8001cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	2b10      	cmp	r3, #16
 8001a24:	d122      	bne.n	8001a6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	2b10      	cmp	r3, #16
 8001a32:	d11b      	bne.n	8001a6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f06f 0210 	mvn.w	r2, #16
 8001a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2208      	movs	r2, #8
 8001a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f926 	bl	8001ca4 <HAL_TIM_IC_CaptureCallback>
 8001a58:	e005      	b.n	8001a66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f919 	bl	8001c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f928 	bl	8001cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d10e      	bne.n	8001a98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d107      	bne.n	8001a98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f06f 0201 	mvn.w	r2, #1
 8001a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f001 feda 	bl	800384c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa2:	2b80      	cmp	r3, #128	; 0x80
 8001aa4:	d10e      	bne.n	8001ac4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab0:	2b80      	cmp	r3, #128	; 0x80
 8001ab2:	d107      	bne.n	8001ac4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 fa51 	bl	8001f66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ace:	2b40      	cmp	r3, #64	; 0x40
 8001ad0:	d10e      	bne.n	8001af0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001adc:	2b40      	cmp	r3, #64	; 0x40
 8001ade:	d107      	bne.n	8001af0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f8ec 	bl	8001cc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	f003 0320 	and.w	r3, r3, #32
 8001afa:	2b20      	cmp	r3, #32
 8001afc:	d10e      	bne.n	8001b1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f003 0320 	and.w	r3, r3, #32
 8001b08:	2b20      	cmp	r3, #32
 8001b0a:	d107      	bne.n	8001b1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f06f 0220 	mvn.w	r2, #32
 8001b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 fa1c 	bl	8001f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_TIM_ConfigClockSource+0x18>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e0a6      	b.n	8001c8a <HAL_TIM_ConfigClockSource+0x166>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b40      	cmp	r3, #64	; 0x40
 8001b72:	d067      	beq.n	8001c44 <HAL_TIM_ConfigClockSource+0x120>
 8001b74:	2b40      	cmp	r3, #64	; 0x40
 8001b76:	d80b      	bhi.n	8001b90 <HAL_TIM_ConfigClockSource+0x6c>
 8001b78:	2b10      	cmp	r3, #16
 8001b7a:	d073      	beq.n	8001c64 <HAL_TIM_ConfigClockSource+0x140>
 8001b7c:	2b10      	cmp	r3, #16
 8001b7e:	d802      	bhi.n	8001b86 <HAL_TIM_ConfigClockSource+0x62>
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d06f      	beq.n	8001c64 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001b84:	e078      	b.n	8001c78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001b86:	2b20      	cmp	r3, #32
 8001b88:	d06c      	beq.n	8001c64 <HAL_TIM_ConfigClockSource+0x140>
 8001b8a:	2b30      	cmp	r3, #48	; 0x30
 8001b8c:	d06a      	beq.n	8001c64 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001b8e:	e073      	b.n	8001c78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001b90:	2b70      	cmp	r3, #112	; 0x70
 8001b92:	d00d      	beq.n	8001bb0 <HAL_TIM_ConfigClockSource+0x8c>
 8001b94:	2b70      	cmp	r3, #112	; 0x70
 8001b96:	d804      	bhi.n	8001ba2 <HAL_TIM_ConfigClockSource+0x7e>
 8001b98:	2b50      	cmp	r3, #80	; 0x50
 8001b9a:	d033      	beq.n	8001c04 <HAL_TIM_ConfigClockSource+0xe0>
 8001b9c:	2b60      	cmp	r3, #96	; 0x60
 8001b9e:	d041      	beq.n	8001c24 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001ba0:	e06a      	b.n	8001c78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba6:	d066      	beq.n	8001c76 <HAL_TIM_ConfigClockSource+0x152>
 8001ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bac:	d017      	beq.n	8001bde <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001bae:	e063      	b.n	8001c78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	6899      	ldr	r1, [r3, #8]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f000 f965 	bl	8001e8e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001bd2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	609a      	str	r2, [r3, #8]
      break;
 8001bdc:	e04c      	b.n	8001c78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	6899      	ldr	r1, [r3, #8]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f000 f94e 	bl	8001e8e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c00:	609a      	str	r2, [r3, #8]
      break;
 8001c02:	e039      	b.n	8001c78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	461a      	mov	r2, r3
 8001c12:	f000 f8c5 	bl	8001da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2150      	movs	r1, #80	; 0x50
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 f91c 	bl	8001e5a <TIM_ITRx_SetConfig>
      break;
 8001c22:	e029      	b.n	8001c78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	6859      	ldr	r1, [r3, #4]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	461a      	mov	r2, r3
 8001c32:	f000 f8e3 	bl	8001dfc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2160      	movs	r1, #96	; 0x60
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 f90c 	bl	8001e5a <TIM_ITRx_SetConfig>
      break;
 8001c42:	e019      	b.n	8001c78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	461a      	mov	r2, r3
 8001c52:	f000 f8a5 	bl	8001da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2140      	movs	r1, #64	; 0x40
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 f8fc 	bl	8001e5a <TIM_ITRx_SetConfig>
      break;
 8001c62:	e009      	b.n	8001c78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4610      	mov	r0, r2
 8001c70:	f000 f8f3 	bl	8001e5a <TIM_ITRx_SetConfig>
      break;
 8001c74:	e000      	b.n	8001c78 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001c76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
	...

08001cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a29      	ldr	r2, [pc, #164]	; (8001d94 <TIM_Base_SetConfig+0xb8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d00b      	beq.n	8001d0c <TIM_Base_SetConfig+0x30>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cfa:	d007      	beq.n	8001d0c <TIM_Base_SetConfig+0x30>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a26      	ldr	r2, [pc, #152]	; (8001d98 <TIM_Base_SetConfig+0xbc>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d003      	beq.n	8001d0c <TIM_Base_SetConfig+0x30>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a25      	ldr	r2, [pc, #148]	; (8001d9c <TIM_Base_SetConfig+0xc0>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d108      	bne.n	8001d1e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <TIM_Base_SetConfig+0xb8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00b      	beq.n	8001d3e <TIM_Base_SetConfig+0x62>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d2c:	d007      	beq.n	8001d3e <TIM_Base_SetConfig+0x62>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a19      	ldr	r2, [pc, #100]	; (8001d98 <TIM_Base_SetConfig+0xbc>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d003      	beq.n	8001d3e <TIM_Base_SetConfig+0x62>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <TIM_Base_SetConfig+0xc0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d108      	bne.n	8001d50 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <TIM_Base_SetConfig+0xb8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d103      	bne.n	8001d84 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	615a      	str	r2, [r3, #20]
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	40012c00 	.word	0x40012c00
 8001d98:	40000400 	.word	0x40000400
 8001d9c:	40000800 	.word	0x40000800

08001da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	f023 0201 	bic.w	r2, r3, #1
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f023 030a 	bic.w	r3, r3, #10
 8001ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	621a      	str	r2, [r3, #32]
}
 8001df2:	bf00      	nop
 8001df4:	371c      	adds	r7, #28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f023 0210 	bic.w	r2, r3, #16
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	031b      	lsls	r3, r3, #12
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	621a      	str	r2, [r3, #32]
}
 8001e50:	bf00      	nop
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b085      	sub	sp, #20
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	f043 0307 	orr.w	r3, r3, #7
 8001e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	609a      	str	r2, [r3, #8]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b087      	sub	sp, #28
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ea8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	021a      	lsls	r2, r3, #8
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	609a      	str	r2, [r3, #8]
}
 8001ec2:	bf00      	nop
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e032      	b.n	8001f4a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f1c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e03f      	b.n	800200a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d106      	bne.n	8001fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f001 fd56 	bl	8003a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2224      	movs	r2, #36	; 0x24
 8001fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f90b 	bl	80021d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2220      	movs	r2, #32
 8002004:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b088      	sub	sp, #32
 8002016:	af02      	add	r7, sp, #8
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	4613      	mov	r3, r2
 8002020:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b20      	cmp	r3, #32
 8002030:	f040 8083 	bne.w	800213a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <HAL_UART_Transmit+0x2e>
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e07b      	b.n	800213c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_UART_Transmit+0x40>
 800204e:	2302      	movs	r3, #2
 8002050:	e074      	b.n	800213c <HAL_UART_Transmit+0x12a>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2221      	movs	r2, #33	; 0x21
 8002064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002068:	f7fe f8c8 	bl	80001fc <HAL_GetTick>
 800206c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	88fa      	ldrh	r2, [r7, #6]
 8002072:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	88fa      	ldrh	r2, [r7, #6]
 8002078:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800207a:	e042      	b.n	8002102 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002080:	b29b      	uxth	r3, r3
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002092:	d122      	bne.n	80020da <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2200      	movs	r2, #0
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 f850 	bl	8002144 <UART_WaitOnFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e046      	b.n	800213c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020c0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d103      	bne.n	80020d2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	3302      	adds	r3, #2
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	e017      	b.n	8002102 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	3301      	adds	r3, #1
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	e013      	b.n	8002102 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2200      	movs	r2, #0
 80020e2:	2180      	movs	r1, #128	; 0x80
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 f82d 	bl	8002144 <UART_WaitOnFlagUntilTimeout>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e023      	b.n	800213c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	60ba      	str	r2, [r7, #8]
 80020fa:	781a      	ldrb	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1b7      	bne.n	800207c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2200      	movs	r2, #0
 8002114:	2140      	movs	r1, #64	; 0x40
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 f814 	bl	8002144 <UART_WaitOnFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e00a      	b.n	800213c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2220      	movs	r2, #32
 800212a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	e000      	b.n	800213c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800213a:	2302      	movs	r3, #2
  }
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	4613      	mov	r3, r2
 8002152:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002154:	e02c      	b.n	80021b0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215c:	d028      	beq.n	80021b0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d007      	beq.n	8002174 <UART_WaitOnFlagUntilTimeout+0x30>
 8002164:	f7fe f84a 	bl	80001fc <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	429a      	cmp	r2, r3
 8002172:	d21d      	bcs.n	80021b0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002182:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e00f      	b.n	80021d0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	4013      	ands	r3, r2
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	429a      	cmp	r2, r3
 80021be:	bf0c      	ite	eq
 80021c0:	2301      	moveq	r3, #1
 80021c2:	2300      	movne	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d0c3      	beq.n	8002156 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002212:	f023 030c 	bic.w	r3, r3, #12
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	68f9      	ldr	r1, [r7, #12]
 800221c:	430b      	orrs	r3, r1
 800221e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a52      	ldr	r2, [pc, #328]	; (8002384 <UART_SetConfig+0x1ac>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d14e      	bne.n	80022de <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002240:	f7ff fabe 	bl	80017c0 <HAL_RCC_GetPCLK2Freq>
 8002244:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	009a      	lsls	r2, r3, #2
 8002250:	441a      	add	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	fbb2 f3f3 	udiv	r3, r2, r3
 800225c:	4a4a      	ldr	r2, [pc, #296]	; (8002388 <UART_SetConfig+0x1b0>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	0119      	lsls	r1, r3, #4
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	009a      	lsls	r2, r3, #2
 8002270:	441a      	add	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	fbb2 f2f3 	udiv	r2, r2, r3
 800227c:	4b42      	ldr	r3, [pc, #264]	; (8002388 <UART_SetConfig+0x1b0>)
 800227e:	fba3 0302 	umull	r0, r3, r3, r2
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	2064      	movs	r0, #100	; 0x64
 8002286:	fb00 f303 	mul.w	r3, r0, r3
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	3332      	adds	r3, #50	; 0x32
 8002290:	4a3d      	ldr	r2, [pc, #244]	; (8002388 <UART_SetConfig+0x1b0>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800229c:	4419      	add	r1, r3
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	009a      	lsls	r2, r3, #2
 80022a8:	441a      	add	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80022b4:	4b34      	ldr	r3, [pc, #208]	; (8002388 <UART_SetConfig+0x1b0>)
 80022b6:	fba3 0302 	umull	r0, r3, r3, r2
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	2064      	movs	r0, #100	; 0x64
 80022be:	fb00 f303 	mul.w	r3, r0, r3
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	3332      	adds	r3, #50	; 0x32
 80022c8:	4a2f      	ldr	r2, [pc, #188]	; (8002388 <UART_SetConfig+0x1b0>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	f003 020f 	and.w	r2, r3, #15
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	440a      	add	r2, r1
 80022da:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80022dc:	e04d      	b.n	800237a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80022de:	f7ff fa5b 	bl	8001798 <HAL_RCC_GetPCLK1Freq>
 80022e2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	009a      	lsls	r2, r3, #2
 80022ee:	441a      	add	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fa:	4a23      	ldr	r2, [pc, #140]	; (8002388 <UART_SetConfig+0x1b0>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	0119      	lsls	r1, r3, #4
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	009a      	lsls	r2, r3, #2
 800230e:	441a      	add	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	fbb2 f2f3 	udiv	r2, r2, r3
 800231a:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <UART_SetConfig+0x1b0>)
 800231c:	fba3 0302 	umull	r0, r3, r3, r2
 8002320:	095b      	lsrs	r3, r3, #5
 8002322:	2064      	movs	r0, #100	; 0x64
 8002324:	fb00 f303 	mul.w	r3, r0, r3
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	3332      	adds	r3, #50	; 0x32
 800232e:	4a16      	ldr	r2, [pc, #88]	; (8002388 <UART_SetConfig+0x1b0>)
 8002330:	fba2 2303 	umull	r2, r3, r2, r3
 8002334:	095b      	lsrs	r3, r3, #5
 8002336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800233a:	4419      	add	r1, r3
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	009a      	lsls	r2, r3, #2
 8002346:	441a      	add	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <UART_SetConfig+0x1b0>)
 8002354:	fba3 0302 	umull	r0, r3, r3, r2
 8002358:	095b      	lsrs	r3, r3, #5
 800235a:	2064      	movs	r0, #100	; 0x64
 800235c:	fb00 f303 	mul.w	r3, r0, r3
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	3332      	adds	r3, #50	; 0x32
 8002366:	4a08      	ldr	r2, [pc, #32]	; (8002388 <UART_SetConfig+0x1b0>)
 8002368:	fba2 2303 	umull	r2, r3, r2, r3
 800236c:	095b      	lsrs	r3, r3, #5
 800236e:	f003 020f 	and.w	r2, r3, #15
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	440a      	add	r2, r1
 8002378:	609a      	str	r2, [r3, #8]
}
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40013800 	.word	0x40013800
 8002388:	51eb851f 	.word	0x51eb851f

0800238c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af02      	add	r7, sp, #8
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	f023 030f 	bic.w	r3, r3, #15
 800239c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	f043 030c 	orr.w	r3, r3, #12
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80023b8:	7bbb      	ldrb	r3, [r7, #14]
 80023ba:	f043 030c 	orr.w	r3, r3, #12
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80023c2:	7bbb      	ldrb	r3, [r7, #14]
 80023c4:	f043 0308 	orr.w	r3, r3, #8
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80023cc:	f107 0208 	add.w	r2, r7, #8
 80023d0:	2364      	movs	r3, #100	; 0x64
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	2304      	movs	r3, #4
 80023d6:	214e      	movs	r1, #78	; 0x4e
 80023d8:	4803      	ldr	r0, [pc, #12]	; (80023e8 <lcd_send_cmd+0x5c>)
 80023da:	f7fe fb0d 	bl	80009f8 <HAL_I2C_Master_Transmit>
}
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000168 	.word	0x20000168

080023ec <lcd_send_data>:

void lcd_send_data (char data)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	f023 030f 	bic.w	r3, r3, #15
 80023fc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	f043 030d 	orr.w	r3, r3, #13
 800240a:	b2db      	uxtb	r3, r3
 800240c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	f043 0309 	orr.w	r3, r3, #9
 8002414:	b2db      	uxtb	r3, r3
 8002416:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002418:	7bbb      	ldrb	r3, [r7, #14]
 800241a:	f043 030d 	orr.w	r3, r3, #13
 800241e:	b2db      	uxtb	r3, r3
 8002420:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002422:	7bbb      	ldrb	r3, [r7, #14]
 8002424:	f043 0309 	orr.w	r3, r3, #9
 8002428:	b2db      	uxtb	r3, r3
 800242a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800242c:	f107 0208 	add.w	r2, r7, #8
 8002430:	2364      	movs	r3, #100	; 0x64
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	2304      	movs	r3, #4
 8002436:	214e      	movs	r1, #78	; 0x4e
 8002438:	4803      	ldr	r0, [pc, #12]	; (8002448 <lcd_send_data+0x5c>)
 800243a:	f7fe fadd 	bl	80009f8 <HAL_I2C_Master_Transmit>
}
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000168 	.word	0x20000168

0800244c <lcd_init>:

void lcd_init (void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8002450:	2002      	movs	r0, #2
 8002452:	f7ff ff9b 	bl	800238c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8002456:	2028      	movs	r0, #40	; 0x28
 8002458:	f7ff ff98 	bl	800238c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 800245c:	200c      	movs	r0, #12
 800245e:	f7ff ff95 	bl	800238c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8002462:	2080      	movs	r0, #128	; 0x80
 8002464:	f7ff ff92 	bl	800238c <lcd_send_cmd>
}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}

0800246c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8002474:	e006      	b.n	8002484 <lcd_send_string+0x18>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff ffb4 	bl	80023ec <lcd_send_data>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f4      	bne.n	8002476 <lcd_send_string+0xa>
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b090      	sub	sp, #64	; 0x40
 8002498:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800249a:	2301      	movs	r3, #1
 800249c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800249e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024a2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80024a4:	2300      	movs	r3, #0
 80024a6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024a8:	2301      	movs	r3, #1
 80024aa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ac:	2302      	movs	r3, #2
 80024ae:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024b4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80024b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80024ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80024bc:	f107 0318 	add.w	r3, r7, #24
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe fd93 	bl	8000fec <HAL_RCC_OscConfig>
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024c6:	230f      	movs	r3, #15
 80024c8:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024ca:	2302      	movs	r3, #2
 80024cc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024d6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]

	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	2102      	movs	r1, #2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff f803 	bl	80014ec <HAL_RCC_ClockConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80024e6:	f7ff f94d 	bl	8001784 <HAL_RCC_GetHCLKFreq>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <SystemClock_Config+0x80>)
 80024ee:	fba3 2302 	umull	r2, r3, r3, r2
 80024f2:	099b      	lsrs	r3, r3, #6
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fd ff8c 	bl	8000412 <HAL_SYSTICK_Config>

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80024fa:	2004      	movs	r0, #4
 80024fc:	f7fd ff96 	bl	800042c <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002500:	2200      	movs	r2, #0
 8002502:	2100      	movs	r1, #0
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	f7fd ff59 	bl	80003be <HAL_NVIC_SetPriority>
}
 800250c:	bf00      	nop
 800250e:	3740      	adds	r7, #64	; 0x40
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	10624dd3 	.word	0x10624dd3

08002518 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800251e:	4b3b      	ldr	r3, [pc, #236]	; (800260c <MX_GPIO_Init+0xf4>)
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	4a3a      	ldr	r2, [pc, #232]	; (800260c <MX_GPIO_Init+0xf4>)
 8002524:	f043 0310 	orr.w	r3, r3, #16
 8002528:	6193      	str	r3, [r2, #24]
 800252a:	4b38      	ldr	r3, [pc, #224]	; (800260c <MX_GPIO_Init+0xf4>)
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002536:	4b35      	ldr	r3, [pc, #212]	; (800260c <MX_GPIO_Init+0xf4>)
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	4a34      	ldr	r2, [pc, #208]	; (800260c <MX_GPIO_Init+0xf4>)
 800253c:	f043 0320 	orr.w	r3, r3, #32
 8002540:	6193      	str	r3, [r2, #24]
 8002542:	4b32      	ldr	r3, [pc, #200]	; (800260c <MX_GPIO_Init+0xf4>)
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800254e:	4b2f      	ldr	r3, [pc, #188]	; (800260c <MX_GPIO_Init+0xf4>)
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	4a2e      	ldr	r2, [pc, #184]	; (800260c <MX_GPIO_Init+0xf4>)
 8002554:	f043 0308 	orr.w	r3, r3, #8
 8002558:	6193      	str	r3, [r2, #24]
 800255a:	4b2c      	ldr	r3, [pc, #176]	; (800260c <MX_GPIO_Init+0xf4>)
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002566:	4b29      	ldr	r3, [pc, #164]	; (800260c <MX_GPIO_Init+0xf4>)
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	4a28      	ldr	r2, [pc, #160]	; (800260c <MX_GPIO_Init+0xf4>)
 800256c:	f043 0304 	orr.w	r3, r3, #4
 8002570:	6193      	str	r3, [r2, #24]
 8002572:	4b26      	ldr	r3, [pc, #152]	; (800260c <MX_GPIO_Init+0xf4>)
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800257e:	2200      	movs	r2, #0
 8002580:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002584:	4822      	ldr	r0, [pc, #136]	; (8002610 <MX_GPIO_Init+0xf8>)
 8002586:	f7fe f8de 	bl	8000746 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800258a:	2200      	movs	r2, #0
 800258c:	2102      	movs	r1, #2
 800258e:	4821      	ldr	r0, [pc, #132]	; (8002614 <MX_GPIO_Init+0xfc>)
 8002590:	f7fe f8d9 	bl	8000746 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED3_Pin LED2_Pin LED1_Pin */
	GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin;
 8002594:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002598:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259a:	2301      	movs	r3, #1
 800259c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a2:	2302      	movs	r3, #2
 80025a4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a6:	f107 0310 	add.w	r3, r7, #16
 80025aa:	4619      	mov	r1, r3
 80025ac:	4818      	ldr	r0, [pc, #96]	; (8002610 <MX_GPIO_Init+0xf8>)
 80025ae:	f7fd ff59 	bl	8000464 <HAL_GPIO_Init>

	/*Configure GPIO pin : Buzzer_Pin */
	GPIO_InitStruct.Pin = Buzzer_Pin;
 80025b2:	2302      	movs	r3, #2
 80025b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b6:	2301      	movs	r3, #1
 80025b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2302      	movs	r3, #2
 80025c0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80025c2:	f107 0310 	add.w	r3, r7, #16
 80025c6:	4619      	mov	r1, r3
 80025c8:	4812      	ldr	r0, [pc, #72]	; (8002614 <MX_GPIO_Init+0xfc>)
 80025ca:	f7fd ff4b 	bl	8000464 <HAL_GPIO_Init>

	/*Configure GPIO pins : Sensor3_Pin Sensor2_Pin Sensor1_Pin */
	GPIO_InitStruct.Pin = Sensor3_Pin|Sensor2_Pin|Sensor1_Pin;
 80025ce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80025d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025dc:	f107 0310 	add.w	r3, r7, #16
 80025e0:	4619      	mov	r1, r3
 80025e2:	480c      	ldr	r0, [pc, #48]	; (8002614 <MX_GPIO_Init+0xfc>)
 80025e4:	f7fd ff3e 	bl	8000464 <HAL_GPIO_Init>

	/*Configure GPIO pins : PBReset_Pin PBOn_Pin */
	GPIO_InitStruct.Pin = PBReset_Pin|PBOn_Pin;
 80025e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025ec:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025f2:	2301      	movs	r3, #1
 80025f4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f6:	f107 0310 	add.w	r3, r7, #16
 80025fa:	4619      	mov	r1, r3
 80025fc:	4805      	ldr	r0, [pc, #20]	; (8002614 <MX_GPIO_Init+0xfc>)
 80025fe:	f7fd ff31 	bl	8000464 <HAL_GPIO_Init>
}
 8002602:	bf00      	nop
 8002604:	3720      	adds	r7, #32
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
 8002610:	40011000 	.word	0x40011000
 8002614:	40010c00 	.word	0x40010c00

08002618 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
void MX_I2C2_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
	hi2c2.Instance = I2C2;
 800261c:	4b10      	ldr	r3, [pc, #64]	; (8002660 <MX_I2C2_Init+0x48>)
 800261e:	4a11      	ldr	r2, [pc, #68]	; (8002664 <MX_I2C2_Init+0x4c>)
 8002620:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8002622:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <MX_I2C2_Init+0x48>)
 8002624:	4a10      	ldr	r2, [pc, #64]	; (8002668 <MX_I2C2_Init+0x50>)
 8002626:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002628:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <MX_I2C2_Init+0x48>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 800262e:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <MX_I2C2_Init+0x48>)
 8002630:	2200      	movs	r2, #0
 8002632:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002634:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <MX_I2C2_Init+0x48>)
 8002636:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800263a:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800263c:	4b08      	ldr	r3, [pc, #32]	; (8002660 <MX_I2C2_Init+0x48>)
 800263e:	2200      	movs	r2, #0
 8002640:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8002642:	4b07      	ldr	r3, [pc, #28]	; (8002660 <MX_I2C2_Init+0x48>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <MX_I2C2_Init+0x48>)
 800264a:	2200      	movs	r2, #0
 800264c:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800264e:	4b04      	ldr	r3, [pc, #16]	; (8002660 <MX_I2C2_Init+0x48>)
 8002650:	2200      	movs	r2, #0
 8002652:	621a      	str	r2, [r3, #32]
	HAL_I2C_Init(&hi2c2);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <MX_I2C2_Init+0x48>)
 8002656:	f7fe f8a7 	bl	80007a8 <HAL_I2C_Init>
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000168 	.word	0x20000168
 8002664:	40005800 	.word	0x40005800
 8002668:	000186a0 	.word	0x000186a0

0800266c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART1_UART_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8002670:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <MX_USART1_UART_Init+0x40>)
 8002672:	4a0f      	ldr	r2, [pc, #60]	; (80026b0 <MX_USART1_UART_Init+0x44>)
 8002674:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002676:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <MX_USART1_UART_Init+0x40>)
 8002678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800267c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <MX_USART1_UART_Init+0x40>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002684:	4b09      	ldr	r3, [pc, #36]	; (80026ac <MX_USART1_UART_Init+0x40>)
 8002686:	2200      	movs	r2, #0
 8002688:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800268a:	4b08      	ldr	r3, [pc, #32]	; (80026ac <MX_USART1_UART_Init+0x40>)
 800268c:	2200      	movs	r2, #0
 800268e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <MX_USART1_UART_Init+0x40>)
 8002692:	220c      	movs	r2, #12
 8002694:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <MX_USART1_UART_Init+0x40>)
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <MX_USART1_UART_Init+0x40>)
 800269e:	2200      	movs	r2, #0
 80026a0:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(&huart1);
 80026a2:	4802      	ldr	r0, [pc, #8]	; (80026ac <MX_USART1_UART_Init+0x40>)
 80026a4:	f7ff fc68 	bl	8001f78 <HAL_UART_Init>
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	200001bc 	.word	0x200001bc
 80026b0:	40013800 	.word	0x40013800

080026b4 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM2_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim2.Instance = TIM2;
 80026ba:	4b16      	ldr	r3, [pc, #88]	; (8002714 <MX_TIM2_Init+0x60>)
 80026bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026c0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 36000-1;
 80026c2:	4b14      	ldr	r3, [pc, #80]	; (8002714 <MX_TIM2_Init+0x60>)
 80026c4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80026c8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <MX_TIM2_Init+0x60>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 20-1;
 80026d0:	4b10      	ldr	r3, [pc, #64]	; (8002714 <MX_TIM2_Init+0x60>)
 80026d2:	2213      	movs	r2, #19
 80026d4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d6:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <MX_TIM2_Init+0x60>)
 80026d8:	2200      	movs	r2, #0
 80026da:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026dc:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <MX_TIM2_Init+0x60>)
 80026de:	2200      	movs	r2, #0
 80026e0:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim2);
 80026e2:	480c      	ldr	r0, [pc, #48]	; (8002714 <MX_TIM2_Init+0x60>)
 80026e4:	f7ff f89e 	bl	8001824 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ec:	60bb      	str	r3, [r7, #8]
	HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 80026ee:	f107 0308 	add.w	r3, r7, #8
 80026f2:	4619      	mov	r1, r3
 80026f4:	4807      	ldr	r0, [pc, #28]	; (8002714 <MX_TIM2_Init+0x60>)
 80026f6:	f7ff fa15 	bl	8001b24 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026fe:	2300      	movs	r3, #0
 8002700:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 8002702:	463b      	mov	r3, r7
 8002704:	4619      	mov	r1, r3
 8002706:	4803      	ldr	r0, [pc, #12]	; (8002714 <MX_TIM2_Init+0x60>)
 8002708:	f7ff fbe0 	bl	8001ecc <HAL_TIMEx_MasterConfigSynchronization>
}
 800270c:	bf00      	nop
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	200001fc 	.word	0x200001fc

08002718 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM4_Init(uint32_t Periode)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim4.Instance = TIM4;
 8002720:	4b16      	ldr	r3, [pc, #88]	; (800277c <MX_TIM4_Init+0x64>)
 8002722:	4a17      	ldr	r2, [pc, #92]	; (8002780 <MX_TIM4_Init+0x68>)
 8002724:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 36000-1;
 8002726:	4b15      	ldr	r3, [pc, #84]	; (800277c <MX_TIM4_Init+0x64>)
 8002728:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800272c:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <MX_TIM4_Init+0x64>)
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = (Periode)-1;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	4a10      	ldr	r2, [pc, #64]	; (800277c <MX_TIM4_Init+0x64>)
 800273a:	60d3      	str	r3, [r2, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800273c:	4b0f      	ldr	r3, [pc, #60]	; (800277c <MX_TIM4_Init+0x64>)
 800273e:	2200      	movs	r2, #0
 8002740:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002742:	4b0e      	ldr	r3, [pc, #56]	; (800277c <MX_TIM4_Init+0x64>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 8002748:	480c      	ldr	r0, [pc, #48]	; (800277c <MX_TIM4_Init+0x64>)
 800274a:	f7ff f86b 	bl	8001824 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800274e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002752:	613b      	str	r3, [r7, #16]
	HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8002754:	f107 0310 	add.w	r3, r7, #16
 8002758:	4619      	mov	r1, r3
 800275a:	4808      	ldr	r0, [pc, #32]	; (800277c <MX_TIM4_Init+0x64>)
 800275c:	f7ff f9e2 	bl	8001b24 <HAL_TIM_ConfigClockSource>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002760:	2300      	movs	r3, #0
 8002762:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
	HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8002768:	f107 0308 	add.w	r3, r7, #8
 800276c:	4619      	mov	r1, r3
 800276e:	4803      	ldr	r0, [pc, #12]	; (800277c <MX_TIM4_Init+0x64>)
 8002770:	f7ff fbac 	bl	8001ecc <HAL_TIMEx_MasterConfigSynchronization>
}
 8002774:	bf00      	nop
 8002776:	3720      	adds	r7, #32
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20000128 	.word	0x20000128
 8002780:	40000800 	.word	0x40000800

08002784 <System_Init>:

void System_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
	HAL_Init();
 8002788:	f7fd fce0 	bl	800014c <HAL_Init>
	SystemClock_Config();
 800278c:	f7ff fe82 	bl	8002494 <SystemClock_Config>

	MX_GPIO_Init();
 8002790:	f7ff fec2 	bl	8002518 <MX_GPIO_Init>
	MX_TIM2_Init();
 8002794:	f7ff ff8e 	bl	80026b4 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8002798:	f7ff ff68 	bl	800266c <MX_USART1_UART_Init>
	MX_I2C2_Init();
 800279c:	f7ff ff3c 	bl	8002618 <MX_I2C2_Init>
}
 80027a0:	bf00      	nop
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <main>:
#include <Library-I2C-LCD.h>
#include <sensor.h>
#include <stm32f1xx_hal.h>

int main(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Initialize all configured peripherals */

  System_Init();
 80027a8:	f7ff ffec 	bl	8002784 <System_Init>
  MX_TIM4_Init(2);
 80027ac:	2002      	movs	r0, #2
 80027ae:	f7ff ffb3 	bl	8002718 <MX_TIM4_Init>

  HAL_TIM_Base_Start_IT(&htim4);
 80027b2:	4804      	ldr	r0, [pc, #16]	; (80027c4 <main+0x20>)
 80027b4:	f7ff f861 	bl	800187a <HAL_TIM_Base_Start_IT>
  lcd_init();
 80027b8:	f7ff fe48 	bl	800244c <lcd_init>
  LCDAwal();
 80027bc:	f000 fd70 	bl	80032a0 <LCDAwal>

  while (1)
 80027c0:	e7fe      	b.n	80027c0 <main+0x1c>
 80027c2:	bf00      	nop
 80027c4:	20000128 	.word	0x20000128

080027c8 <PBOn>:
uint32_t Timeout_value4 = 400;
uint32_t Timeout_loop5 	= 0;
uint32_t Timeout_value5 = 400;

void PBOn(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(PBOn_GPIO_Port,PBOn_Pin)== GPIO_PIN_RESET && (Timeout_loop++<=Timeout_value)){
 80027cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027d0:	4842      	ldr	r0, [pc, #264]	; (80028dc <PBOn+0x114>)
 80027d2:	f7fd ffa1 	bl	8000718 <HAL_GPIO_ReadPin>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10f      	bne.n	80027fc <PBOn+0x34>
 80027dc:	4b40      	ldr	r3, [pc, #256]	; (80028e0 <PBOn+0x118>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	493f      	ldr	r1, [pc, #252]	; (80028e0 <PBOn+0x118>)
 80027e4:	600a      	str	r2, [r1, #0]
 80027e6:	4a3f      	ldr	r2, [pc, #252]	; (80028e4 <PBOn+0x11c>)
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d806      	bhi.n	80027fc <PBOn+0x34>
		bouncing=(bouncing<<1);
 80027ee:	4b3e      	ldr	r3, [pc, #248]	; (80028e8 <PBOn+0x120>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4b3c      	ldr	r3, [pc, #240]	; (80028e8 <PBOn+0x120>)
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	e058      	b.n	80028ae <PBOn+0xe6>
	}

	else if(HAL_GPIO_ReadPin(PBOn_GPIO_Port,PBOn_Pin)== GPIO_PIN_RESET && (Timeout_loop++>Timeout_value)){
 80027fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002800:	4836      	ldr	r0, [pc, #216]	; (80028dc <PBOn+0x114>)
 8002802:	f7fd ff89 	bl	8000718 <HAL_GPIO_ReadPin>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d131      	bne.n	8002870 <PBOn+0xa8>
 800280c:	4b34      	ldr	r3, [pc, #208]	; (80028e0 <PBOn+0x118>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	4933      	ldr	r1, [pc, #204]	; (80028e0 <PBOn+0x118>)
 8002814:	600a      	str	r2, [r1, #0]
 8002816:	4a33      	ldr	r2, [pc, #204]	; (80028e4 <PBOn+0x11c>)
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	4293      	cmp	r3, r2
 800281c:	d928      	bls.n	8002870 <PBOn+0xa8>
		if(Timeout_loop>=Timeout_value+50){
 800281e:	4b31      	ldr	r3, [pc, #196]	; (80028e4 <PBOn+0x11c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002826:	4b2e      	ldr	r3, [pc, #184]	; (80028e0 <PBOn+0x118>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d83f      	bhi.n	80028ae <PBOn+0xe6>
			Timeout_loop=Timeout_value+1;
 800282e:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <PBOn+0x11c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	3301      	adds	r3, #1
 8002834:	4a2a      	ldr	r2, [pc, #168]	; (80028e0 <PBOn+0x118>)
 8002836:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8002838:	2201      	movs	r2, #1
 800283a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800283e:	482b      	ldr	r0, [pc, #172]	; (80028ec <PBOn+0x124>)
 8002840:	f7fd ff81 	bl	8000746 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8002844:	2201      	movs	r2, #1
 8002846:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800284a:	4828      	ldr	r0, [pc, #160]	; (80028ec <PBOn+0x124>)
 800284c:	f7fd ff7b 	bl	8000746 <HAL_GPIO_WritePin>

			HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 8002850:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002854:	4825      	ldr	r0, [pc, #148]	; (80028ec <PBOn+0x124>)
 8002856:	f7fd ff8e 	bl	8000776 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Buzzer_GPIO_Port,Buzzer_Pin);
 800285a:	2102      	movs	r1, #2
 800285c:	481f      	ldr	r0, [pc, #124]	; (80028dc <PBOn+0x114>)
 800285e:	f7fd ff8a 	bl	8000776 <HAL_GPIO_TogglePin>

			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rPBOn Error: 0x01",18,10);
 8002862:	230a      	movs	r3, #10
 8002864:	2212      	movs	r2, #18
 8002866:	4922      	ldr	r1, [pc, #136]	; (80028f0 <PBOn+0x128>)
 8002868:	4822      	ldr	r0, [pc, #136]	; (80028f4 <PBOn+0x12c>)
 800286a:	f7ff fbd2 	bl	8002012 <HAL_UART_Transmit>
		if(Timeout_loop>=Timeout_value+50){
 800286e:	e01e      	b.n	80028ae <PBOn+0xe6>
		}
	}

	else if(HAL_GPIO_ReadPin(PBOn_GPIO_Port,PBOn_Pin)== GPIO_PIN_SET && Timeout_loop<=Timeout_value){
 8002870:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002874:	4819      	ldr	r0, [pc, #100]	; (80028dc <PBOn+0x114>)
 8002876:	f7fd ff4f 	bl	8000718 <HAL_GPIO_ReadPin>
 800287a:	4603      	mov	r3, r0
 800287c:	2b01      	cmp	r3, #1
 800287e:	d110      	bne.n	80028a2 <PBOn+0xda>
 8002880:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <PBOn+0x118>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <PBOn+0x11c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d80a      	bhi.n	80028a2 <PBOn+0xda>
		bouncing = (bouncing<<1)|1;
 800288c:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <PBOn+0x120>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	b25b      	sxtb	r3, r3
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	b25b      	sxtb	r3, r3
 800289a:	b2da      	uxtb	r2, r3
 800289c:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <PBOn+0x120>)
 800289e:	701a      	strb	r2, [r3, #0]
 80028a0:	e005      	b.n	80028ae <PBOn+0xe6>
	}
	else{
		Timeout_loop=0;
 80028a2:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <PBOn+0x118>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
		bouncing=0xFF;
 80028a8:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <PBOn+0x120>)
 80028aa:	22ff      	movs	r2, #255	; 0xff
 80028ac:	701a      	strb	r2, [r3, #0]
	}

	if (bouncing==0x01){
 80028ae:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <PBOn+0x120>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d110      	bne.n	80028d8 <PBOn+0x110>
		if(runstop==0){
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <PBOn+0x130>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <PBOn+0x104>
			HAL_TIM_Base_Start_IT(&htim2);
 80028be:	480f      	ldr	r0, [pc, #60]	; (80028fc <PBOn+0x134>)
 80028c0:	f7fe ffdb 	bl	800187a <HAL_TIM_Base_Start_IT>
			runstop=1;
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <PBOn+0x130>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
		else{
			HAL_TIM_Base_Stop_IT(&htim2);
			runstop=0;
		}
	}
}
 80028ca:	e005      	b.n	80028d8 <PBOn+0x110>
			HAL_TIM_Base_Stop_IT(&htim2);
 80028cc:	480b      	ldr	r0, [pc, #44]	; (80028fc <PBOn+0x134>)
 80028ce:	f7fe fff7 	bl	80018c0 <HAL_TIM_Base_Stop_IT>
			runstop=0;
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <PBOn+0x130>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40010c00 	.word	0x40010c00
 80028e0:	20000104 	.word	0x20000104
 80028e4:	20000014 	.word	0x20000014
 80028e8:	2000000c 	.word	0x2000000c
 80028ec:	40011000 	.word	0x40011000
 80028f0:	08004514 	.word	0x08004514
 80028f4:	200001bc 	.word	0x200001bc
 80028f8:	200000b8 	.word	0x200000b8
 80028fc:	200001fc 	.word	0x200001fc

08002900 <PBReset>:

void PBReset(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(PBReset_GPIO_Port,PBReset_Pin)== GPIO_PIN_RESET && (Timeout_loop2++<=Timeout_value2)){
 8002904:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002908:	4854      	ldr	r0, [pc, #336]	; (8002a5c <PBReset+0x15c>)
 800290a:	f7fd ff05 	bl	8000718 <HAL_GPIO_ReadPin>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10f      	bne.n	8002934 <PBReset+0x34>
 8002914:	4b52      	ldr	r3, [pc, #328]	; (8002a60 <PBReset+0x160>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	4951      	ldr	r1, [pc, #324]	; (8002a60 <PBReset+0x160>)
 800291c:	600a      	str	r2, [r1, #0]
 800291e:	4a51      	ldr	r2, [pc, #324]	; (8002a64 <PBReset+0x164>)
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	4293      	cmp	r3, r2
 8002924:	d806      	bhi.n	8002934 <PBReset+0x34>
		bouncing2=(bouncing2<<1);
 8002926:	4b50      	ldr	r3, [pc, #320]	; (8002a68 <PBReset+0x168>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4b4e      	ldr	r3, [pc, #312]	; (8002a68 <PBReset+0x168>)
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	e058      	b.n	80029e6 <PBReset+0xe6>

	}

	else if(HAL_GPIO_ReadPin(PBReset_GPIO_Port,PBReset_Pin)== GPIO_PIN_RESET && (Timeout_loop2++>Timeout_value2)){
 8002934:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002938:	4848      	ldr	r0, [pc, #288]	; (8002a5c <PBReset+0x15c>)
 800293a:	f7fd feed 	bl	8000718 <HAL_GPIO_ReadPin>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d131      	bne.n	80029a8 <PBReset+0xa8>
 8002944:	4b46      	ldr	r3, [pc, #280]	; (8002a60 <PBReset+0x160>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	4945      	ldr	r1, [pc, #276]	; (8002a60 <PBReset+0x160>)
 800294c:	600a      	str	r2, [r1, #0]
 800294e:	4a45      	ldr	r2, [pc, #276]	; (8002a64 <PBReset+0x164>)
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	4293      	cmp	r3, r2
 8002954:	d928      	bls.n	80029a8 <PBReset+0xa8>
		if(Timeout_loop2>=Timeout_value2+50){
 8002956:	4b43      	ldr	r3, [pc, #268]	; (8002a64 <PBReset+0x164>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800295e:	4b40      	ldr	r3, [pc, #256]	; (8002a60 <PBReset+0x160>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d83f      	bhi.n	80029e6 <PBReset+0xe6>
			Timeout_loop2=Timeout_value2+1;
 8002966:	4b3f      	ldr	r3, [pc, #252]	; (8002a64 <PBReset+0x164>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	3301      	adds	r3, #1
 800296c:	4a3c      	ldr	r2, [pc, #240]	; (8002a60 <PBReset+0x160>)
 800296e:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8002970:	2201      	movs	r2, #1
 8002972:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002976:	483d      	ldr	r0, [pc, #244]	; (8002a6c <PBReset+0x16c>)
 8002978:	f7fd fee5 	bl	8000746 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 800297c:	2201      	movs	r2, #1
 800297e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002982:	483a      	ldr	r0, [pc, #232]	; (8002a6c <PBReset+0x16c>)
 8002984:	f7fd fedf 	bl	8000746 <HAL_GPIO_WritePin>

			HAL_GPIO_TogglePin(Buzzer_GPIO_Port,Buzzer_Pin);
 8002988:	2102      	movs	r1, #2
 800298a:	4834      	ldr	r0, [pc, #208]	; (8002a5c <PBReset+0x15c>)
 800298c:	f7fd fef3 	bl	8000776 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8002990:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002994:	4835      	ldr	r0, [pc, #212]	; (8002a6c <PBReset+0x16c>)
 8002996:	f7fd feee 	bl	8000776 <HAL_GPIO_TogglePin>

			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rPBReset Error: 0x02",21,10);
 800299a:	230a      	movs	r3, #10
 800299c:	2215      	movs	r2, #21
 800299e:	4934      	ldr	r1, [pc, #208]	; (8002a70 <PBReset+0x170>)
 80029a0:	4834      	ldr	r0, [pc, #208]	; (8002a74 <PBReset+0x174>)
 80029a2:	f7ff fb36 	bl	8002012 <HAL_UART_Transmit>
		if(Timeout_loop2>=Timeout_value2+50){
 80029a6:	e01e      	b.n	80029e6 <PBReset+0xe6>
		}
	}

	else if(HAL_GPIO_ReadPin(PBReset_GPIO_Port,PBReset_Pin)== GPIO_PIN_SET && Timeout_loop2<=Timeout_value2){
 80029a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029ac:	482b      	ldr	r0, [pc, #172]	; (8002a5c <PBReset+0x15c>)
 80029ae:	f7fd feb3 	bl	8000718 <HAL_GPIO_ReadPin>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d110      	bne.n	80029da <PBReset+0xda>
 80029b8:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <PBReset+0x160>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <PBReset+0x164>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d80a      	bhi.n	80029da <PBReset+0xda>
		bouncing2 = (bouncing2<<1)|1;
 80029c4:	4b28      	ldr	r3, [pc, #160]	; (8002a68 <PBReset+0x168>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	b25b      	sxtb	r3, r3
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	b25b      	sxtb	r3, r3
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	4b24      	ldr	r3, [pc, #144]	; (8002a68 <PBReset+0x168>)
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	e005      	b.n	80029e6 <PBReset+0xe6>
	}

	else{
		Timeout_loop2=0;
 80029da:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <PBReset+0x160>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
		bouncing2=0xFF;
 80029e0:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <PBReset+0x168>)
 80029e2:	22ff      	movs	r2, #255	; 0xff
 80029e4:	701a      	strb	r2, [r3, #0]
	}

	if (bouncing2==0x01){
 80029e6:	4b20      	ldr	r3, [pc, #128]	; (8002a68 <PBReset+0x168>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d134      	bne.n	8002a58 <PBReset+0x158>

		HAL_TIM_Base_Stop_IT(&htim2);
 80029ee:	4822      	ldr	r0, [pc, #136]	; (8002a78 <PBReset+0x178>)
 80029f0:	f7fe ff66 	bl	80018c0 <HAL_TIM_Base_Stop_IT>

		milisec=0;	sec=0;	min=0;	runstop=0;
 80029f4:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <PBReset+0x17c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <PBReset+0x180>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <PBReset+0x184>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	4b20      	ldr	r3, [pc, #128]	; (8002a88 <PBReset+0x188>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
		milisecA=0;	secA=0;	minA=0;
 8002a0c:	4b1f      	ldr	r3, [pc, #124]	; (8002a8c <PBReset+0x18c>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <PBReset+0x190>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <PBReset+0x194>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
		milisecB=0;	secB=0;	minB=0;
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <PBReset+0x198>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <PBReset+0x19c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <PBReset+0x1a0>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
		milisecC=0;	secC=0;	minC=0;
 8002a30:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <PBReset+0x1a4>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <PBReset+0x1a8>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <PBReset+0x1ac>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
		lapA=0;	lapB=0;	lapC=0;
 8002a42:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <PBReset+0x1b0>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <PBReset+0x1b4>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <PBReset+0x1b8>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]

		LCDAwal();
 8002a54:	f000 fc24 	bl	80032a0 <LCDAwal>
	}
}
 8002a58:	bf00      	nop
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40010c00 	.word	0x40010c00
 8002a60:	20000108 	.word	0x20000108
 8002a64:	20000018 	.word	0x20000018
 8002a68:	2000000d 	.word	0x2000000d
 8002a6c:	40011000 	.word	0x40011000
 8002a70:	08004528 	.word	0x08004528
 8002a74:	200001bc 	.word	0x200001bc
 8002a78:	200001fc 	.word	0x200001fc
 8002a7c:	200000ac 	.word	0x200000ac
 8002a80:	200000b0 	.word	0x200000b0
 8002a84:	200000b4 	.word	0x200000b4
 8002a88:	200000b8 	.word	0x200000b8
 8002a8c:	2000027c 	.word	0x2000027c
 8002a90:	20000240 	.word	0x20000240
 8002a94:	20000284 	.word	0x20000284
 8002a98:	20000258 	.word	0x20000258
 8002a9c:	20000274 	.word	0x20000274
 8002aa0:	20000278 	.word	0x20000278
 8002aa4:	2000023c 	.word	0x2000023c
 8002aa8:	20000280 	.word	0x20000280
 8002aac:	20000244 	.word	0x20000244
 8002ab0:	200000bc 	.word	0x200000bc
 8002ab4:	200000c0 	.word	0x200000c0
 8002ab8:	200000c4 	.word	0x200000c4

08002abc <Sensor1>:

void Sensor1(void)
{
 8002abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002abe:	b089      	sub	sp, #36	; 0x24
 8002ac0:	af06      	add	r7, sp, #24
	if(HAL_GPIO_ReadPin(Sensor1_GPIO_Port,Sensor1_Pin)== GPIO_PIN_RESET && (Timeout_loop3++<=Timeout_value3)){
 8002ac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ac6:	488d      	ldr	r0, [pc, #564]	; (8002cfc <Sensor1+0x240>)
 8002ac8:	f7fd fe26 	bl	8000718 <HAL_GPIO_ReadPin>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10f      	bne.n	8002af2 <Sensor1+0x36>
 8002ad2:	4b8b      	ldr	r3, [pc, #556]	; (8002d00 <Sensor1+0x244>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	4989      	ldr	r1, [pc, #548]	; (8002d00 <Sensor1+0x244>)
 8002ada:	600a      	str	r2, [r1, #0]
 8002adc:	4a89      	ldr	r2, [pc, #548]	; (8002d04 <Sensor1+0x248>)
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d806      	bhi.n	8002af2 <Sensor1+0x36>
		bouncing3=(bouncing3<<1);
 8002ae4:	4b88      	ldr	r3, [pc, #544]	; (8002d08 <Sensor1+0x24c>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	4b86      	ldr	r3, [pc, #536]	; (8002d08 <Sensor1+0x24c>)
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e057      	b.n	8002ba2 <Sensor1+0xe6>
	}

	else if(HAL_GPIO_ReadPin(Sensor1_GPIO_Port,Sensor1_Pin)== GPIO_PIN_RESET && (Timeout_loop3++>Timeout_value3)){
 8002af2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002af6:	4881      	ldr	r0, [pc, #516]	; (8002cfc <Sensor1+0x240>)
 8002af8:	f7fd fe0e 	bl	8000718 <HAL_GPIO_ReadPin>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d130      	bne.n	8002b64 <Sensor1+0xa8>
 8002b02:	4b7f      	ldr	r3, [pc, #508]	; (8002d00 <Sensor1+0x244>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	497d      	ldr	r1, [pc, #500]	; (8002d00 <Sensor1+0x244>)
 8002b0a:	600a      	str	r2, [r1, #0]
 8002b0c:	4a7d      	ldr	r2, [pc, #500]	; (8002d04 <Sensor1+0x248>)
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d927      	bls.n	8002b64 <Sensor1+0xa8>
		if(Timeout_loop3>=Timeout_value3+50){
 8002b14:	4b7b      	ldr	r3, [pc, #492]	; (8002d04 <Sensor1+0x248>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b1c:	4b78      	ldr	r3, [pc, #480]	; (8002d00 <Sensor1+0x244>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d83e      	bhi.n	8002ba2 <Sensor1+0xe6>
			Timeout_loop3=Timeout_value3+1;
 8002b24:	4b77      	ldr	r3, [pc, #476]	; (8002d04 <Sensor1+0x248>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	4a75      	ldr	r2, [pc, #468]	; (8002d00 <Sensor1+0x244>)
 8002b2c:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b34:	4875      	ldr	r0, [pc, #468]	; (8002d0c <Sensor1+0x250>)
 8002b36:	f7fd fe06 	bl	8000746 <HAL_GPIO_WritePin>

			HAL_GPIO_TogglePin(Buzzer_GPIO_Port,Buzzer_Pin);
 8002b3a:	2102      	movs	r1, #2
 8002b3c:	486f      	ldr	r0, [pc, #444]	; (8002cfc <Sensor1+0x240>)
 8002b3e:	f7fd fe1a 	bl	8000776 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 8002b42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b46:	4871      	ldr	r0, [pc, #452]	; (8002d0c <Sensor1+0x250>)
 8002b48:	f7fd fe15 	bl	8000776 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8002b4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b50:	486e      	ldr	r0, [pc, #440]	; (8002d0c <Sensor1+0x250>)
 8002b52:	f7fd fe10 	bl	8000776 <HAL_GPIO_TogglePin>

			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rSensor1 Error: 0x03",21,10);
 8002b56:	230a      	movs	r3, #10
 8002b58:	2215      	movs	r2, #21
 8002b5a:	496d      	ldr	r1, [pc, #436]	; (8002d10 <Sensor1+0x254>)
 8002b5c:	486d      	ldr	r0, [pc, #436]	; (8002d14 <Sensor1+0x258>)
 8002b5e:	f7ff fa58 	bl	8002012 <HAL_UART_Transmit>
		if(Timeout_loop3>=Timeout_value3+50){
 8002b62:	e01e      	b.n	8002ba2 <Sensor1+0xe6>
		}
	}

	else if(HAL_GPIO_ReadPin(Sensor1_GPIO_Port,Sensor1_Pin)== GPIO_PIN_SET && Timeout_loop3<=Timeout_value3){
 8002b64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b68:	4864      	ldr	r0, [pc, #400]	; (8002cfc <Sensor1+0x240>)
 8002b6a:	f7fd fdd5 	bl	8000718 <HAL_GPIO_ReadPin>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d110      	bne.n	8002b96 <Sensor1+0xda>
 8002b74:	4b62      	ldr	r3, [pc, #392]	; (8002d00 <Sensor1+0x244>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4b62      	ldr	r3, [pc, #392]	; (8002d04 <Sensor1+0x248>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d80a      	bhi.n	8002b96 <Sensor1+0xda>
		bouncing3 = (bouncing3<<1)|1;
 8002b80:	4b61      	ldr	r3, [pc, #388]	; (8002d08 <Sensor1+0x24c>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	b25b      	sxtb	r3, r3
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	b25b      	sxtb	r3, r3
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	4b5d      	ldr	r3, [pc, #372]	; (8002d08 <Sensor1+0x24c>)
 8002b92:	701a      	strb	r2, [r3, #0]
 8002b94:	e005      	b.n	8002ba2 <Sensor1+0xe6>
	}

	else{
		Timeout_loop3=0;
 8002b96:	4b5a      	ldr	r3, [pc, #360]	; (8002d00 <Sensor1+0x244>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
		bouncing3=0xFF;
 8002b9c:	4b5a      	ldr	r3, [pc, #360]	; (8002d08 <Sensor1+0x24c>)
 8002b9e:	22ff      	movs	r2, #255	; 0xff
 8002ba0:	701a      	strb	r2, [r3, #0]
	}

	if (bouncing3==0xFE){
 8002ba2:	4b59      	ldr	r3, [pc, #356]	; (8002d08 <Sensor1+0x24c>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2bfe      	cmp	r3, #254	; 0xfe
 8002ba8:	f040 80a4 	bne.w	8002cf4 <Sensor1+0x238>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port,Buzzer_Pin,GPIO_PIN_SET);
 8002bac:	2201      	movs	r2, #1
 8002bae:	2102      	movs	r1, #2
 8002bb0:	4852      	ldr	r0, [pc, #328]	; (8002cfc <Sensor1+0x240>)
 8002bb2:	f7fd fdc8 	bl	8000746 <HAL_GPIO_WritePin>
		milisecA=milisec;
 8002bb6:	4b58      	ldr	r3, [pc, #352]	; (8002d18 <Sensor1+0x25c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a58      	ldr	r2, [pc, #352]	; (8002d1c <Sensor1+0x260>)
 8002bbc:	6013      	str	r3, [r2, #0]
		//milisecA=milisec-milisecAB;
		milisecAB=milisecA-milisecB;
 8002bbe:	4b57      	ldr	r3, [pc, #348]	; (8002d1c <Sensor1+0x260>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4b57      	ldr	r3, [pc, #348]	; (8002d20 <Sensor1+0x264>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	4a56      	ldr	r2, [pc, #344]	; (8002d24 <Sensor1+0x268>)
 8002bca:	6013      	str	r3, [r2, #0]
		milisecAC=milisecA-milisecC;
 8002bcc:	4b53      	ldr	r3, [pc, #332]	; (8002d1c <Sensor1+0x260>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b55      	ldr	r3, [pc, #340]	; (8002d28 <Sensor1+0x26c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	4a55      	ldr	r2, [pc, #340]	; (8002d2c <Sensor1+0x270>)
 8002bd8:	6013      	str	r3, [r2, #0]

		secA=sec;
 8002bda:	4b55      	ldr	r3, [pc, #340]	; (8002d30 <Sensor1+0x274>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a55      	ldr	r2, [pc, #340]	; (8002d34 <Sensor1+0x278>)
 8002be0:	6013      	str	r3, [r2, #0]
		//secA=sec-secAB;
		secAB=secA-secB;
 8002be2:	4b54      	ldr	r3, [pc, #336]	; (8002d34 <Sensor1+0x278>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4b54      	ldr	r3, [pc, #336]	; (8002d38 <Sensor1+0x27c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	4a53      	ldr	r2, [pc, #332]	; (8002d3c <Sensor1+0x280>)
 8002bee:	6013      	str	r3, [r2, #0]
		secAC=secA-secC;
 8002bf0:	4b50      	ldr	r3, [pc, #320]	; (8002d34 <Sensor1+0x278>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4b52      	ldr	r3, [pc, #328]	; (8002d40 <Sensor1+0x284>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	4a52      	ldr	r2, [pc, #328]	; (8002d44 <Sensor1+0x288>)
 8002bfc:	6013      	str	r3, [r2, #0]

		minA=min;
 8002bfe:	4b52      	ldr	r3, [pc, #328]	; (8002d48 <Sensor1+0x28c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a52      	ldr	r2, [pc, #328]	; (8002d4c <Sensor1+0x290>)
 8002c04:	6013      	str	r3, [r2, #0]
		//minA=min-minAB;
		minAB=minA-minB;
 8002c06:	4b51      	ldr	r3, [pc, #324]	; (8002d4c <Sensor1+0x290>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	4b51      	ldr	r3, [pc, #324]	; (8002d50 <Sensor1+0x294>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	4a50      	ldr	r2, [pc, #320]	; (8002d54 <Sensor1+0x298>)
 8002c12:	6013      	str	r3, [r2, #0]
		minAC=minA-minC;
 8002c14:	4b4d      	ldr	r3, [pc, #308]	; (8002d4c <Sensor1+0x290>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b4f      	ldr	r3, [pc, #316]	; (8002d58 <Sensor1+0x29c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	4a4f      	ldr	r2, [pc, #316]	; (8002d5c <Sensor1+0x2a0>)
 8002c20:	6013      	str	r3, [r2, #0]

		if(runstop==1)	lapA++;
 8002c22:	4b4f      	ldr	r3, [pc, #316]	; (8002d60 <Sensor1+0x2a4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d105      	bne.n	8002c36 <Sensor1+0x17a>
 8002c2a:	4b4e      	ldr	r3, [pc, #312]	; (8002d64 <Sensor1+0x2a8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	4a4c      	ldr	r2, [pc, #304]	; (8002d64 <Sensor1+0x2a8>)
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	e002      	b.n	8002c3c <Sensor1+0x180>
		else 			lapA=0;
 8002c36:	4b4b      	ldr	r3, [pc, #300]	; (8002d64 <Sensor1+0x2a8>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

		if(lapA<5){
 8002c3c:	4b49      	ldr	r3, [pc, #292]	; (8002d64 <Sensor1+0x2a8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d84e      	bhi.n	8002ce2 <Sensor1+0x226>
			//sprintf(buffs,"%d = %d:%d:%d",lapA,minA,secA,milisecA);
			sprintf(buffs,"%d = %d%d:%d%d:%d%d",lapA,(minA/10),(minA%10),(secA/10),(secA%10),(milisecA/10),(milisecA%10));
 8002c44:	4b47      	ldr	r3, [pc, #284]	; (8002d64 <Sensor1+0x2a8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	4b40      	ldr	r3, [pc, #256]	; (8002d4c <Sensor1+0x290>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a46      	ldr	r2, [pc, #280]	; (8002d68 <Sensor1+0x2ac>)
 8002c50:	fba2 1303 	umull	r1, r3, r2, r3
 8002c54:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8002c58:	4b3c      	ldr	r3, [pc, #240]	; (8002d4c <Sensor1+0x290>)
 8002c5a:	6819      	ldr	r1, [r3, #0]
 8002c5c:	4b42      	ldr	r3, [pc, #264]	; (8002d68 <Sensor1+0x2ac>)
 8002c5e:	fba3 0301 	umull	r0, r3, r3, r1
 8002c62:	08da      	lsrs	r2, r3, #3
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	1aca      	subs	r2, r1, r3
 8002c6e:	4b31      	ldr	r3, [pc, #196]	; (8002d34 <Sensor1+0x278>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	493d      	ldr	r1, [pc, #244]	; (8002d68 <Sensor1+0x2ac>)
 8002c74:	fba1 1303 	umull	r1, r3, r1, r3
 8002c78:	08dd      	lsrs	r5, r3, #3
 8002c7a:	4b2e      	ldr	r3, [pc, #184]	; (8002d34 <Sensor1+0x278>)
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	4b3a      	ldr	r3, [pc, #232]	; (8002d68 <Sensor1+0x2ac>)
 8002c80:	fba3 1300 	umull	r1, r3, r3, r0
 8002c84:	08d9      	lsrs	r1, r3, #3
 8002c86:	460b      	mov	r3, r1
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	1ac1      	subs	r1, r0, r3
 8002c90:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <Sensor1+0x260>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4834      	ldr	r0, [pc, #208]	; (8002d68 <Sensor1+0x2ac>)
 8002c96:	fba0 0303 	umull	r0, r3, r0, r3
 8002c9a:	08de      	lsrs	r6, r3, #3
 8002c9c:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <Sensor1+0x260>)
 8002c9e:	681c      	ldr	r4, [r3, #0]
 8002ca0:	4b31      	ldr	r3, [pc, #196]	; (8002d68 <Sensor1+0x2ac>)
 8002ca2:	fba3 0304 	umull	r0, r3, r3, r4
 8002ca6:	08d8      	lsrs	r0, r3, #3
 8002ca8:	4603      	mov	r3, r0
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4403      	add	r3, r0
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	1ae0      	subs	r0, r4, r3
 8002cb2:	9004      	str	r0, [sp, #16]
 8002cb4:	9603      	str	r6, [sp, #12]
 8002cb6:	9102      	str	r1, [sp, #8]
 8002cb8:	9501      	str	r5, [sp, #4]
 8002cba:	9200      	str	r2, [sp, #0]
 8002cbc:	4663      	mov	r3, ip
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	492a      	ldr	r1, [pc, #168]	; (8002d6c <Sensor1+0x2b0>)
 8002cc2:	482b      	ldr	r0, [pc, #172]	; (8002d70 <Sensor1+0x2b4>)
 8002cc4:	f000 fffe 	bl	8003cc4 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rTrack A Lap:",14,10);
 8002cc8:	230a      	movs	r3, #10
 8002cca:	220e      	movs	r2, #14
 8002ccc:	4929      	ldr	r1, [pc, #164]	; (8002d74 <Sensor1+0x2b8>)
 8002cce:	4811      	ldr	r0, [pc, #68]	; (8002d14 <Sensor1+0x258>)
 8002cd0:	f7ff f99f 	bl	8002012 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)buffs,sizeof(buffs),10);
 8002cd4:	230a      	movs	r3, #10
 8002cd6:	220d      	movs	r2, #13
 8002cd8:	4925      	ldr	r1, [pc, #148]	; (8002d70 <Sensor1+0x2b4>)
 8002cda:	480e      	ldr	r0, [pc, #56]	; (8002d14 <Sensor1+0x258>)
 8002cdc:	f7ff f999 	bl	8002012 <HAL_UART_Transmit>
		else{
			lapA=5;
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rTrack A = FINISH",18,10);
		}
	}
}
 8002ce0:	e008      	b.n	8002cf4 <Sensor1+0x238>
			lapA=5;
 8002ce2:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <Sensor1+0x2a8>)
 8002ce4:	2205      	movs	r2, #5
 8002ce6:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rTrack A = FINISH",18,10);
 8002ce8:	230a      	movs	r3, #10
 8002cea:	2212      	movs	r2, #18
 8002cec:	4922      	ldr	r1, [pc, #136]	; (8002d78 <Sensor1+0x2bc>)
 8002cee:	4809      	ldr	r0, [pc, #36]	; (8002d14 <Sensor1+0x258>)
 8002cf0:	f7ff f98f 	bl	8002012 <HAL_UART_Transmit>
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cfc:	40010c00 	.word	0x40010c00
 8002d00:	2000010c 	.word	0x2000010c
 8002d04:	2000001c 	.word	0x2000001c
 8002d08:	2000000e 	.word	0x2000000e
 8002d0c:	40011000 	.word	0x40011000
 8002d10:	08004540 	.word	0x08004540
 8002d14:	200001bc 	.word	0x200001bc
 8002d18:	200000ac 	.word	0x200000ac
 8002d1c:	2000027c 	.word	0x2000027c
 8002d20:	20000258 	.word	0x20000258
 8002d24:	200000c8 	.word	0x200000c8
 8002d28:	2000023c 	.word	0x2000023c
 8002d2c:	200000d4 	.word	0x200000d4
 8002d30:	200000b0 	.word	0x200000b0
 8002d34:	20000240 	.word	0x20000240
 8002d38:	20000274 	.word	0x20000274
 8002d3c:	200000cc 	.word	0x200000cc
 8002d40:	20000280 	.word	0x20000280
 8002d44:	200000d8 	.word	0x200000d8
 8002d48:	200000b4 	.word	0x200000b4
 8002d4c:	20000284 	.word	0x20000284
 8002d50:	20000278 	.word	0x20000278
 8002d54:	200000d0 	.word	0x200000d0
 8002d58:	20000244 	.word	0x20000244
 8002d5c:	200000dc 	.word	0x200000dc
 8002d60:	200000b8 	.word	0x200000b8
 8002d64:	200000bc 	.word	0x200000bc
 8002d68:	cccccccd 	.word	0xcccccccd
 8002d6c:	08004558 	.word	0x08004558
 8002d70:	20000248 	.word	0x20000248
 8002d74:	0800456c 	.word	0x0800456c
 8002d78:	0800457c 	.word	0x0800457c

08002d7c <Sensor2>:

void Sensor2(void)
{
 8002d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d7e:	b089      	sub	sp, #36	; 0x24
 8002d80:	af06      	add	r7, sp, #24
	if(HAL_GPIO_ReadPin(Sensor2_GPIO_Port,Sensor2_Pin)== GPIO_PIN_RESET && (Timeout_loop4++<=Timeout_value4)){
 8002d82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d86:	488e      	ldr	r0, [pc, #568]	; (8002fc0 <Sensor2+0x244>)
 8002d88:	f7fd fcc6 	bl	8000718 <HAL_GPIO_ReadPin>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10f      	bne.n	8002db2 <Sensor2+0x36>
 8002d92:	4b8c      	ldr	r3, [pc, #560]	; (8002fc4 <Sensor2+0x248>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	498a      	ldr	r1, [pc, #552]	; (8002fc4 <Sensor2+0x248>)
 8002d9a:	600a      	str	r2, [r1, #0]
 8002d9c:	4a8a      	ldr	r2, [pc, #552]	; (8002fc8 <Sensor2+0x24c>)
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d806      	bhi.n	8002db2 <Sensor2+0x36>
		bouncing4=(bouncing4<<1);
 8002da4:	4b89      	ldr	r3, [pc, #548]	; (8002fcc <Sensor2+0x250>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	4b87      	ldr	r3, [pc, #540]	; (8002fcc <Sensor2+0x250>)
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	e058      	b.n	8002e64 <Sensor2+0xe8>
	}

	else if(HAL_GPIO_ReadPin(Sensor2_GPIO_Port,Sensor2_Pin)== GPIO_PIN_RESET && (Timeout_loop4++>Timeout_value4)){
 8002db2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002db6:	4882      	ldr	r0, [pc, #520]	; (8002fc0 <Sensor2+0x244>)
 8002db8:	f7fd fcae 	bl	8000718 <HAL_GPIO_ReadPin>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d131      	bne.n	8002e26 <Sensor2+0xaa>
 8002dc2:	4b80      	ldr	r3, [pc, #512]	; (8002fc4 <Sensor2+0x248>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	497e      	ldr	r1, [pc, #504]	; (8002fc4 <Sensor2+0x248>)
 8002dca:	600a      	str	r2, [r1, #0]
 8002dcc:	4a7e      	ldr	r2, [pc, #504]	; (8002fc8 <Sensor2+0x24c>)
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d928      	bls.n	8002e26 <Sensor2+0xaa>
		if(Timeout_loop4>=Timeout_value4+50){
 8002dd4:	4b7c      	ldr	r3, [pc, #496]	; (8002fc8 <Sensor2+0x24c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ddc:	4b79      	ldr	r3, [pc, #484]	; (8002fc4 <Sensor2+0x248>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d83f      	bhi.n	8002e64 <Sensor2+0xe8>
			Timeout_loop4=Timeout_value4+1;
 8002de4:	4b78      	ldr	r3, [pc, #480]	; (8002fc8 <Sensor2+0x24c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	3301      	adds	r3, #1
 8002dea:	4a76      	ldr	r2, [pc, #472]	; (8002fc4 <Sensor2+0x248>)
 8002dec:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8002dee:	2201      	movs	r2, #1
 8002df0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002df4:	4876      	ldr	r0, [pc, #472]	; (8002fd0 <Sensor2+0x254>)
 8002df6:	f7fd fca6 	bl	8000746 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e00:	4873      	ldr	r0, [pc, #460]	; (8002fd0 <Sensor2+0x254>)
 8002e02:	f7fd fca0 	bl	8000746 <HAL_GPIO_WritePin>

			HAL_GPIO_TogglePin(Buzzer_GPIO_Port,Buzzer_Pin);
 8002e06:	2102      	movs	r1, #2
 8002e08:	486d      	ldr	r0, [pc, #436]	; (8002fc0 <Sensor2+0x244>)
 8002e0a:	f7fd fcb4 	bl	8000776 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8002e0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e12:	486f      	ldr	r0, [pc, #444]	; (8002fd0 <Sensor2+0x254>)
 8002e14:	f7fd fcaf 	bl	8000776 <HAL_GPIO_TogglePin>

			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rSensor2 Error: 0x04",21,10);
 8002e18:	230a      	movs	r3, #10
 8002e1a:	2215      	movs	r2, #21
 8002e1c:	496d      	ldr	r1, [pc, #436]	; (8002fd4 <Sensor2+0x258>)
 8002e1e:	486e      	ldr	r0, [pc, #440]	; (8002fd8 <Sensor2+0x25c>)
 8002e20:	f7ff f8f7 	bl	8002012 <HAL_UART_Transmit>
		if(Timeout_loop4>=Timeout_value4+50){
 8002e24:	e01e      	b.n	8002e64 <Sensor2+0xe8>
		}
	}

	else if(HAL_GPIO_ReadPin(Sensor2_GPIO_Port,Sensor2_Pin)== GPIO_PIN_SET && Timeout_loop4<=Timeout_value4){
 8002e26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e2a:	4865      	ldr	r0, [pc, #404]	; (8002fc0 <Sensor2+0x244>)
 8002e2c:	f7fd fc74 	bl	8000718 <HAL_GPIO_ReadPin>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d110      	bne.n	8002e58 <Sensor2+0xdc>
 8002e36:	4b63      	ldr	r3, [pc, #396]	; (8002fc4 <Sensor2+0x248>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	4b63      	ldr	r3, [pc, #396]	; (8002fc8 <Sensor2+0x24c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d80a      	bhi.n	8002e58 <Sensor2+0xdc>
		bouncing4 = (bouncing4<<1)|1;
 8002e42:	4b62      	ldr	r3, [pc, #392]	; (8002fcc <Sensor2+0x250>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	b25b      	sxtb	r3, r3
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	b25b      	sxtb	r3, r3
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4b5e      	ldr	r3, [pc, #376]	; (8002fcc <Sensor2+0x250>)
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	e005      	b.n	8002e64 <Sensor2+0xe8>
	}

	else{
		Timeout_loop4=0;
 8002e58:	4b5a      	ldr	r3, [pc, #360]	; (8002fc4 <Sensor2+0x248>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
		bouncing4=0xFF;
 8002e5e:	4b5b      	ldr	r3, [pc, #364]	; (8002fcc <Sensor2+0x250>)
 8002e60:	22ff      	movs	r2, #255	; 0xff
 8002e62:	701a      	strb	r2, [r3, #0]
	}

	if (bouncing4==0xFE){
 8002e64:	4b59      	ldr	r3, [pc, #356]	; (8002fcc <Sensor2+0x250>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2bfe      	cmp	r3, #254	; 0xfe
 8002e6a:	f040 80a4 	bne.w	8002fb6 <Sensor2+0x23a>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port,Buzzer_Pin,GPIO_PIN_SET);
 8002e6e:	2201      	movs	r2, #1
 8002e70:	2102      	movs	r1, #2
 8002e72:	4853      	ldr	r0, [pc, #332]	; (8002fc0 <Sensor2+0x244>)
 8002e74:	f7fd fc67 	bl	8000746 <HAL_GPIO_WritePin>
		milisecB=milisec;
 8002e78:	4b58      	ldr	r3, [pc, #352]	; (8002fdc <Sensor2+0x260>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a58      	ldr	r2, [pc, #352]	; (8002fe0 <Sensor2+0x264>)
 8002e7e:	6013      	str	r3, [r2, #0]
		//milisecB=milisec-milisecBA;
		milisecBA=milisecB-milisecA;
 8002e80:	4b57      	ldr	r3, [pc, #348]	; (8002fe0 <Sensor2+0x264>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4b57      	ldr	r3, [pc, #348]	; (8002fe4 <Sensor2+0x268>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	4a57      	ldr	r2, [pc, #348]	; (8002fe8 <Sensor2+0x26c>)
 8002e8c:	6013      	str	r3, [r2, #0]
		milisecBC=milisecB-milisecC;
 8002e8e:	4b54      	ldr	r3, [pc, #336]	; (8002fe0 <Sensor2+0x264>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	4b56      	ldr	r3, [pc, #344]	; (8002fec <Sensor2+0x270>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	4a55      	ldr	r2, [pc, #340]	; (8002ff0 <Sensor2+0x274>)
 8002e9a:	6013      	str	r3, [r2, #0]

		secB=sec;
 8002e9c:	4b55      	ldr	r3, [pc, #340]	; (8002ff4 <Sensor2+0x278>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a55      	ldr	r2, [pc, #340]	; (8002ff8 <Sensor2+0x27c>)
 8002ea2:	6013      	str	r3, [r2, #0]
		//secB=sec-secBA;
		secBA=secB-secA;
 8002ea4:	4b54      	ldr	r3, [pc, #336]	; (8002ff8 <Sensor2+0x27c>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4b54      	ldr	r3, [pc, #336]	; (8002ffc <Sensor2+0x280>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	4a54      	ldr	r2, [pc, #336]	; (8003000 <Sensor2+0x284>)
 8002eb0:	6013      	str	r3, [r2, #0]
		secBC=secB-secC;
 8002eb2:	4b51      	ldr	r3, [pc, #324]	; (8002ff8 <Sensor2+0x27c>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4b53      	ldr	r3, [pc, #332]	; (8003004 <Sensor2+0x288>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	4a52      	ldr	r2, [pc, #328]	; (8003008 <Sensor2+0x28c>)
 8002ebe:	6013      	str	r3, [r2, #0]

		minB=min;
 8002ec0:	4b52      	ldr	r3, [pc, #328]	; (800300c <Sensor2+0x290>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a52      	ldr	r2, [pc, #328]	; (8003010 <Sensor2+0x294>)
 8002ec6:	6013      	str	r3, [r2, #0]
		//minB=min-minBA;
		minBA=minB-minA;
 8002ec8:	4b51      	ldr	r3, [pc, #324]	; (8003010 <Sensor2+0x294>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b51      	ldr	r3, [pc, #324]	; (8003014 <Sensor2+0x298>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	4a51      	ldr	r2, [pc, #324]	; (8003018 <Sensor2+0x29c>)
 8002ed4:	6013      	str	r3, [r2, #0]
		minBC=minB-minC;
 8002ed6:	4b4e      	ldr	r3, [pc, #312]	; (8003010 <Sensor2+0x294>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4b50      	ldr	r3, [pc, #320]	; (800301c <Sensor2+0x2a0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	4a4f      	ldr	r2, [pc, #316]	; (8003020 <Sensor2+0x2a4>)
 8002ee2:	6013      	str	r3, [r2, #0]

		if(runstop==1)	lapB++;
 8002ee4:	4b4f      	ldr	r3, [pc, #316]	; (8003024 <Sensor2+0x2a8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d105      	bne.n	8002ef8 <Sensor2+0x17c>
 8002eec:	4b4e      	ldr	r3, [pc, #312]	; (8003028 <Sensor2+0x2ac>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	4a4d      	ldr	r2, [pc, #308]	; (8003028 <Sensor2+0x2ac>)
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e002      	b.n	8002efe <Sensor2+0x182>
		else 			lapB=0;
 8002ef8:	4b4b      	ldr	r3, [pc, #300]	; (8003028 <Sensor2+0x2ac>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]

		if(lapB<5){
 8002efe:	4b4a      	ldr	r3, [pc, #296]	; (8003028 <Sensor2+0x2ac>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d84e      	bhi.n	8002fa4 <Sensor2+0x228>
			sprintf(buffs,"%d = %d%d:%d%d:%d%d",lapB,(minB/10),(minB%10),(secB/10),(secB%10),(milisecB/10),(milisecB%10));
 8002f06:	4b48      	ldr	r3, [pc, #288]	; (8003028 <Sensor2+0x2ac>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	4b40      	ldr	r3, [pc, #256]	; (8003010 <Sensor2+0x294>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a46      	ldr	r2, [pc, #280]	; (800302c <Sensor2+0x2b0>)
 8002f12:	fba2 1303 	umull	r1, r3, r2, r3
 8002f16:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8002f1a:	4b3d      	ldr	r3, [pc, #244]	; (8003010 <Sensor2+0x294>)
 8002f1c:	6819      	ldr	r1, [r3, #0]
 8002f1e:	4b43      	ldr	r3, [pc, #268]	; (800302c <Sensor2+0x2b0>)
 8002f20:	fba3 0301 	umull	r0, r3, r3, r1
 8002f24:	08da      	lsrs	r2, r3, #3
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	1aca      	subs	r2, r1, r3
 8002f30:	4b31      	ldr	r3, [pc, #196]	; (8002ff8 <Sensor2+0x27c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	493d      	ldr	r1, [pc, #244]	; (800302c <Sensor2+0x2b0>)
 8002f36:	fba1 1303 	umull	r1, r3, r1, r3
 8002f3a:	08dd      	lsrs	r5, r3, #3
 8002f3c:	4b2e      	ldr	r3, [pc, #184]	; (8002ff8 <Sensor2+0x27c>)
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	4b3a      	ldr	r3, [pc, #232]	; (800302c <Sensor2+0x2b0>)
 8002f42:	fba3 1300 	umull	r1, r3, r3, r0
 8002f46:	08d9      	lsrs	r1, r3, #3
 8002f48:	460b      	mov	r3, r1
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	1ac1      	subs	r1, r0, r3
 8002f52:	4b23      	ldr	r3, [pc, #140]	; (8002fe0 <Sensor2+0x264>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4835      	ldr	r0, [pc, #212]	; (800302c <Sensor2+0x2b0>)
 8002f58:	fba0 0303 	umull	r0, r3, r0, r3
 8002f5c:	08de      	lsrs	r6, r3, #3
 8002f5e:	4b20      	ldr	r3, [pc, #128]	; (8002fe0 <Sensor2+0x264>)
 8002f60:	681c      	ldr	r4, [r3, #0]
 8002f62:	4b32      	ldr	r3, [pc, #200]	; (800302c <Sensor2+0x2b0>)
 8002f64:	fba3 0304 	umull	r0, r3, r3, r4
 8002f68:	08d8      	lsrs	r0, r3, #3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4403      	add	r3, r0
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	1ae0      	subs	r0, r4, r3
 8002f74:	9004      	str	r0, [sp, #16]
 8002f76:	9603      	str	r6, [sp, #12]
 8002f78:	9102      	str	r1, [sp, #8]
 8002f7a:	9501      	str	r5, [sp, #4]
 8002f7c:	9200      	str	r2, [sp, #0]
 8002f7e:	4663      	mov	r3, ip
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	492b      	ldr	r1, [pc, #172]	; (8003030 <Sensor2+0x2b4>)
 8002f84:	482b      	ldr	r0, [pc, #172]	; (8003034 <Sensor2+0x2b8>)
 8002f86:	f000 fe9d 	bl	8003cc4 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rTrack B Lap:",14,10);
 8002f8a:	230a      	movs	r3, #10
 8002f8c:	220e      	movs	r2, #14
 8002f8e:	492a      	ldr	r1, [pc, #168]	; (8003038 <Sensor2+0x2bc>)
 8002f90:	4811      	ldr	r0, [pc, #68]	; (8002fd8 <Sensor2+0x25c>)
 8002f92:	f7ff f83e 	bl	8002012 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)buffs,sizeof(buffs),10);
 8002f96:	230a      	movs	r3, #10
 8002f98:	220d      	movs	r2, #13
 8002f9a:	4926      	ldr	r1, [pc, #152]	; (8003034 <Sensor2+0x2b8>)
 8002f9c:	480e      	ldr	r0, [pc, #56]	; (8002fd8 <Sensor2+0x25c>)
 8002f9e:	f7ff f838 	bl	8002012 <HAL_UART_Transmit>
		else{
			lapB=5;
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rTrack B = FINISH",18,10);
		}
	}
}
 8002fa2:	e008      	b.n	8002fb6 <Sensor2+0x23a>
			lapB=5;
 8002fa4:	4b20      	ldr	r3, [pc, #128]	; (8003028 <Sensor2+0x2ac>)
 8002fa6:	2205      	movs	r2, #5
 8002fa8:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rTrack B = FINISH",18,10);
 8002faa:	230a      	movs	r3, #10
 8002fac:	2212      	movs	r2, #18
 8002fae:	4923      	ldr	r1, [pc, #140]	; (800303c <Sensor2+0x2c0>)
 8002fb0:	4809      	ldr	r0, [pc, #36]	; (8002fd8 <Sensor2+0x25c>)
 8002fb2:	f7ff f82e 	bl	8002012 <HAL_UART_Transmit>
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40010c00 	.word	0x40010c00
 8002fc4:	20000110 	.word	0x20000110
 8002fc8:	20000020 	.word	0x20000020
 8002fcc:	2000000f 	.word	0x2000000f
 8002fd0:	40011000 	.word	0x40011000
 8002fd4:	08004590 	.word	0x08004590
 8002fd8:	200001bc 	.word	0x200001bc
 8002fdc:	200000ac 	.word	0x200000ac
 8002fe0:	20000258 	.word	0x20000258
 8002fe4:	2000027c 	.word	0x2000027c
 8002fe8:	200000e0 	.word	0x200000e0
 8002fec:	2000023c 	.word	0x2000023c
 8002ff0:	200000ec 	.word	0x200000ec
 8002ff4:	200000b0 	.word	0x200000b0
 8002ff8:	20000274 	.word	0x20000274
 8002ffc:	20000240 	.word	0x20000240
 8003000:	200000e4 	.word	0x200000e4
 8003004:	20000280 	.word	0x20000280
 8003008:	200000f0 	.word	0x200000f0
 800300c:	200000b4 	.word	0x200000b4
 8003010:	20000278 	.word	0x20000278
 8003014:	20000284 	.word	0x20000284
 8003018:	200000e8 	.word	0x200000e8
 800301c:	20000244 	.word	0x20000244
 8003020:	200000f4 	.word	0x200000f4
 8003024:	200000b8 	.word	0x200000b8
 8003028:	200000c0 	.word	0x200000c0
 800302c:	cccccccd 	.word	0xcccccccd
 8003030:	08004558 	.word	0x08004558
 8003034:	20000248 	.word	0x20000248
 8003038:	080045a8 	.word	0x080045a8
 800303c:	080045b8 	.word	0x080045b8

08003040 <Sensor3>:

void Sensor3(void)
{
 8003040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003042:	b089      	sub	sp, #36	; 0x24
 8003044:	af06      	add	r7, sp, #24
	if(HAL_GPIO_ReadPin(Sensor3_GPIO_Port,Sensor3_Pin)== GPIO_PIN_RESET && (Timeout_loop5++<=Timeout_value5)){
 8003046:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800304a:	487e      	ldr	r0, [pc, #504]	; (8003244 <Sensor3+0x204>)
 800304c:	f7fd fb64 	bl	8000718 <HAL_GPIO_ReadPin>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10f      	bne.n	8003076 <Sensor3+0x36>
 8003056:	4b7c      	ldr	r3, [pc, #496]	; (8003248 <Sensor3+0x208>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	497a      	ldr	r1, [pc, #488]	; (8003248 <Sensor3+0x208>)
 800305e:	600a      	str	r2, [r1, #0]
 8003060:	4a7a      	ldr	r2, [pc, #488]	; (800324c <Sensor3+0x20c>)
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	4293      	cmp	r3, r2
 8003066:	d806      	bhi.n	8003076 <Sensor3+0x36>
		bouncing5=(bouncing5<<1);
 8003068:	4b79      	ldr	r3, [pc, #484]	; (8003250 <Sensor3+0x210>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	b2da      	uxtb	r2, r3
 8003070:	4b77      	ldr	r3, [pc, #476]	; (8003250 <Sensor3+0x210>)
 8003072:	701a      	strb	r2, [r3, #0]
 8003074:	e057      	b.n	8003126 <Sensor3+0xe6>
	}

	else if(HAL_GPIO_ReadPin(Sensor3_GPIO_Port,Sensor3_Pin)== GPIO_PIN_RESET && (Timeout_loop5++>Timeout_value5)){
 8003076:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800307a:	4872      	ldr	r0, [pc, #456]	; (8003244 <Sensor3+0x204>)
 800307c:	f7fd fb4c 	bl	8000718 <HAL_GPIO_ReadPin>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d130      	bne.n	80030e8 <Sensor3+0xa8>
 8003086:	4b70      	ldr	r3, [pc, #448]	; (8003248 <Sensor3+0x208>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	496e      	ldr	r1, [pc, #440]	; (8003248 <Sensor3+0x208>)
 800308e:	600a      	str	r2, [r1, #0]
 8003090:	4a6e      	ldr	r2, [pc, #440]	; (800324c <Sensor3+0x20c>)
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	4293      	cmp	r3, r2
 8003096:	d927      	bls.n	80030e8 <Sensor3+0xa8>
		if(Timeout_loop5>=Timeout_value5+50){
 8003098:	4b6c      	ldr	r3, [pc, #432]	; (800324c <Sensor3+0x20c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030a0:	4b69      	ldr	r3, [pc, #420]	; (8003248 <Sensor3+0x208>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d83e      	bhi.n	8003126 <Sensor3+0xe6>
			Timeout_loop5=Timeout_value5+1;
 80030a8:	4b68      	ldr	r3, [pc, #416]	; (800324c <Sensor3+0x20c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3301      	adds	r3, #1
 80030ae:	4a66      	ldr	r2, [pc, #408]	; (8003248 <Sensor3+0x208>)
 80030b0:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 80030b2:	2201      	movs	r2, #1
 80030b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030b8:	4866      	ldr	r0, [pc, #408]	; (8003254 <Sensor3+0x214>)
 80030ba:	f7fd fb44 	bl	8000746 <HAL_GPIO_WritePin>

			HAL_GPIO_TogglePin(Buzzer_GPIO_Port,Buzzer_Pin);
 80030be:	2102      	movs	r1, #2
 80030c0:	4860      	ldr	r0, [pc, #384]	; (8003244 <Sensor3+0x204>)
 80030c2:	f7fd fb58 	bl	8000776 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80030c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030ca:	4862      	ldr	r0, [pc, #392]	; (8003254 <Sensor3+0x214>)
 80030cc:	f7fd fb53 	bl	8000776 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 80030d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030d4:	485f      	ldr	r0, [pc, #380]	; (8003254 <Sensor3+0x214>)
 80030d6:	f7fd fb4e 	bl	8000776 <HAL_GPIO_TogglePin>

			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rSensor3 Error: 0x05",21,10);
 80030da:	230a      	movs	r3, #10
 80030dc:	2215      	movs	r2, #21
 80030de:	495e      	ldr	r1, [pc, #376]	; (8003258 <Sensor3+0x218>)
 80030e0:	485e      	ldr	r0, [pc, #376]	; (800325c <Sensor3+0x21c>)
 80030e2:	f7fe ff96 	bl	8002012 <HAL_UART_Transmit>
		if(Timeout_loop5>=Timeout_value5+50){
 80030e6:	e01e      	b.n	8003126 <Sensor3+0xe6>
		}
	}

	else if(HAL_GPIO_ReadPin(Sensor3_GPIO_Port,Sensor3_Pin)== GPIO_PIN_SET && Timeout_loop5<=Timeout_value5){
 80030e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030ec:	4855      	ldr	r0, [pc, #340]	; (8003244 <Sensor3+0x204>)
 80030ee:	f7fd fb13 	bl	8000718 <HAL_GPIO_ReadPin>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d110      	bne.n	800311a <Sensor3+0xda>
 80030f8:	4b53      	ldr	r3, [pc, #332]	; (8003248 <Sensor3+0x208>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b53      	ldr	r3, [pc, #332]	; (800324c <Sensor3+0x20c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d80a      	bhi.n	800311a <Sensor3+0xda>
		bouncing5 = (bouncing5<<1)|1;
 8003104:	4b52      	ldr	r3, [pc, #328]	; (8003250 <Sensor3+0x210>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	b25b      	sxtb	r3, r3
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	b25b      	sxtb	r3, r3
 8003112:	b2da      	uxtb	r2, r3
 8003114:	4b4e      	ldr	r3, [pc, #312]	; (8003250 <Sensor3+0x210>)
 8003116:	701a      	strb	r2, [r3, #0]
 8003118:	e005      	b.n	8003126 <Sensor3+0xe6>
	}

	else{
		Timeout_loop5=0;
 800311a:	4b4b      	ldr	r3, [pc, #300]	; (8003248 <Sensor3+0x208>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
		bouncing5=0xFF;
 8003120:	4b4b      	ldr	r3, [pc, #300]	; (8003250 <Sensor3+0x210>)
 8003122:	22ff      	movs	r2, #255	; 0xff
 8003124:	701a      	strb	r2, [r3, #0]
	}

	if (bouncing5==0xFE){
 8003126:	4b4a      	ldr	r3, [pc, #296]	; (8003250 <Sensor3+0x210>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2bfe      	cmp	r3, #254	; 0xfe
 800312c:	f040 8086 	bne.w	800323c <Sensor3+0x1fc>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port,Buzzer_Pin,GPIO_PIN_SET);
 8003130:	2201      	movs	r2, #1
 8003132:	2102      	movs	r1, #2
 8003134:	4843      	ldr	r0, [pc, #268]	; (8003244 <Sensor3+0x204>)
 8003136:	f7fd fb06 	bl	8000746 <HAL_GPIO_WritePin>
		milisecC=milisec;
 800313a:	4b49      	ldr	r3, [pc, #292]	; (8003260 <Sensor3+0x220>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a49      	ldr	r2, [pc, #292]	; (8003264 <Sensor3+0x224>)
 8003140:	6013      	str	r3, [r2, #0]
		//milisecC=milisec-milisecCA;
		milisecCA=milisec;
 8003142:	4b47      	ldr	r3, [pc, #284]	; (8003260 <Sensor3+0x220>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a48      	ldr	r2, [pc, #288]	; (8003268 <Sensor3+0x228>)
 8003148:	6013      	str	r3, [r2, #0]

		secC=sec;
 800314a:	4b48      	ldr	r3, [pc, #288]	; (800326c <Sensor3+0x22c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a48      	ldr	r2, [pc, #288]	; (8003270 <Sensor3+0x230>)
 8003150:	6013      	str	r3, [r2, #0]
		//secC=sec-secCA;
		secCA=sec;
 8003152:	4b46      	ldr	r3, [pc, #280]	; (800326c <Sensor3+0x22c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a47      	ldr	r2, [pc, #284]	; (8003274 <Sensor3+0x234>)
 8003158:	6013      	str	r3, [r2, #0]

		minC=min;
 800315a:	4b47      	ldr	r3, [pc, #284]	; (8003278 <Sensor3+0x238>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a47      	ldr	r2, [pc, #284]	; (800327c <Sensor3+0x23c>)
 8003160:	6013      	str	r3, [r2, #0]
		//minC=min-minCA;
		minCA=min;
 8003162:	4b45      	ldr	r3, [pc, #276]	; (8003278 <Sensor3+0x238>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a46      	ldr	r2, [pc, #280]	; (8003280 <Sensor3+0x240>)
 8003168:	6013      	str	r3, [r2, #0]

		if(runstop==1)	lapC++;
 800316a:	4b46      	ldr	r3, [pc, #280]	; (8003284 <Sensor3+0x244>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d105      	bne.n	800317e <Sensor3+0x13e>
 8003172:	4b45      	ldr	r3, [pc, #276]	; (8003288 <Sensor3+0x248>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3301      	adds	r3, #1
 8003178:	4a43      	ldr	r2, [pc, #268]	; (8003288 <Sensor3+0x248>)
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	e002      	b.n	8003184 <Sensor3+0x144>
		else 			lapC=0;
 800317e:	4b42      	ldr	r3, [pc, #264]	; (8003288 <Sensor3+0x248>)
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]

		if(lapC<5){
 8003184:	4b40      	ldr	r3, [pc, #256]	; (8003288 <Sensor3+0x248>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b04      	cmp	r3, #4
 800318a:	d84e      	bhi.n	800322a <Sensor3+0x1ea>
			sprintf(buffs,"%d = %d%d:%d%d:%d%d",lapC,(minC/10),(minC%10),(secC/10),(secC%10),(milisecC/10),(milisecC%10));
 800318c:	4b3e      	ldr	r3, [pc, #248]	; (8003288 <Sensor3+0x248>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	607b      	str	r3, [r7, #4]
 8003192:	4b3a      	ldr	r3, [pc, #232]	; (800327c <Sensor3+0x23c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a3d      	ldr	r2, [pc, #244]	; (800328c <Sensor3+0x24c>)
 8003198:	fba2 1303 	umull	r1, r3, r2, r3
 800319c:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80031a0:	4b36      	ldr	r3, [pc, #216]	; (800327c <Sensor3+0x23c>)
 80031a2:	6819      	ldr	r1, [r3, #0]
 80031a4:	4b39      	ldr	r3, [pc, #228]	; (800328c <Sensor3+0x24c>)
 80031a6:	fba3 0301 	umull	r0, r3, r3, r1
 80031aa:	08da      	lsrs	r2, r3, #3
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	1aca      	subs	r2, r1, r3
 80031b6:	4b2e      	ldr	r3, [pc, #184]	; (8003270 <Sensor3+0x230>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4934      	ldr	r1, [pc, #208]	; (800328c <Sensor3+0x24c>)
 80031bc:	fba1 1303 	umull	r1, r3, r1, r3
 80031c0:	08dd      	lsrs	r5, r3, #3
 80031c2:	4b2b      	ldr	r3, [pc, #172]	; (8003270 <Sensor3+0x230>)
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	4b31      	ldr	r3, [pc, #196]	; (800328c <Sensor3+0x24c>)
 80031c8:	fba3 1300 	umull	r1, r3, r3, r0
 80031cc:	08d9      	lsrs	r1, r3, #3
 80031ce:	460b      	mov	r3, r1
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	1ac1      	subs	r1, r0, r3
 80031d8:	4b22      	ldr	r3, [pc, #136]	; (8003264 <Sensor3+0x224>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	482b      	ldr	r0, [pc, #172]	; (800328c <Sensor3+0x24c>)
 80031de:	fba0 0303 	umull	r0, r3, r0, r3
 80031e2:	08de      	lsrs	r6, r3, #3
 80031e4:	4b1f      	ldr	r3, [pc, #124]	; (8003264 <Sensor3+0x224>)
 80031e6:	681c      	ldr	r4, [r3, #0]
 80031e8:	4b28      	ldr	r3, [pc, #160]	; (800328c <Sensor3+0x24c>)
 80031ea:	fba3 0304 	umull	r0, r3, r3, r4
 80031ee:	08d8      	lsrs	r0, r3, #3
 80031f0:	4603      	mov	r3, r0
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4403      	add	r3, r0
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	1ae0      	subs	r0, r4, r3
 80031fa:	9004      	str	r0, [sp, #16]
 80031fc:	9603      	str	r6, [sp, #12]
 80031fe:	9102      	str	r1, [sp, #8]
 8003200:	9501      	str	r5, [sp, #4]
 8003202:	9200      	str	r2, [sp, #0]
 8003204:	4663      	mov	r3, ip
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4921      	ldr	r1, [pc, #132]	; (8003290 <Sensor3+0x250>)
 800320a:	4822      	ldr	r0, [pc, #136]	; (8003294 <Sensor3+0x254>)
 800320c:	f000 fd5a 	bl	8003cc4 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rTrack C Lap:",14,10);
 8003210:	230a      	movs	r3, #10
 8003212:	220e      	movs	r2, #14
 8003214:	4920      	ldr	r1, [pc, #128]	; (8003298 <Sensor3+0x258>)
 8003216:	4811      	ldr	r0, [pc, #68]	; (800325c <Sensor3+0x21c>)
 8003218:	f7fe fefb 	bl	8002012 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)buffs,sizeof(buffs),10);
 800321c:	230a      	movs	r3, #10
 800321e:	220d      	movs	r2, #13
 8003220:	491c      	ldr	r1, [pc, #112]	; (8003294 <Sensor3+0x254>)
 8003222:	480e      	ldr	r0, [pc, #56]	; (800325c <Sensor3+0x21c>)
 8003224:	f7fe fef5 	bl	8002012 <HAL_UART_Transmit>
		else{
			lapC=5;
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rTrack C = FINISH",18,10);
		}
	}
}
 8003228:	e008      	b.n	800323c <Sensor3+0x1fc>
			lapC=5;
 800322a:	4b17      	ldr	r3, [pc, #92]	; (8003288 <Sensor3+0x248>)
 800322c:	2205      	movs	r2, #5
 800322e:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\rTrack C = FINISH",18,10);
 8003230:	230a      	movs	r3, #10
 8003232:	2212      	movs	r2, #18
 8003234:	4919      	ldr	r1, [pc, #100]	; (800329c <Sensor3+0x25c>)
 8003236:	4809      	ldr	r0, [pc, #36]	; (800325c <Sensor3+0x21c>)
 8003238:	f7fe feeb 	bl	8002012 <HAL_UART_Transmit>
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003244:	40010c00 	.word	0x40010c00
 8003248:	20000114 	.word	0x20000114
 800324c:	20000024 	.word	0x20000024
 8003250:	20000010 	.word	0x20000010
 8003254:	40011000 	.word	0x40011000
 8003258:	080045cc 	.word	0x080045cc
 800325c:	200001bc 	.word	0x200001bc
 8003260:	200000ac 	.word	0x200000ac
 8003264:	2000023c 	.word	0x2000023c
 8003268:	200000f8 	.word	0x200000f8
 800326c:	200000b0 	.word	0x200000b0
 8003270:	20000280 	.word	0x20000280
 8003274:	200000fc 	.word	0x200000fc
 8003278:	200000b4 	.word	0x200000b4
 800327c:	20000244 	.word	0x20000244
 8003280:	20000100 	.word	0x20000100
 8003284:	200000b8 	.word	0x200000b8
 8003288:	200000c4 	.word	0x200000c4
 800328c:	cccccccd 	.word	0xcccccccd
 8003290:	08004558 	.word	0x08004558
 8003294:	20000248 	.word	0x20000248
 8003298:	080045e4 	.word	0x080045e4
 800329c:	080045f4 	.word	0x080045f4

080032a0 <LCDAwal>:

void LCDAwal(void)
{
 80032a0:	b598      	push	{r3, r4, r7, lr}
 80032a2:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80);
 80032a4:	2080      	movs	r0, #128	; 0x80
 80032a6:	f7ff f871 	bl	800238c <lcd_send_cmd>
	sprintf(buffer," [Lap Time] ");
 80032aa:	4a5a      	ldr	r2, [pc, #360]	; (8003414 <LCDAwal+0x174>)
 80032ac:	4b5a      	ldr	r3, [pc, #360]	; (8003418 <LCDAwal+0x178>)
 80032ae:	4614      	mov	r4, r2
 80032b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80032b2:	6020      	str	r0, [r4, #0]
 80032b4:	6061      	str	r1, [r4, #4]
 80032b6:	60a2      	str	r2, [r4, #8]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	7323      	strb	r3, [r4, #12]
	lcd_send_string(buffer);
 80032bc:	4855      	ldr	r0, [pc, #340]	; (8003414 <LCDAwal+0x174>)
 80032be:	f7ff f8d5 	bl	800246c <lcd_send_string>
	lcd_send_cmd(0x8c);
 80032c2:	208c      	movs	r0, #140	; 0x8c
 80032c4:	f7ff f862 	bl	800238c <lcd_send_cmd>
	sprintf(buffer,"  ");
 80032c8:	4b52      	ldr	r3, [pc, #328]	; (8003414 <LCDAwal+0x174>)
 80032ca:	4a54      	ldr	r2, [pc, #336]	; (800341c <LCDAwal+0x17c>)
 80032cc:	8811      	ldrh	r1, [r2, #0]
 80032ce:	7892      	ldrb	r2, [r2, #2]
 80032d0:	8019      	strh	r1, [r3, #0]
 80032d2:	709a      	strb	r2, [r3, #2]
	lcd_send_string(buffer);
 80032d4:	484f      	ldr	r0, [pc, #316]	; (8003414 <LCDAwal+0x174>)
 80032d6:	f7ff f8c9 	bl	800246c <lcd_send_string>
	lcd_send_cmd(0x8e);
 80032da:	208e      	movs	r0, #142	; 0x8e
 80032dc:	f7ff f856 	bl	800238c <lcd_send_cmd>
	sprintf(buffer,":");
 80032e0:	4a4c      	ldr	r2, [pc, #304]	; (8003414 <LCDAwal+0x174>)
 80032e2:	4b4f      	ldr	r3, [pc, #316]	; (8003420 <LCDAwal+0x180>)
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	8013      	strh	r3, [r2, #0]
	lcd_send_string(buffer);
 80032e8:	484a      	ldr	r0, [pc, #296]	; (8003414 <LCDAwal+0x174>)
 80032ea:	f7ff f8bf 	bl	800246c <lcd_send_string>
	lcd_send_cmd(0x8f);
 80032ee:	208f      	movs	r0, #143	; 0x8f
 80032f0:	f7ff f84c 	bl	800238c <lcd_send_cmd>
	sprintf(buffer,"  ");
 80032f4:	4b47      	ldr	r3, [pc, #284]	; (8003414 <LCDAwal+0x174>)
 80032f6:	4a49      	ldr	r2, [pc, #292]	; (800341c <LCDAwal+0x17c>)
 80032f8:	8811      	ldrh	r1, [r2, #0]
 80032fa:	7892      	ldrb	r2, [r2, #2]
 80032fc:	8019      	strh	r1, [r3, #0]
 80032fe:	709a      	strb	r2, [r3, #2]
	lcd_send_string(buffer);
 8003300:	4844      	ldr	r0, [pc, #272]	; (8003414 <LCDAwal+0x174>)
 8003302:	f7ff f8b3 	bl	800246c <lcd_send_string>
	lcd_send_cmd(0x91);
 8003306:	2091      	movs	r0, #145	; 0x91
 8003308:	f7ff f840 	bl	800238c <lcd_send_cmd>
	sprintf(buffer,":");
 800330c:	4a41      	ldr	r2, [pc, #260]	; (8003414 <LCDAwal+0x174>)
 800330e:	4b44      	ldr	r3, [pc, #272]	; (8003420 <LCDAwal+0x180>)
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	8013      	strh	r3, [r2, #0]
	lcd_send_string(buffer);
 8003314:	483f      	ldr	r0, [pc, #252]	; (8003414 <LCDAwal+0x174>)
 8003316:	f7ff f8a9 	bl	800246c <lcd_send_string>
	lcd_send_cmd(0x92);
 800331a:	2092      	movs	r0, #146	; 0x92
 800331c:	f7ff f836 	bl	800238c <lcd_send_cmd>
	sprintf(buffer,"  ");
 8003320:	4b3c      	ldr	r3, [pc, #240]	; (8003414 <LCDAwal+0x174>)
 8003322:	4a3e      	ldr	r2, [pc, #248]	; (800341c <LCDAwal+0x17c>)
 8003324:	8811      	ldrh	r1, [r2, #0]
 8003326:	7892      	ldrb	r2, [r2, #2]
 8003328:	8019      	strh	r1, [r3, #0]
 800332a:	709a      	strb	r2, [r3, #2]
	lcd_send_string(buffer);
 800332c:	4839      	ldr	r0, [pc, #228]	; (8003414 <LCDAwal+0x174>)
 800332e:	f7ff f89d 	bl	800246c <lcd_send_string>
	//TrackA
	lcd_send_cmd(0xc0);
 8003332:	20c0      	movs	r0, #192	; 0xc0
 8003334:	f7ff f82a 	bl	800238c <lcd_send_cmd>
	sprintf(buffer,"TrackA=");
 8003338:	4a36      	ldr	r2, [pc, #216]	; (8003414 <LCDAwal+0x174>)
 800333a:	4b3a      	ldr	r3, [pc, #232]	; (8003424 <LCDAwal+0x184>)
 800333c:	cb03      	ldmia	r3!, {r0, r1}
 800333e:	6010      	str	r0, [r2, #0]
 8003340:	6051      	str	r1, [r2, #4]
	lcd_send_string(buffer);
 8003342:	4834      	ldr	r0, [pc, #208]	; (8003414 <LCDAwal+0x174>)
 8003344:	f7ff f892 	bl	800246c <lcd_send_string>
	lcd_send_cmd(0xc7);
 8003348:	20c7      	movs	r0, #199	; 0xc7
 800334a:	f7ff f81f 	bl	800238c <lcd_send_cmd>
	sprintf(buffer,"  :  :   ");
 800334e:	4a31      	ldr	r2, [pc, #196]	; (8003414 <LCDAwal+0x174>)
 8003350:	4b35      	ldr	r3, [pc, #212]	; (8003428 <LCDAwal+0x188>)
 8003352:	cb03      	ldmia	r3!, {r0, r1}
 8003354:	6010      	str	r0, [r2, #0]
 8003356:	6051      	str	r1, [r2, #4]
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	8113      	strh	r3, [r2, #8]
	lcd_send_string(buffer);
 800335c:	482d      	ldr	r0, [pc, #180]	; (8003414 <LCDAwal+0x174>)
 800335e:	f7ff f885 	bl	800246c <lcd_send_string>
	lcd_send_cmd(0xd0);
 8003362:	20d0      	movs	r0, #208	; 0xd0
 8003364:	f7ff f812 	bl	800238c <lcd_send_cmd>
	sprintf(buffer,"Lap%d",lapA);
 8003368:	4b30      	ldr	r3, [pc, #192]	; (800342c <LCDAwal+0x18c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	4930      	ldr	r1, [pc, #192]	; (8003430 <LCDAwal+0x190>)
 8003370:	4828      	ldr	r0, [pc, #160]	; (8003414 <LCDAwal+0x174>)
 8003372:	f000 fca7 	bl	8003cc4 <siprintf>
	lcd_send_string(buffer);
 8003376:	4827      	ldr	r0, [pc, #156]	; (8003414 <LCDAwal+0x174>)
 8003378:	f7ff f878 	bl	800246c <lcd_send_string>
	//TrackB
	lcd_send_cmd(0x94);
 800337c:	2094      	movs	r0, #148	; 0x94
 800337e:	f7ff f805 	bl	800238c <lcd_send_cmd>
	sprintf(buffer,"TrackB=");
 8003382:	4a24      	ldr	r2, [pc, #144]	; (8003414 <LCDAwal+0x174>)
 8003384:	4b2b      	ldr	r3, [pc, #172]	; (8003434 <LCDAwal+0x194>)
 8003386:	cb03      	ldmia	r3!, {r0, r1}
 8003388:	6010      	str	r0, [r2, #0]
 800338a:	6051      	str	r1, [r2, #4]
	lcd_send_string(buffer);
 800338c:	4821      	ldr	r0, [pc, #132]	; (8003414 <LCDAwal+0x174>)
 800338e:	f7ff f86d 	bl	800246c <lcd_send_string>
	lcd_send_cmd(0x9b);
 8003392:	209b      	movs	r0, #155	; 0x9b
 8003394:	f7fe fffa 	bl	800238c <lcd_send_cmd>
	sprintf(buffer,"  :  :   ");
 8003398:	4a1e      	ldr	r2, [pc, #120]	; (8003414 <LCDAwal+0x174>)
 800339a:	4b23      	ldr	r3, [pc, #140]	; (8003428 <LCDAwal+0x188>)
 800339c:	cb03      	ldmia	r3!, {r0, r1}
 800339e:	6010      	str	r0, [r2, #0]
 80033a0:	6051      	str	r1, [r2, #4]
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	8113      	strh	r3, [r2, #8]
	lcd_send_string(buffer);
 80033a6:	481b      	ldr	r0, [pc, #108]	; (8003414 <LCDAwal+0x174>)
 80033a8:	f7ff f860 	bl	800246c <lcd_send_string>
	lcd_send_cmd(0xa4);
 80033ac:	20a4      	movs	r0, #164	; 0xa4
 80033ae:	f7fe ffed 	bl	800238c <lcd_send_cmd>
	sprintf(buffer,"Lap%d",lapB);
 80033b2:	4b21      	ldr	r3, [pc, #132]	; (8003438 <LCDAwal+0x198>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	491d      	ldr	r1, [pc, #116]	; (8003430 <LCDAwal+0x190>)
 80033ba:	4816      	ldr	r0, [pc, #88]	; (8003414 <LCDAwal+0x174>)
 80033bc:	f000 fc82 	bl	8003cc4 <siprintf>
	lcd_send_string(buffer);
 80033c0:	4814      	ldr	r0, [pc, #80]	; (8003414 <LCDAwal+0x174>)
 80033c2:	f7ff f853 	bl	800246c <lcd_send_string>
	//TrackC
	lcd_send_cmd(0xd4);
 80033c6:	20d4      	movs	r0, #212	; 0xd4
 80033c8:	f7fe ffe0 	bl	800238c <lcd_send_cmd>
	sprintf(buffer,"TrackC=");
 80033cc:	4a11      	ldr	r2, [pc, #68]	; (8003414 <LCDAwal+0x174>)
 80033ce:	4b1b      	ldr	r3, [pc, #108]	; (800343c <LCDAwal+0x19c>)
 80033d0:	cb03      	ldmia	r3!, {r0, r1}
 80033d2:	6010      	str	r0, [r2, #0]
 80033d4:	6051      	str	r1, [r2, #4]
	lcd_send_string(buffer);
 80033d6:	480f      	ldr	r0, [pc, #60]	; (8003414 <LCDAwal+0x174>)
 80033d8:	f7ff f848 	bl	800246c <lcd_send_string>
	lcd_send_cmd(0xdb);
 80033dc:	20db      	movs	r0, #219	; 0xdb
 80033de:	f7fe ffd5 	bl	800238c <lcd_send_cmd>
	sprintf(buffer,"  :  :   ");
 80033e2:	4a0c      	ldr	r2, [pc, #48]	; (8003414 <LCDAwal+0x174>)
 80033e4:	4b10      	ldr	r3, [pc, #64]	; (8003428 <LCDAwal+0x188>)
 80033e6:	cb03      	ldmia	r3!, {r0, r1}
 80033e8:	6010      	str	r0, [r2, #0]
 80033ea:	6051      	str	r1, [r2, #4]
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	8113      	strh	r3, [r2, #8]
	lcd_send_string(buffer);
 80033f0:	4808      	ldr	r0, [pc, #32]	; (8003414 <LCDAwal+0x174>)
 80033f2:	f7ff f83b 	bl	800246c <lcd_send_string>
	lcd_send_cmd(0xe4);
 80033f6:	20e4      	movs	r0, #228	; 0xe4
 80033f8:	f7fe ffc8 	bl	800238c <lcd_send_cmd>
	sprintf(buffer,"Lap%d",lapC);
 80033fc:	4b10      	ldr	r3, [pc, #64]	; (8003440 <LCDAwal+0x1a0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	490b      	ldr	r1, [pc, #44]	; (8003430 <LCDAwal+0x190>)
 8003404:	4803      	ldr	r0, [pc, #12]	; (8003414 <LCDAwal+0x174>)
 8003406:	f000 fc5d 	bl	8003cc4 <siprintf>
	lcd_send_string(buffer);
 800340a:	4802      	ldr	r0, [pc, #8]	; (8003414 <LCDAwal+0x174>)
 800340c:	f7ff f82e 	bl	800246c <lcd_send_string>
}
 8003410:	bf00      	nop
 8003412:	bd98      	pop	{r3, r4, r7, pc}
 8003414:	2000025c 	.word	0x2000025c
 8003418:	08004608 	.word	0x08004608
 800341c:	08004618 	.word	0x08004618
 8003420:	0800461c 	.word	0x0800461c
 8003424:	08004620 	.word	0x08004620
 8003428:	08004628 	.word	0x08004628
 800342c:	200000bc 	.word	0x200000bc
 8003430:	08004634 	.word	0x08004634
 8003434:	0800463c 	.word	0x0800463c
 8003438:	200000c0 	.word	0x200000c0
 800343c:	08004644 	.word	0x08004644
 8003440:	200000c4 	.word	0x200000c4

08003444 <DearLCD>:

void DearLCD(void)
{
 8003444:	b5b0      	push	{r4, r5, r7, lr}
 8003446:	af00      	add	r7, sp, #0
	//LAP TIME
	lcd_send_cmd(0x80);
 8003448:	2080      	movs	r0, #128	; 0x80
 800344a:	f7fe ff9f 	bl	800238c <lcd_send_cmd>
	//sprintf(buffer," [Lap Time] %d%d:%d%d:%d%d",(min/10),(min%10),(sec/10),(sec%10),(milisec/10),(milisec%10));
	sprintf(buffer," [Lap Time] ");
 800344e:	4a8a      	ldr	r2, [pc, #552]	; (8003678 <DearLCD+0x234>)
 8003450:	4b8a      	ldr	r3, [pc, #552]	; (800367c <DearLCD+0x238>)
 8003452:	4614      	mov	r4, r2
 8003454:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003456:	6020      	str	r0, [r4, #0]
 8003458:	6061      	str	r1, [r4, #4]
 800345a:	60a2      	str	r2, [r4, #8]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	7323      	strb	r3, [r4, #12]
	lcd_send_string(buffer);
 8003460:	4885      	ldr	r0, [pc, #532]	; (8003678 <DearLCD+0x234>)
 8003462:	f7ff f803 	bl	800246c <lcd_send_string>

	lcd_send_cmd(0x8c);
 8003466:	208c      	movs	r0, #140	; 0x8c
 8003468:	f7fe ff90 	bl	800238c <lcd_send_cmd>
	sprintf(buffer,"%d",min);
 800346c:	4b84      	ldr	r3, [pc, #528]	; (8003680 <DearLCD+0x23c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	4984      	ldr	r1, [pc, #528]	; (8003684 <DearLCD+0x240>)
 8003474:	4880      	ldr	r0, [pc, #512]	; (8003678 <DearLCD+0x234>)
 8003476:	f000 fc25 	bl	8003cc4 <siprintf>
	lcd_send_string(buffer);
 800347a:	487f      	ldr	r0, [pc, #508]	; (8003678 <DearLCD+0x234>)
 800347c:	f7fe fff6 	bl	800246c <lcd_send_string>
	lcd_send_cmd(0x8e);
 8003480:	208e      	movs	r0, #142	; 0x8e
 8003482:	f7fe ff83 	bl	800238c <lcd_send_cmd>
	sprintf(buffer,":");
 8003486:	4a7c      	ldr	r2, [pc, #496]	; (8003678 <DearLCD+0x234>)
 8003488:	4b7f      	ldr	r3, [pc, #508]	; (8003688 <DearLCD+0x244>)
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	8013      	strh	r3, [r2, #0]
	lcd_send_string(buffer);
 800348e:	487a      	ldr	r0, [pc, #488]	; (8003678 <DearLCD+0x234>)
 8003490:	f7fe ffec 	bl	800246c <lcd_send_string>
	lcd_send_cmd(0x8f);
 8003494:	208f      	movs	r0, #143	; 0x8f
 8003496:	f7fe ff79 	bl	800238c <lcd_send_cmd>
	sprintf(buffer,"%d",sec);
 800349a:	4b7c      	ldr	r3, [pc, #496]	; (800368c <DearLCD+0x248>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	4978      	ldr	r1, [pc, #480]	; (8003684 <DearLCD+0x240>)
 80034a2:	4875      	ldr	r0, [pc, #468]	; (8003678 <DearLCD+0x234>)
 80034a4:	f000 fc0e 	bl	8003cc4 <siprintf>
	lcd_send_string(buffer);
 80034a8:	4873      	ldr	r0, [pc, #460]	; (8003678 <DearLCD+0x234>)
 80034aa:	f7fe ffdf 	bl	800246c <lcd_send_string>
	lcd_send_cmd(0x91);
 80034ae:	2091      	movs	r0, #145	; 0x91
 80034b0:	f7fe ff6c 	bl	800238c <lcd_send_cmd>
	sprintf(buffer,":");
 80034b4:	4a70      	ldr	r2, [pc, #448]	; (8003678 <DearLCD+0x234>)
 80034b6:	4b74      	ldr	r3, [pc, #464]	; (8003688 <DearLCD+0x244>)
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	8013      	strh	r3, [r2, #0]
	lcd_send_string(buffer);
 80034bc:	486e      	ldr	r0, [pc, #440]	; (8003678 <DearLCD+0x234>)
 80034be:	f7fe ffd5 	bl	800246c <lcd_send_string>
	lcd_send_cmd(0x92);
 80034c2:	2092      	movs	r0, #146	; 0x92
 80034c4:	f7fe ff62 	bl	800238c <lcd_send_cmd>
	sprintf(buffer,"%d",milisec);
 80034c8:	4b71      	ldr	r3, [pc, #452]	; (8003690 <DearLCD+0x24c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	496d      	ldr	r1, [pc, #436]	; (8003684 <DearLCD+0x240>)
 80034d0:	4869      	ldr	r0, [pc, #420]	; (8003678 <DearLCD+0x234>)
 80034d2:	f000 fbf7 	bl	8003cc4 <siprintf>
	lcd_send_string(buffer);
 80034d6:	4868      	ldr	r0, [pc, #416]	; (8003678 <DearLCD+0x234>)
 80034d8:	f7fe ffc8 	bl	800246c <lcd_send_string>

	//TrackA
	if(lapA<totlap){
 80034dc:	4b6d      	ldr	r3, [pc, #436]	; (8003694 <DearLCD+0x250>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4b6d      	ldr	r3, [pc, #436]	; (8003698 <DearLCD+0x254>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d253      	bcs.n	8003590 <DearLCD+0x14c>
		lcd_send_cmd(0xc0);
 80034e8:	20c0      	movs	r0, #192	; 0xc0
 80034ea:	f7fe ff4f 	bl	800238c <lcd_send_cmd>
		//		sprintf(buffer,"TrackA=%d:%d:%d",minA,secA,milisecA);
		//		lcd_send_string(buffer);
		//		lcd_send_cmd(0xd0);
		//		sprintf(buffer,"Lap%d",lapA);
		//		lcd_send_string(buffer);
		sprintf(buffer,"TrackA=");
 80034ee:	4a62      	ldr	r2, [pc, #392]	; (8003678 <DearLCD+0x234>)
 80034f0:	4b6a      	ldr	r3, [pc, #424]	; (800369c <DearLCD+0x258>)
 80034f2:	cb03      	ldmia	r3!, {r0, r1}
 80034f4:	6010      	str	r0, [r2, #0]
 80034f6:	6051      	str	r1, [r2, #4]
		lcd_send_string(buffer);
 80034f8:	485f      	ldr	r0, [pc, #380]	; (8003678 <DearLCD+0x234>)
 80034fa:	f7fe ffb7 	bl	800246c <lcd_send_string>
		lcd_send_cmd(0xc7);
 80034fe:	20c7      	movs	r0, #199	; 0xc7
 8003500:	f7fe ff44 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,"%d",minA);
 8003504:	4b66      	ldr	r3, [pc, #408]	; (80036a0 <DearLCD+0x25c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	495e      	ldr	r1, [pc, #376]	; (8003684 <DearLCD+0x240>)
 800350c:	485a      	ldr	r0, [pc, #360]	; (8003678 <DearLCD+0x234>)
 800350e:	f000 fbd9 	bl	8003cc4 <siprintf>
		lcd_send_string(buffer);
 8003512:	4859      	ldr	r0, [pc, #356]	; (8003678 <DearLCD+0x234>)
 8003514:	f7fe ffaa 	bl	800246c <lcd_send_string>
		lcd_send_cmd(0xc9);
 8003518:	20c9      	movs	r0, #201	; 0xc9
 800351a:	f7fe ff37 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,":");
 800351e:	4a56      	ldr	r2, [pc, #344]	; (8003678 <DearLCD+0x234>)
 8003520:	4b59      	ldr	r3, [pc, #356]	; (8003688 <DearLCD+0x244>)
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	8013      	strh	r3, [r2, #0]
		lcd_send_string(buffer);
 8003526:	4854      	ldr	r0, [pc, #336]	; (8003678 <DearLCD+0x234>)
 8003528:	f7fe ffa0 	bl	800246c <lcd_send_string>
		lcd_send_cmd(0xca);
 800352c:	20ca      	movs	r0, #202	; 0xca
 800352e:	f7fe ff2d 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,"%d",secA);
 8003532:	4b5c      	ldr	r3, [pc, #368]	; (80036a4 <DearLCD+0x260>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	4952      	ldr	r1, [pc, #328]	; (8003684 <DearLCD+0x240>)
 800353a:	484f      	ldr	r0, [pc, #316]	; (8003678 <DearLCD+0x234>)
 800353c:	f000 fbc2 	bl	8003cc4 <siprintf>
		lcd_send_string(buffer);
 8003540:	484d      	ldr	r0, [pc, #308]	; (8003678 <DearLCD+0x234>)
 8003542:	f7fe ff93 	bl	800246c <lcd_send_string>
		lcd_send_cmd(0xcc);
 8003546:	20cc      	movs	r0, #204	; 0xcc
 8003548:	f7fe ff20 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,":");
 800354c:	4a4a      	ldr	r2, [pc, #296]	; (8003678 <DearLCD+0x234>)
 800354e:	4b4e      	ldr	r3, [pc, #312]	; (8003688 <DearLCD+0x244>)
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	8013      	strh	r3, [r2, #0]
		lcd_send_string(buffer);
 8003554:	4848      	ldr	r0, [pc, #288]	; (8003678 <DearLCD+0x234>)
 8003556:	f7fe ff89 	bl	800246c <lcd_send_string>
		lcd_send_cmd(0xcd);
 800355a:	20cd      	movs	r0, #205	; 0xcd
 800355c:	f7fe ff16 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,"%d",milisecA);
 8003560:	4b51      	ldr	r3, [pc, #324]	; (80036a8 <DearLCD+0x264>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	4947      	ldr	r1, [pc, #284]	; (8003684 <DearLCD+0x240>)
 8003568:	4843      	ldr	r0, [pc, #268]	; (8003678 <DearLCD+0x234>)
 800356a:	f000 fbab 	bl	8003cc4 <siprintf>
		lcd_send_string(buffer);
 800356e:	4842      	ldr	r0, [pc, #264]	; (8003678 <DearLCD+0x234>)
 8003570:	f7fe ff7c 	bl	800246c <lcd_send_string>

		lcd_send_cmd(0xd0);
 8003574:	20d0      	movs	r0, #208	; 0xd0
 8003576:	f7fe ff09 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,"Lap%d",lapA);
 800357a:	4b46      	ldr	r3, [pc, #280]	; (8003694 <DearLCD+0x250>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	494a      	ldr	r1, [pc, #296]	; (80036ac <DearLCD+0x268>)
 8003582:	483d      	ldr	r0, [pc, #244]	; (8003678 <DearLCD+0x234>)
 8003584:	f000 fb9e 	bl	8003cc4 <siprintf>
		lcd_send_string(buffer);
 8003588:	483b      	ldr	r0, [pc, #236]	; (8003678 <DearLCD+0x234>)
 800358a:	f7fe ff6f 	bl	800246c <lcd_send_string>
 800358e:	e018      	b.n	80035c2 <DearLCD+0x17e>
	}
	else if(lapA==totlap){
 8003590:	4b40      	ldr	r3, [pc, #256]	; (8003694 <DearLCD+0x250>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4b40      	ldr	r3, [pc, #256]	; (8003698 <DearLCD+0x254>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d112      	bne.n	80035c2 <DearLCD+0x17e>
		lcd_send_cmd(0xc0);
 800359c:	20c0      	movs	r0, #192	; 0xc0
 800359e:	f7fe fef5 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,"TrackA = FINISH YEAY");
 80035a2:	4a35      	ldr	r2, [pc, #212]	; (8003678 <DearLCD+0x234>)
 80035a4:	4b42      	ldr	r3, [pc, #264]	; (80036b0 <DearLCD+0x26c>)
 80035a6:	4615      	mov	r5, r2
 80035a8:	461c      	mov	r4, r3
 80035aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035ac:	6028      	str	r0, [r5, #0]
 80035ae:	6069      	str	r1, [r5, #4]
 80035b0:	60aa      	str	r2, [r5, #8]
 80035b2:	60eb      	str	r3, [r5, #12]
 80035b4:	6820      	ldr	r0, [r4, #0]
 80035b6:	6128      	str	r0, [r5, #16]
 80035b8:	7923      	ldrb	r3, [r4, #4]
 80035ba:	752b      	strb	r3, [r5, #20]
		lcd_send_string(buffer);
 80035bc:	482e      	ldr	r0, [pc, #184]	; (8003678 <DearLCD+0x234>)
 80035be:	f7fe ff55 	bl	800246c <lcd_send_string>
	}
	//TrackB
	if(lapB<totlap){
 80035c2:	4b3c      	ldr	r3, [pc, #240]	; (80036b4 <DearLCD+0x270>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	4b34      	ldr	r3, [pc, #208]	; (8003698 <DearLCD+0x254>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d27c      	bcs.n	80036c8 <DearLCD+0x284>
		lcd_send_cmd(0x94);
 80035ce:	2094      	movs	r0, #148	; 0x94
 80035d0:	f7fe fedc 	bl	800238c <lcd_send_cmd>
		//sprintf(buffer,"TrackB=%d%d:%d%d:%d%d Lap%d",(minB/10),(minB%10),(secB/10),(secB%10),(milisecB/10),(milisecB%10),(lapB));
		//		sprintf(buffer,"TrackB=%d:%d:%d",minB,secB,milisecB);
		//		lcd_send_string(buffer);
		sprintf(buffer,"TrackB=");
 80035d4:	4a28      	ldr	r2, [pc, #160]	; (8003678 <DearLCD+0x234>)
 80035d6:	4b38      	ldr	r3, [pc, #224]	; (80036b8 <DearLCD+0x274>)
 80035d8:	cb03      	ldmia	r3!, {r0, r1}
 80035da:	6010      	str	r0, [r2, #0]
 80035dc:	6051      	str	r1, [r2, #4]
		lcd_send_string(buffer);
 80035de:	4826      	ldr	r0, [pc, #152]	; (8003678 <DearLCD+0x234>)
 80035e0:	f7fe ff44 	bl	800246c <lcd_send_string>
		lcd_send_cmd(0x9b);
 80035e4:	209b      	movs	r0, #155	; 0x9b
 80035e6:	f7fe fed1 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,"%d",minB);
 80035ea:	4b34      	ldr	r3, [pc, #208]	; (80036bc <DearLCD+0x278>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	4924      	ldr	r1, [pc, #144]	; (8003684 <DearLCD+0x240>)
 80035f2:	4821      	ldr	r0, [pc, #132]	; (8003678 <DearLCD+0x234>)
 80035f4:	f000 fb66 	bl	8003cc4 <siprintf>
		lcd_send_string(buffer);
 80035f8:	481f      	ldr	r0, [pc, #124]	; (8003678 <DearLCD+0x234>)
 80035fa:	f7fe ff37 	bl	800246c <lcd_send_string>
		lcd_send_cmd(0x9d);
 80035fe:	209d      	movs	r0, #157	; 0x9d
 8003600:	f7fe fec4 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,":");
 8003604:	4a1c      	ldr	r2, [pc, #112]	; (8003678 <DearLCD+0x234>)
 8003606:	4b20      	ldr	r3, [pc, #128]	; (8003688 <DearLCD+0x244>)
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	8013      	strh	r3, [r2, #0]
		lcd_send_string(buffer);
 800360c:	481a      	ldr	r0, [pc, #104]	; (8003678 <DearLCD+0x234>)
 800360e:	f7fe ff2d 	bl	800246c <lcd_send_string>
		lcd_send_cmd(0x9e);
 8003612:	209e      	movs	r0, #158	; 0x9e
 8003614:	f7fe feba 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,"%d",secB);
 8003618:	4b29      	ldr	r3, [pc, #164]	; (80036c0 <DearLCD+0x27c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	4919      	ldr	r1, [pc, #100]	; (8003684 <DearLCD+0x240>)
 8003620:	4815      	ldr	r0, [pc, #84]	; (8003678 <DearLCD+0x234>)
 8003622:	f000 fb4f 	bl	8003cc4 <siprintf>
		lcd_send_string(buffer);
 8003626:	4814      	ldr	r0, [pc, #80]	; (8003678 <DearLCD+0x234>)
 8003628:	f7fe ff20 	bl	800246c <lcd_send_string>
		lcd_send_cmd(0xa0);
 800362c:	20a0      	movs	r0, #160	; 0xa0
 800362e:	f7fe fead 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,":");
 8003632:	4a11      	ldr	r2, [pc, #68]	; (8003678 <DearLCD+0x234>)
 8003634:	4b14      	ldr	r3, [pc, #80]	; (8003688 <DearLCD+0x244>)
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	8013      	strh	r3, [r2, #0]
		lcd_send_string(buffer);
 800363a:	480f      	ldr	r0, [pc, #60]	; (8003678 <DearLCD+0x234>)
 800363c:	f7fe ff16 	bl	800246c <lcd_send_string>
		lcd_send_cmd(0xa1);
 8003640:	20a1      	movs	r0, #161	; 0xa1
 8003642:	f7fe fea3 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,"%d",milisecB);
 8003646:	4b1f      	ldr	r3, [pc, #124]	; (80036c4 <DearLCD+0x280>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	490d      	ldr	r1, [pc, #52]	; (8003684 <DearLCD+0x240>)
 800364e:	480a      	ldr	r0, [pc, #40]	; (8003678 <DearLCD+0x234>)
 8003650:	f000 fb38 	bl	8003cc4 <siprintf>
		lcd_send_string(buffer);
 8003654:	4808      	ldr	r0, [pc, #32]	; (8003678 <DearLCD+0x234>)
 8003656:	f7fe ff09 	bl	800246c <lcd_send_string>

		lcd_send_cmd(0xa4);
 800365a:	20a4      	movs	r0, #164	; 0xa4
 800365c:	f7fe fe96 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,"Lap%d",lapB);
 8003660:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <DearLCD+0x270>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	4911      	ldr	r1, [pc, #68]	; (80036ac <DearLCD+0x268>)
 8003668:	4803      	ldr	r0, [pc, #12]	; (8003678 <DearLCD+0x234>)
 800366a:	f000 fb2b 	bl	8003cc4 <siprintf>
		lcd_send_string(buffer);
 800366e:	4802      	ldr	r0, [pc, #8]	; (8003678 <DearLCD+0x234>)
 8003670:	f7fe fefc 	bl	800246c <lcd_send_string>
 8003674:	e041      	b.n	80036fa <DearLCD+0x2b6>
 8003676:	bf00      	nop
 8003678:	2000025c 	.word	0x2000025c
 800367c:	08004608 	.word	0x08004608
 8003680:	200000b4 	.word	0x200000b4
 8003684:	0800464c 	.word	0x0800464c
 8003688:	0800461c 	.word	0x0800461c
 800368c:	200000b0 	.word	0x200000b0
 8003690:	200000ac 	.word	0x200000ac
 8003694:	200000bc 	.word	0x200000bc
 8003698:	20000008 	.word	0x20000008
 800369c:	08004620 	.word	0x08004620
 80036a0:	20000284 	.word	0x20000284
 80036a4:	20000240 	.word	0x20000240
 80036a8:	2000027c 	.word	0x2000027c
 80036ac:	08004634 	.word	0x08004634
 80036b0:	08004650 	.word	0x08004650
 80036b4:	200000c0 	.word	0x200000c0
 80036b8:	0800463c 	.word	0x0800463c
 80036bc:	20000278 	.word	0x20000278
 80036c0:	20000274 	.word	0x20000274
 80036c4:	20000258 	.word	0x20000258
	}
	else if(lapB==totlap){
 80036c8:	4b51      	ldr	r3, [pc, #324]	; (8003810 <DearLCD+0x3cc>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b51      	ldr	r3, [pc, #324]	; (8003814 <DearLCD+0x3d0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d112      	bne.n	80036fa <DearLCD+0x2b6>
		lcd_send_cmd(0x94);
 80036d4:	2094      	movs	r0, #148	; 0x94
 80036d6:	f7fe fe59 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,"TrackB = FINISH YEAY");
 80036da:	4a4f      	ldr	r2, [pc, #316]	; (8003818 <DearLCD+0x3d4>)
 80036dc:	4b4f      	ldr	r3, [pc, #316]	; (800381c <DearLCD+0x3d8>)
 80036de:	4615      	mov	r5, r2
 80036e0:	461c      	mov	r4, r3
 80036e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036e4:	6028      	str	r0, [r5, #0]
 80036e6:	6069      	str	r1, [r5, #4]
 80036e8:	60aa      	str	r2, [r5, #8]
 80036ea:	60eb      	str	r3, [r5, #12]
 80036ec:	6820      	ldr	r0, [r4, #0]
 80036ee:	6128      	str	r0, [r5, #16]
 80036f0:	7923      	ldrb	r3, [r4, #4]
 80036f2:	752b      	strb	r3, [r5, #20]
		lcd_send_string(buffer);
 80036f4:	4848      	ldr	r0, [pc, #288]	; (8003818 <DearLCD+0x3d4>)
 80036f6:	f7fe feb9 	bl	800246c <lcd_send_string>
	}
	//TrackC
	if(lapC<totlap){
 80036fa:	4b49      	ldr	r3, [pc, #292]	; (8003820 <DearLCD+0x3dc>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b45      	ldr	r3, [pc, #276]	; (8003814 <DearLCD+0x3d0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d253      	bcs.n	80037ae <DearLCD+0x36a>
		lcd_send_cmd(0xd4);
 8003706:	20d4      	movs	r0, #212	; 0xd4
 8003708:	f7fe fe40 	bl	800238c <lcd_send_cmd>
		//sprintf(buffer,"TrackC=%d%d:%d%d:%d%d Lap%d",(minC/10),(minC%10),(secC/10),(secC%10),(milisecB/10),(milisecB%10),(lapC));
//		sprintf(buffer,"TrackC=%d:%d:%d",minC,secC,milisecC);
//		lcd_send_string(buffer);
		sprintf(buffer,"TrackC=");
 800370c:	4a42      	ldr	r2, [pc, #264]	; (8003818 <DearLCD+0x3d4>)
 800370e:	4b45      	ldr	r3, [pc, #276]	; (8003824 <DearLCD+0x3e0>)
 8003710:	cb03      	ldmia	r3!, {r0, r1}
 8003712:	6010      	str	r0, [r2, #0]
 8003714:	6051      	str	r1, [r2, #4]
		lcd_send_string(buffer);
 8003716:	4840      	ldr	r0, [pc, #256]	; (8003818 <DearLCD+0x3d4>)
 8003718:	f7fe fea8 	bl	800246c <lcd_send_string>
		lcd_send_cmd(0xdb);
 800371c:	20db      	movs	r0, #219	; 0xdb
 800371e:	f7fe fe35 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,"%d",minC);
 8003722:	4b41      	ldr	r3, [pc, #260]	; (8003828 <DearLCD+0x3e4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	4940      	ldr	r1, [pc, #256]	; (800382c <DearLCD+0x3e8>)
 800372a:	483b      	ldr	r0, [pc, #236]	; (8003818 <DearLCD+0x3d4>)
 800372c:	f000 faca 	bl	8003cc4 <siprintf>
		lcd_send_string(buffer);
 8003730:	4839      	ldr	r0, [pc, #228]	; (8003818 <DearLCD+0x3d4>)
 8003732:	f7fe fe9b 	bl	800246c <lcd_send_string>
		lcd_send_cmd(0xdd);
 8003736:	20dd      	movs	r0, #221	; 0xdd
 8003738:	f7fe fe28 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,":");
 800373c:	4a36      	ldr	r2, [pc, #216]	; (8003818 <DearLCD+0x3d4>)
 800373e:	4b3c      	ldr	r3, [pc, #240]	; (8003830 <DearLCD+0x3ec>)
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	8013      	strh	r3, [r2, #0]
		lcd_send_string(buffer);
 8003744:	4834      	ldr	r0, [pc, #208]	; (8003818 <DearLCD+0x3d4>)
 8003746:	f7fe fe91 	bl	800246c <lcd_send_string>
		lcd_send_cmd(0xde);
 800374a:	20de      	movs	r0, #222	; 0xde
 800374c:	f7fe fe1e 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,"%d",secC);
 8003750:	4b38      	ldr	r3, [pc, #224]	; (8003834 <DearLCD+0x3f0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	4935      	ldr	r1, [pc, #212]	; (800382c <DearLCD+0x3e8>)
 8003758:	482f      	ldr	r0, [pc, #188]	; (8003818 <DearLCD+0x3d4>)
 800375a:	f000 fab3 	bl	8003cc4 <siprintf>
		lcd_send_string(buffer);
 800375e:	482e      	ldr	r0, [pc, #184]	; (8003818 <DearLCD+0x3d4>)
 8003760:	f7fe fe84 	bl	800246c <lcd_send_string>
		lcd_send_cmd(0xe0);
 8003764:	20e0      	movs	r0, #224	; 0xe0
 8003766:	f7fe fe11 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,":");
 800376a:	4a2b      	ldr	r2, [pc, #172]	; (8003818 <DearLCD+0x3d4>)
 800376c:	4b30      	ldr	r3, [pc, #192]	; (8003830 <DearLCD+0x3ec>)
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	8013      	strh	r3, [r2, #0]
		lcd_send_string(buffer);
 8003772:	4829      	ldr	r0, [pc, #164]	; (8003818 <DearLCD+0x3d4>)
 8003774:	f7fe fe7a 	bl	800246c <lcd_send_string>
		lcd_send_cmd(0xe1);
 8003778:	20e1      	movs	r0, #225	; 0xe1
 800377a:	f7fe fe07 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,"%d",milisecC);
 800377e:	4b2e      	ldr	r3, [pc, #184]	; (8003838 <DearLCD+0x3f4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	4929      	ldr	r1, [pc, #164]	; (800382c <DearLCD+0x3e8>)
 8003786:	4824      	ldr	r0, [pc, #144]	; (8003818 <DearLCD+0x3d4>)
 8003788:	f000 fa9c 	bl	8003cc4 <siprintf>
		lcd_send_string(buffer);
 800378c:	4822      	ldr	r0, [pc, #136]	; (8003818 <DearLCD+0x3d4>)
 800378e:	f7fe fe6d 	bl	800246c <lcd_send_string>

		lcd_send_cmd(0xe4);
 8003792:	20e4      	movs	r0, #228	; 0xe4
 8003794:	f7fe fdfa 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,"Lap%d",lapC);
 8003798:	4b21      	ldr	r3, [pc, #132]	; (8003820 <DearLCD+0x3dc>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	4927      	ldr	r1, [pc, #156]	; (800383c <DearLCD+0x3f8>)
 80037a0:	481d      	ldr	r0, [pc, #116]	; (8003818 <DearLCD+0x3d4>)
 80037a2:	f000 fa8f 	bl	8003cc4 <siprintf>
		lcd_send_string(buffer);
 80037a6:	481c      	ldr	r0, [pc, #112]	; (8003818 <DearLCD+0x3d4>)
 80037a8:	f7fe fe60 	bl	800246c <lcd_send_string>
 80037ac:	e018      	b.n	80037e0 <DearLCD+0x39c>
	}
	else if(lapC==totlap){
 80037ae:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <DearLCD+0x3dc>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <DearLCD+0x3d0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d112      	bne.n	80037e0 <DearLCD+0x39c>
		lcd_send_cmd(0xd4);
 80037ba:	20d4      	movs	r0, #212	; 0xd4
 80037bc:	f7fe fde6 	bl	800238c <lcd_send_cmd>
		sprintf(buffer,"TrackC = FINISH YEAY");
 80037c0:	4a15      	ldr	r2, [pc, #84]	; (8003818 <DearLCD+0x3d4>)
 80037c2:	4b1f      	ldr	r3, [pc, #124]	; (8003840 <DearLCD+0x3fc>)
 80037c4:	4615      	mov	r5, r2
 80037c6:	461c      	mov	r4, r3
 80037c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ca:	6028      	str	r0, [r5, #0]
 80037cc:	6069      	str	r1, [r5, #4]
 80037ce:	60aa      	str	r2, [r5, #8]
 80037d0:	60eb      	str	r3, [r5, #12]
 80037d2:	6820      	ldr	r0, [r4, #0]
 80037d4:	6128      	str	r0, [r5, #16]
 80037d6:	7923      	ldrb	r3, [r4, #4]
 80037d8:	752b      	strb	r3, [r5, #20]
		lcd_send_string(buffer);
 80037da:	480f      	ldr	r0, [pc, #60]	; (8003818 <DearLCD+0x3d4>)
 80037dc:	f7fe fe46 	bl	800246c <lcd_send_string>
	}

	///////////////////////////////////////////////////////////////////STOP Timer2
	if(lapA>=totlap && lapB>=totlap && lapC>=totlap)HAL_TIM_Base_Stop_IT(&htim2);
 80037e0:	4b18      	ldr	r3, [pc, #96]	; (8003844 <DearLCD+0x400>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <DearLCD+0x3d0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d30e      	bcc.n	800380a <DearLCD+0x3c6>
 80037ec:	4b08      	ldr	r3, [pc, #32]	; (8003810 <DearLCD+0x3cc>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b08      	ldr	r3, [pc, #32]	; (8003814 <DearLCD+0x3d0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d308      	bcc.n	800380a <DearLCD+0x3c6>
 80037f8:	4b09      	ldr	r3, [pc, #36]	; (8003820 <DearLCD+0x3dc>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b05      	ldr	r3, [pc, #20]	; (8003814 <DearLCD+0x3d0>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d302      	bcc.n	800380a <DearLCD+0x3c6>
 8003804:	4810      	ldr	r0, [pc, #64]	; (8003848 <DearLCD+0x404>)
 8003806:	f7fe f85b 	bl	80018c0 <HAL_TIM_Base_Stop_IT>
}
 800380a:	bf00      	nop
 800380c:	bdb0      	pop	{r4, r5, r7, pc}
 800380e:	bf00      	nop
 8003810:	200000c0 	.word	0x200000c0
 8003814:	20000008 	.word	0x20000008
 8003818:	2000025c 	.word	0x2000025c
 800381c:	08004668 	.word	0x08004668
 8003820:	200000c4 	.word	0x200000c4
 8003824:	08004644 	.word	0x08004644
 8003828:	20000244 	.word	0x20000244
 800382c:	0800464c 	.word	0x0800464c
 8003830:	0800461c 	.word	0x0800461c
 8003834:	20000280 	.word	0x20000280
 8003838:	2000023c 	.word	0x2000023c
 800383c:	08004634 	.word	0x08004634
 8003840:	08004680 	.word	0x08004680
 8003844:	200000bc 	.word	0x200000bc
 8003848:	200001fc 	.word	0x200001fc

0800384c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385c:	d129      	bne.n	80038b2 <HAL_TIM_PeriodElapsedCallback+0x66>
		milisec++;
 800385e:	4b1f      	ldr	r3, [pc, #124]	; (80038dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3301      	adds	r3, #1
 8003864:	4a1d      	ldr	r2, [pc, #116]	; (80038dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003866:	6013      	str	r3, [r2, #0]
		if(milisec>99){
 8003868:	4b1c      	ldr	r3, [pc, #112]	; (80038dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b63      	cmp	r3, #99	; 0x63
 800386e:	d907      	bls.n	8003880 <HAL_TIM_PeriodElapsedCallback+0x34>
			sec++;
 8003870:	4b1b      	ldr	r3, [pc, #108]	; (80038e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3301      	adds	r3, #1
 8003876:	4a1a      	ldr	r2, [pc, #104]	; (80038e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003878:	6013      	str	r3, [r2, #0]
			milisec=0;
 800387a:	4b18      	ldr	r3, [pc, #96]	; (80038dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
		}
		if(sec>60){
 8003880:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b3c      	cmp	r3, #60	; 0x3c
 8003886:	d907      	bls.n	8003898 <HAL_TIM_PeriodElapsedCallback+0x4c>
			min++;
 8003888:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3301      	adds	r3, #1
 800388e:	4a15      	ldr	r2, [pc, #84]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003890:	6013      	str	r3, [r2, #0]
			sec=0;
 8003892:	4b13      	ldr	r3, [pc, #76]	; (80038e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
		}
		if(min>60){
 8003898:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b3c      	cmp	r3, #60	; 0x3c
 800389e:	d908      	bls.n	80038b2 <HAL_TIM_PeriodElapsedCallback+0x66>
			milisec=0;
 80038a0:	4b0e      	ldr	r3, [pc, #56]	; (80038dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
			sec=0;
 80038a6:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
			min=0;
 80038ac:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
		}
	}

	if(htim->Instance==TIM4){
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d10b      	bne.n	80038d4 <HAL_TIM_PeriodElapsedCallback+0x88>

		///////////////////////////////Baca Tombol Dan Sensor
		PBOn();
 80038bc:	f7fe ff84 	bl	80027c8 <PBOn>
		PBReset();
 80038c0:	f7ff f81e 	bl	8002900 <PBReset>
		Sensor1();
 80038c4:	f7ff f8fa 	bl	8002abc <Sensor1>
		Sensor2();
 80038c8:	f7ff fa58 	bl	8002d7c <Sensor2>
		Sensor3();
 80038cc:	f7ff fbb8 	bl	8003040 <Sensor3>

		///////////////////////////////Kirim LCD
		DearLCD();
 80038d0:	f7ff fdb8 	bl	8003444 <DearLCD>
	}
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	200000ac 	.word	0x200000ac
 80038e0:	200000b0 	.word	0x200000b0
 80038e4:	200000b4 	.word	0x200000b4
 80038e8:	40000800 	.word	0x40000800

080038ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80038f2:	4b15      	ldr	r3, [pc, #84]	; (8003948 <HAL_MspInit+0x5c>)
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	4a14      	ldr	r2, [pc, #80]	; (8003948 <HAL_MspInit+0x5c>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	6193      	str	r3, [r2, #24]
 80038fe:	4b12      	ldr	r3, [pc, #72]	; (8003948 <HAL_MspInit+0x5c>)
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800390a:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <HAL_MspInit+0x5c>)
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	4a0e      	ldr	r2, [pc, #56]	; (8003948 <HAL_MspInit+0x5c>)
 8003910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003914:	61d3      	str	r3, [r2, #28]
 8003916:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <HAL_MspInit+0x5c>)
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391e:	607b      	str	r3, [r7, #4]
 8003920:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003922:	4b0a      	ldr	r3, [pc, #40]	; (800394c <HAL_MspInit+0x60>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	4a04      	ldr	r2, [pc, #16]	; (800394c <HAL_MspInit+0x60>)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800393e:	bf00      	nop
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr
 8003948:	40021000 	.word	0x40021000
 800394c:	40010000 	.word	0x40010000

08003950 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003958:	f107 0310 	add.w	r3, r7, #16
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a16      	ldr	r2, [pc, #88]	; (80039c4 <HAL_I2C_MspInit+0x74>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d124      	bne.n	80039ba <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003970:	4b15      	ldr	r3, [pc, #84]	; (80039c8 <HAL_I2C_MspInit+0x78>)
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <HAL_I2C_MspInit+0x78>)
 8003976:	f043 0308 	orr.w	r3, r3, #8
 800397a:	6193      	str	r3, [r2, #24]
 800397c:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <HAL_I2C_MspInit+0x78>)
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003988:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800398c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800398e:	2312      	movs	r3, #18
 8003990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003992:	2303      	movs	r3, #3
 8003994:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003996:	f107 0310 	add.w	r3, r7, #16
 800399a:	4619      	mov	r1, r3
 800399c:	480b      	ldr	r0, [pc, #44]	; (80039cc <HAL_I2C_MspInit+0x7c>)
 800399e:	f7fc fd61 	bl	8000464 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80039a2:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <HAL_I2C_MspInit+0x78>)
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	4a08      	ldr	r2, [pc, #32]	; (80039c8 <HAL_I2C_MspInit+0x78>)
 80039a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039ac:	61d3      	str	r3, [r2, #28]
 80039ae:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <HAL_I2C_MspInit+0x78>)
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80039ba:	bf00      	nop
 80039bc:	3720      	adds	r7, #32
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40005800 	.word	0x40005800
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40010c00 	.word	0x40010c00

080039d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e0:	d114      	bne.n	8003a0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039e2:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <HAL_TIM_Base_MspInit+0x78>)
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	4a18      	ldr	r2, [pc, #96]	; (8003a48 <HAL_TIM_Base_MspInit+0x78>)
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	61d3      	str	r3, [r2, #28]
 80039ee:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <HAL_TIM_Base_MspInit+0x78>)
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80039fa:	2200      	movs	r2, #0
 80039fc:	2100      	movs	r1, #0
 80039fe:	201c      	movs	r0, #28
 8003a00:	f7fc fcdd 	bl	80003be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a04:	201c      	movs	r0, #28
 8003a06:	f7fc fcf6 	bl	80003f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003a0a:	e018      	b.n	8003a3e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0e      	ldr	r2, [pc, #56]	; (8003a4c <HAL_TIM_Base_MspInit+0x7c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d113      	bne.n	8003a3e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a16:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <HAL_TIM_Base_MspInit+0x78>)
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	4a0b      	ldr	r2, [pc, #44]	; (8003a48 <HAL_TIM_Base_MspInit+0x78>)
 8003a1c:	f043 0304 	orr.w	r3, r3, #4
 8003a20:	61d3      	str	r3, [r2, #28]
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <HAL_TIM_Base_MspInit+0x78>)
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	60bb      	str	r3, [r7, #8]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2100      	movs	r1, #0
 8003a32:	201e      	movs	r0, #30
 8003a34:	f7fc fcc3 	bl	80003be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003a38:	201e      	movs	r0, #30
 8003a3a:	f7fc fcdc 	bl	80003f6 <HAL_NVIC_EnableIRQ>
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40000800 	.word	0x40000800

08003a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a58:	f107 0310 	add.w	r3, r7, #16
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	605a      	str	r2, [r3, #4]
 8003a62:	609a      	str	r2, [r3, #8]
 8003a64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <HAL_UART_MspInit+0x8c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d131      	bne.n	8003ad4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a70:	4b1b      	ldr	r3, [pc, #108]	; (8003ae0 <HAL_UART_MspInit+0x90>)
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	4a1a      	ldr	r2, [pc, #104]	; (8003ae0 <HAL_UART_MspInit+0x90>)
 8003a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a7a:	6193      	str	r3, [r2, #24]
 8003a7c:	4b18      	ldr	r3, [pc, #96]	; (8003ae0 <HAL_UART_MspInit+0x90>)
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a88:	4b15      	ldr	r3, [pc, #84]	; (8003ae0 <HAL_UART_MspInit+0x90>)
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	4a14      	ldr	r2, [pc, #80]	; (8003ae0 <HAL_UART_MspInit+0x90>)
 8003a8e:	f043 0304 	orr.w	r3, r3, #4
 8003a92:	6193      	str	r3, [r2, #24]
 8003a94:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <HAL_UART_MspInit+0x90>)
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003aa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aae:	f107 0310 	add.w	r3, r7, #16
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	480b      	ldr	r0, [pc, #44]	; (8003ae4 <HAL_UART_MspInit+0x94>)
 8003ab6:	f7fc fcd5 	bl	8000464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac8:	f107 0310 	add.w	r3, r7, #16
 8003acc:	4619      	mov	r1, r3
 8003ace:	4805      	ldr	r0, [pc, #20]	; (8003ae4 <HAL_UART_MspInit+0x94>)
 8003ad0:	f7fc fcc8 	bl	8000464 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003ad4:	bf00      	nop
 8003ad6:	3720      	adds	r7, #32
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40013800 	.word	0x40013800
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	40010800 	.word	0x40010800

08003ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003af8:	e7fe      	b.n	8003af8 <HardFault_Handler+0x4>

08003afa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003afa:	b480      	push	{r7}
 8003afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003afe:	e7fe      	b.n	8003afe <MemManage_Handler+0x4>

08003b00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b04:	e7fe      	b.n	8003b04 <BusFault_Handler+0x4>

08003b06 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b06:	b480      	push	{r7}
 8003b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b0a:	e7fe      	b.n	8003b0a <UsageFault_Handler+0x4>

08003b0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b10:	bf00      	nop
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr

08003b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b28:	bf00      	nop
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b34:	f7fc fb50 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b38:	bf00      	nop
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b40:	4802      	ldr	r0, [pc, #8]	; (8003b4c <TIM2_IRQHandler+0x10>)
 8003b42:	f7fd fee7 	bl	8001914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	200001fc 	.word	0x200001fc

08003b50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003b54:	4802      	ldr	r0, [pc, #8]	; (8003b60 <TIM4_IRQHandler+0x10>)
 8003b56:	f7fd fedd 	bl	8001914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000128 	.word	0x20000128

08003b64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003b6c:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <_sbrk+0x50>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <_sbrk+0x16>
		heap_end = &end;
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <_sbrk+0x50>)
 8003b76:	4a10      	ldr	r2, [pc, #64]	; (8003bb8 <_sbrk+0x54>)
 8003b78:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003b7a:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <_sbrk+0x50>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <_sbrk+0x50>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4413      	add	r3, r2
 8003b88:	466a      	mov	r2, sp
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d907      	bls.n	8003b9e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003b8e:	f000 f86f 	bl	8003c70 <__errno>
 8003b92:	4602      	mov	r2, r0
 8003b94:	230c      	movs	r3, #12
 8003b96:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003b98:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9c:	e006      	b.n	8003bac <_sbrk+0x48>
	}

	heap_end += incr;
 8003b9e:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <_sbrk+0x50>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	4a03      	ldr	r2, [pc, #12]	; (8003bb4 <_sbrk+0x50>)
 8003ba8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20000118 	.word	0x20000118
 8003bb8:	20000290 	.word	0x20000290

08003bbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003bc0:	4b15      	ldr	r3, [pc, #84]	; (8003c18 <SystemInit+0x5c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a14      	ldr	r2, [pc, #80]	; (8003c18 <SystemInit+0x5c>)
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003bcc:	4b12      	ldr	r3, [pc, #72]	; (8003c18 <SystemInit+0x5c>)
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	4911      	ldr	r1, [pc, #68]	; (8003c18 <SystemInit+0x5c>)
 8003bd2:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <SystemInit+0x60>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003bd8:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <SystemInit+0x5c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a0e      	ldr	r2, [pc, #56]	; (8003c18 <SystemInit+0x5c>)
 8003bde:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003be8:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <SystemInit+0x5c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a0a      	ldr	r2, [pc, #40]	; (8003c18 <SystemInit+0x5c>)
 8003bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003bf4:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <SystemInit+0x5c>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	4a07      	ldr	r2, [pc, #28]	; (8003c18 <SystemInit+0x5c>)
 8003bfa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003bfe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <SystemInit+0x5c>)
 8003c02:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003c06:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <SystemInit+0x64>)
 8003c0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c0e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	f8ff0000 	.word	0xf8ff0000
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003c24:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003c26:	e003      	b.n	8003c30 <LoopCopyDataInit>

08003c28 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003c2a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003c2c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003c2e:	3104      	adds	r1, #4

08003c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003c30:	480a      	ldr	r0, [pc, #40]	; (8003c5c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003c32:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003c34:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003c36:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003c38:	d3f6      	bcc.n	8003c28 <CopyDataInit>
  ldr r2, =_sbss
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003c3c:	e002      	b.n	8003c44 <LoopFillZerobss>

08003c3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003c3e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003c40:	f842 3b04 	str.w	r3, [r2], #4

08003c44 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003c44:	4b08      	ldr	r3, [pc, #32]	; (8003c68 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003c46:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003c48:	d3f9      	bcc.n	8003c3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c4a:	f7ff ffb7 	bl	8003bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c4e:	f000 f815 	bl	8003c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c52:	f7fe fda7 	bl	80027a4 <main>
  bx lr
 8003c56:	4770      	bx	lr
  ldr r3, =_sidata
 8003c58:	080046ec 	.word	0x080046ec
  ldr r0, =_sdata
 8003c5c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003c60:	20000090 	.word	0x20000090
  ldr r2, =_sbss
 8003c64:	20000090 	.word	0x20000090
  ldr r3, = _ebss
 8003c68:	2000028c 	.word	0x2000028c

08003c6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c6c:	e7fe      	b.n	8003c6c <ADC1_2_IRQHandler>
	...

08003c70 <__errno>:
 8003c70:	4b01      	ldr	r3, [pc, #4]	; (8003c78 <__errno+0x8>)
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	2000002c 	.word	0x2000002c

08003c7c <__libc_init_array>:
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	2500      	movs	r5, #0
 8003c80:	4e0c      	ldr	r6, [pc, #48]	; (8003cb4 <__libc_init_array+0x38>)
 8003c82:	4c0d      	ldr	r4, [pc, #52]	; (8003cb8 <__libc_init_array+0x3c>)
 8003c84:	1ba4      	subs	r4, r4, r6
 8003c86:	10a4      	asrs	r4, r4, #2
 8003c88:	42a5      	cmp	r5, r4
 8003c8a:	d109      	bne.n	8003ca0 <__libc_init_array+0x24>
 8003c8c:	f000 fc2c 	bl	80044e8 <_init>
 8003c90:	2500      	movs	r5, #0
 8003c92:	4e0a      	ldr	r6, [pc, #40]	; (8003cbc <__libc_init_array+0x40>)
 8003c94:	4c0a      	ldr	r4, [pc, #40]	; (8003cc0 <__libc_init_array+0x44>)
 8003c96:	1ba4      	subs	r4, r4, r6
 8003c98:	10a4      	asrs	r4, r4, #2
 8003c9a:	42a5      	cmp	r5, r4
 8003c9c:	d105      	bne.n	8003caa <__libc_init_array+0x2e>
 8003c9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ca0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ca4:	4798      	blx	r3
 8003ca6:	3501      	adds	r5, #1
 8003ca8:	e7ee      	b.n	8003c88 <__libc_init_array+0xc>
 8003caa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cae:	4798      	blx	r3
 8003cb0:	3501      	adds	r5, #1
 8003cb2:	e7f2      	b.n	8003c9a <__libc_init_array+0x1e>
 8003cb4:	080046e4 	.word	0x080046e4
 8003cb8:	080046e4 	.word	0x080046e4
 8003cbc:	080046e4 	.word	0x080046e4
 8003cc0:	080046e8 	.word	0x080046e8

08003cc4 <siprintf>:
 8003cc4:	b40e      	push	{r1, r2, r3}
 8003cc6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cca:	b500      	push	{lr}
 8003ccc:	b09c      	sub	sp, #112	; 0x70
 8003cce:	ab1d      	add	r3, sp, #116	; 0x74
 8003cd0:	9002      	str	r0, [sp, #8]
 8003cd2:	9006      	str	r0, [sp, #24]
 8003cd4:	9107      	str	r1, [sp, #28]
 8003cd6:	9104      	str	r1, [sp, #16]
 8003cd8:	4808      	ldr	r0, [pc, #32]	; (8003cfc <siprintf+0x38>)
 8003cda:	4909      	ldr	r1, [pc, #36]	; (8003d00 <siprintf+0x3c>)
 8003cdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ce0:	9105      	str	r1, [sp, #20]
 8003ce2:	6800      	ldr	r0, [r0, #0]
 8003ce4:	a902      	add	r1, sp, #8
 8003ce6:	9301      	str	r3, [sp, #4]
 8003ce8:	f000 f866 	bl	8003db8 <_svfiprintf_r>
 8003cec:	2200      	movs	r2, #0
 8003cee:	9b02      	ldr	r3, [sp, #8]
 8003cf0:	701a      	strb	r2, [r3, #0]
 8003cf2:	b01c      	add	sp, #112	; 0x70
 8003cf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cf8:	b003      	add	sp, #12
 8003cfa:	4770      	bx	lr
 8003cfc:	2000002c 	.word	0x2000002c
 8003d00:	ffff0208 	.word	0xffff0208

08003d04 <__ssputs_r>:
 8003d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d08:	688e      	ldr	r6, [r1, #8]
 8003d0a:	4682      	mov	sl, r0
 8003d0c:	429e      	cmp	r6, r3
 8003d0e:	460c      	mov	r4, r1
 8003d10:	4690      	mov	r8, r2
 8003d12:	4699      	mov	r9, r3
 8003d14:	d837      	bhi.n	8003d86 <__ssputs_r+0x82>
 8003d16:	898a      	ldrh	r2, [r1, #12]
 8003d18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d1c:	d031      	beq.n	8003d82 <__ssputs_r+0x7e>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	6825      	ldr	r5, [r4, #0]
 8003d22:	6909      	ldr	r1, [r1, #16]
 8003d24:	1a6f      	subs	r7, r5, r1
 8003d26:	6965      	ldr	r5, [r4, #20]
 8003d28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d2c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003d30:	f109 0301 	add.w	r3, r9, #1
 8003d34:	443b      	add	r3, r7
 8003d36:	429d      	cmp	r5, r3
 8003d38:	bf38      	it	cc
 8003d3a:	461d      	movcc	r5, r3
 8003d3c:	0553      	lsls	r3, r2, #21
 8003d3e:	d530      	bpl.n	8003da2 <__ssputs_r+0x9e>
 8003d40:	4629      	mov	r1, r5
 8003d42:	f000 fb37 	bl	80043b4 <_malloc_r>
 8003d46:	4606      	mov	r6, r0
 8003d48:	b950      	cbnz	r0, 8003d60 <__ssputs_r+0x5c>
 8003d4a:	230c      	movs	r3, #12
 8003d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d50:	f8ca 3000 	str.w	r3, [sl]
 8003d54:	89a3      	ldrh	r3, [r4, #12]
 8003d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d5a:	81a3      	strh	r3, [r4, #12]
 8003d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d60:	463a      	mov	r2, r7
 8003d62:	6921      	ldr	r1, [r4, #16]
 8003d64:	f000 fab6 	bl	80042d4 <memcpy>
 8003d68:	89a3      	ldrh	r3, [r4, #12]
 8003d6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d72:	81a3      	strh	r3, [r4, #12]
 8003d74:	6126      	str	r6, [r4, #16]
 8003d76:	443e      	add	r6, r7
 8003d78:	6026      	str	r6, [r4, #0]
 8003d7a:	464e      	mov	r6, r9
 8003d7c:	6165      	str	r5, [r4, #20]
 8003d7e:	1bed      	subs	r5, r5, r7
 8003d80:	60a5      	str	r5, [r4, #8]
 8003d82:	454e      	cmp	r6, r9
 8003d84:	d900      	bls.n	8003d88 <__ssputs_r+0x84>
 8003d86:	464e      	mov	r6, r9
 8003d88:	4632      	mov	r2, r6
 8003d8a:	4641      	mov	r1, r8
 8003d8c:	6820      	ldr	r0, [r4, #0]
 8003d8e:	f000 faac 	bl	80042ea <memmove>
 8003d92:	68a3      	ldr	r3, [r4, #8]
 8003d94:	2000      	movs	r0, #0
 8003d96:	1b9b      	subs	r3, r3, r6
 8003d98:	60a3      	str	r3, [r4, #8]
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	441e      	add	r6, r3
 8003d9e:	6026      	str	r6, [r4, #0]
 8003da0:	e7dc      	b.n	8003d5c <__ssputs_r+0x58>
 8003da2:	462a      	mov	r2, r5
 8003da4:	f000 fb60 	bl	8004468 <_realloc_r>
 8003da8:	4606      	mov	r6, r0
 8003daa:	2800      	cmp	r0, #0
 8003dac:	d1e2      	bne.n	8003d74 <__ssputs_r+0x70>
 8003dae:	6921      	ldr	r1, [r4, #16]
 8003db0:	4650      	mov	r0, sl
 8003db2:	f000 fab3 	bl	800431c <_free_r>
 8003db6:	e7c8      	b.n	8003d4a <__ssputs_r+0x46>

08003db8 <_svfiprintf_r>:
 8003db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dbc:	461d      	mov	r5, r3
 8003dbe:	898b      	ldrh	r3, [r1, #12]
 8003dc0:	b09d      	sub	sp, #116	; 0x74
 8003dc2:	061f      	lsls	r7, r3, #24
 8003dc4:	4680      	mov	r8, r0
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	4616      	mov	r6, r2
 8003dca:	d50f      	bpl.n	8003dec <_svfiprintf_r+0x34>
 8003dcc:	690b      	ldr	r3, [r1, #16]
 8003dce:	b96b      	cbnz	r3, 8003dec <_svfiprintf_r+0x34>
 8003dd0:	2140      	movs	r1, #64	; 0x40
 8003dd2:	f000 faef 	bl	80043b4 <_malloc_r>
 8003dd6:	6020      	str	r0, [r4, #0]
 8003dd8:	6120      	str	r0, [r4, #16]
 8003dda:	b928      	cbnz	r0, 8003de8 <_svfiprintf_r+0x30>
 8003ddc:	230c      	movs	r3, #12
 8003dde:	f8c8 3000 	str.w	r3, [r8]
 8003de2:	f04f 30ff 	mov.w	r0, #4294967295
 8003de6:	e0c8      	b.n	8003f7a <_svfiprintf_r+0x1c2>
 8003de8:	2340      	movs	r3, #64	; 0x40
 8003dea:	6163      	str	r3, [r4, #20]
 8003dec:	2300      	movs	r3, #0
 8003dee:	9309      	str	r3, [sp, #36]	; 0x24
 8003df0:	2320      	movs	r3, #32
 8003df2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003df6:	2330      	movs	r3, #48	; 0x30
 8003df8:	f04f 0b01 	mov.w	fp, #1
 8003dfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e00:	9503      	str	r5, [sp, #12]
 8003e02:	4637      	mov	r7, r6
 8003e04:	463d      	mov	r5, r7
 8003e06:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e0a:	b10b      	cbz	r3, 8003e10 <_svfiprintf_r+0x58>
 8003e0c:	2b25      	cmp	r3, #37	; 0x25
 8003e0e:	d13e      	bne.n	8003e8e <_svfiprintf_r+0xd6>
 8003e10:	ebb7 0a06 	subs.w	sl, r7, r6
 8003e14:	d00b      	beq.n	8003e2e <_svfiprintf_r+0x76>
 8003e16:	4653      	mov	r3, sl
 8003e18:	4632      	mov	r2, r6
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	4640      	mov	r0, r8
 8003e1e:	f7ff ff71 	bl	8003d04 <__ssputs_r>
 8003e22:	3001      	adds	r0, #1
 8003e24:	f000 80a4 	beq.w	8003f70 <_svfiprintf_r+0x1b8>
 8003e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e2a:	4453      	add	r3, sl
 8003e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e2e:	783b      	ldrb	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 809d 	beq.w	8003f70 <_svfiprintf_r+0x1b8>
 8003e36:	2300      	movs	r3, #0
 8003e38:	f04f 32ff 	mov.w	r2, #4294967295
 8003e3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e40:	9304      	str	r3, [sp, #16]
 8003e42:	9307      	str	r3, [sp, #28]
 8003e44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e48:	931a      	str	r3, [sp, #104]	; 0x68
 8003e4a:	462f      	mov	r7, r5
 8003e4c:	2205      	movs	r2, #5
 8003e4e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003e52:	4850      	ldr	r0, [pc, #320]	; (8003f94 <_svfiprintf_r+0x1dc>)
 8003e54:	f000 fa30 	bl	80042b8 <memchr>
 8003e58:	9b04      	ldr	r3, [sp, #16]
 8003e5a:	b9d0      	cbnz	r0, 8003e92 <_svfiprintf_r+0xda>
 8003e5c:	06d9      	lsls	r1, r3, #27
 8003e5e:	bf44      	itt	mi
 8003e60:	2220      	movmi	r2, #32
 8003e62:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e66:	071a      	lsls	r2, r3, #28
 8003e68:	bf44      	itt	mi
 8003e6a:	222b      	movmi	r2, #43	; 0x2b
 8003e6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e70:	782a      	ldrb	r2, [r5, #0]
 8003e72:	2a2a      	cmp	r2, #42	; 0x2a
 8003e74:	d015      	beq.n	8003ea2 <_svfiprintf_r+0xea>
 8003e76:	462f      	mov	r7, r5
 8003e78:	2000      	movs	r0, #0
 8003e7a:	250a      	movs	r5, #10
 8003e7c:	9a07      	ldr	r2, [sp, #28]
 8003e7e:	4639      	mov	r1, r7
 8003e80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e84:	3b30      	subs	r3, #48	; 0x30
 8003e86:	2b09      	cmp	r3, #9
 8003e88:	d94d      	bls.n	8003f26 <_svfiprintf_r+0x16e>
 8003e8a:	b1b8      	cbz	r0, 8003ebc <_svfiprintf_r+0x104>
 8003e8c:	e00f      	b.n	8003eae <_svfiprintf_r+0xf6>
 8003e8e:	462f      	mov	r7, r5
 8003e90:	e7b8      	b.n	8003e04 <_svfiprintf_r+0x4c>
 8003e92:	4a40      	ldr	r2, [pc, #256]	; (8003f94 <_svfiprintf_r+0x1dc>)
 8003e94:	463d      	mov	r5, r7
 8003e96:	1a80      	subs	r0, r0, r2
 8003e98:	fa0b f000 	lsl.w	r0, fp, r0
 8003e9c:	4318      	orrs	r0, r3
 8003e9e:	9004      	str	r0, [sp, #16]
 8003ea0:	e7d3      	b.n	8003e4a <_svfiprintf_r+0x92>
 8003ea2:	9a03      	ldr	r2, [sp, #12]
 8003ea4:	1d11      	adds	r1, r2, #4
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	9103      	str	r1, [sp, #12]
 8003eaa:	2a00      	cmp	r2, #0
 8003eac:	db01      	blt.n	8003eb2 <_svfiprintf_r+0xfa>
 8003eae:	9207      	str	r2, [sp, #28]
 8003eb0:	e004      	b.n	8003ebc <_svfiprintf_r+0x104>
 8003eb2:	4252      	negs	r2, r2
 8003eb4:	f043 0302 	orr.w	r3, r3, #2
 8003eb8:	9207      	str	r2, [sp, #28]
 8003eba:	9304      	str	r3, [sp, #16]
 8003ebc:	783b      	ldrb	r3, [r7, #0]
 8003ebe:	2b2e      	cmp	r3, #46	; 0x2e
 8003ec0:	d10c      	bne.n	8003edc <_svfiprintf_r+0x124>
 8003ec2:	787b      	ldrb	r3, [r7, #1]
 8003ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ec6:	d133      	bne.n	8003f30 <_svfiprintf_r+0x178>
 8003ec8:	9b03      	ldr	r3, [sp, #12]
 8003eca:	3702      	adds	r7, #2
 8003ecc:	1d1a      	adds	r2, r3, #4
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	9203      	str	r2, [sp, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bfb8      	it	lt
 8003ed6:	f04f 33ff 	movlt.w	r3, #4294967295
 8003eda:	9305      	str	r3, [sp, #20]
 8003edc:	4d2e      	ldr	r5, [pc, #184]	; (8003f98 <_svfiprintf_r+0x1e0>)
 8003ede:	2203      	movs	r2, #3
 8003ee0:	7839      	ldrb	r1, [r7, #0]
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	f000 f9e8 	bl	80042b8 <memchr>
 8003ee8:	b138      	cbz	r0, 8003efa <_svfiprintf_r+0x142>
 8003eea:	2340      	movs	r3, #64	; 0x40
 8003eec:	1b40      	subs	r0, r0, r5
 8003eee:	fa03 f000 	lsl.w	r0, r3, r0
 8003ef2:	9b04      	ldr	r3, [sp, #16]
 8003ef4:	3701      	adds	r7, #1
 8003ef6:	4303      	orrs	r3, r0
 8003ef8:	9304      	str	r3, [sp, #16]
 8003efa:	7839      	ldrb	r1, [r7, #0]
 8003efc:	2206      	movs	r2, #6
 8003efe:	4827      	ldr	r0, [pc, #156]	; (8003f9c <_svfiprintf_r+0x1e4>)
 8003f00:	1c7e      	adds	r6, r7, #1
 8003f02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f06:	f000 f9d7 	bl	80042b8 <memchr>
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	d038      	beq.n	8003f80 <_svfiprintf_r+0x1c8>
 8003f0e:	4b24      	ldr	r3, [pc, #144]	; (8003fa0 <_svfiprintf_r+0x1e8>)
 8003f10:	bb13      	cbnz	r3, 8003f58 <_svfiprintf_r+0x1a0>
 8003f12:	9b03      	ldr	r3, [sp, #12]
 8003f14:	3307      	adds	r3, #7
 8003f16:	f023 0307 	bic.w	r3, r3, #7
 8003f1a:	3308      	adds	r3, #8
 8003f1c:	9303      	str	r3, [sp, #12]
 8003f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f20:	444b      	add	r3, r9
 8003f22:	9309      	str	r3, [sp, #36]	; 0x24
 8003f24:	e76d      	b.n	8003e02 <_svfiprintf_r+0x4a>
 8003f26:	fb05 3202 	mla	r2, r5, r2, r3
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	460f      	mov	r7, r1
 8003f2e:	e7a6      	b.n	8003e7e <_svfiprintf_r+0xc6>
 8003f30:	2300      	movs	r3, #0
 8003f32:	250a      	movs	r5, #10
 8003f34:	4619      	mov	r1, r3
 8003f36:	3701      	adds	r7, #1
 8003f38:	9305      	str	r3, [sp, #20]
 8003f3a:	4638      	mov	r0, r7
 8003f3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f40:	3a30      	subs	r2, #48	; 0x30
 8003f42:	2a09      	cmp	r2, #9
 8003f44:	d903      	bls.n	8003f4e <_svfiprintf_r+0x196>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0c8      	beq.n	8003edc <_svfiprintf_r+0x124>
 8003f4a:	9105      	str	r1, [sp, #20]
 8003f4c:	e7c6      	b.n	8003edc <_svfiprintf_r+0x124>
 8003f4e:	fb05 2101 	mla	r1, r5, r1, r2
 8003f52:	2301      	movs	r3, #1
 8003f54:	4607      	mov	r7, r0
 8003f56:	e7f0      	b.n	8003f3a <_svfiprintf_r+0x182>
 8003f58:	ab03      	add	r3, sp, #12
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	4622      	mov	r2, r4
 8003f5e:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <_svfiprintf_r+0x1ec>)
 8003f60:	a904      	add	r1, sp, #16
 8003f62:	4640      	mov	r0, r8
 8003f64:	f3af 8000 	nop.w
 8003f68:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003f6c:	4681      	mov	r9, r0
 8003f6e:	d1d6      	bne.n	8003f1e <_svfiprintf_r+0x166>
 8003f70:	89a3      	ldrh	r3, [r4, #12]
 8003f72:	065b      	lsls	r3, r3, #25
 8003f74:	f53f af35 	bmi.w	8003de2 <_svfiprintf_r+0x2a>
 8003f78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f7a:	b01d      	add	sp, #116	; 0x74
 8003f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f80:	ab03      	add	r3, sp, #12
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	4622      	mov	r2, r4
 8003f86:	4b07      	ldr	r3, [pc, #28]	; (8003fa4 <_svfiprintf_r+0x1ec>)
 8003f88:	a904      	add	r1, sp, #16
 8003f8a:	4640      	mov	r0, r8
 8003f8c:	f000 f882 	bl	8004094 <_printf_i>
 8003f90:	e7ea      	b.n	8003f68 <_svfiprintf_r+0x1b0>
 8003f92:	bf00      	nop
 8003f94:	080046b0 	.word	0x080046b0
 8003f98:	080046b6 	.word	0x080046b6
 8003f9c:	080046ba 	.word	0x080046ba
 8003fa0:	00000000 	.word	0x00000000
 8003fa4:	08003d05 	.word	0x08003d05

08003fa8 <_printf_common>:
 8003fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fac:	4691      	mov	r9, r2
 8003fae:	461f      	mov	r7, r3
 8003fb0:	688a      	ldr	r2, [r1, #8]
 8003fb2:	690b      	ldr	r3, [r1, #16]
 8003fb4:	4606      	mov	r6, r0
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	bfb8      	it	lt
 8003fba:	4613      	movlt	r3, r2
 8003fbc:	f8c9 3000 	str.w	r3, [r9]
 8003fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fc4:	460c      	mov	r4, r1
 8003fc6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fca:	b112      	cbz	r2, 8003fd2 <_printf_common+0x2a>
 8003fcc:	3301      	adds	r3, #1
 8003fce:	f8c9 3000 	str.w	r3, [r9]
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	0699      	lsls	r1, r3, #26
 8003fd6:	bf42      	ittt	mi
 8003fd8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003fdc:	3302      	addmi	r3, #2
 8003fde:	f8c9 3000 	strmi.w	r3, [r9]
 8003fe2:	6825      	ldr	r5, [r4, #0]
 8003fe4:	f015 0506 	ands.w	r5, r5, #6
 8003fe8:	d107      	bne.n	8003ffa <_printf_common+0x52>
 8003fea:	f104 0a19 	add.w	sl, r4, #25
 8003fee:	68e3      	ldr	r3, [r4, #12]
 8003ff0:	f8d9 2000 	ldr.w	r2, [r9]
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	42ab      	cmp	r3, r5
 8003ff8:	dc29      	bgt.n	800404e <_printf_common+0xa6>
 8003ffa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003ffe:	6822      	ldr	r2, [r4, #0]
 8004000:	3300      	adds	r3, #0
 8004002:	bf18      	it	ne
 8004004:	2301      	movne	r3, #1
 8004006:	0692      	lsls	r2, r2, #26
 8004008:	d42e      	bmi.n	8004068 <_printf_common+0xc0>
 800400a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800400e:	4639      	mov	r1, r7
 8004010:	4630      	mov	r0, r6
 8004012:	47c0      	blx	r8
 8004014:	3001      	adds	r0, #1
 8004016:	d021      	beq.n	800405c <_printf_common+0xb4>
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	68e5      	ldr	r5, [r4, #12]
 800401c:	f003 0306 	and.w	r3, r3, #6
 8004020:	2b04      	cmp	r3, #4
 8004022:	bf18      	it	ne
 8004024:	2500      	movne	r5, #0
 8004026:	f8d9 2000 	ldr.w	r2, [r9]
 800402a:	f04f 0900 	mov.w	r9, #0
 800402e:	bf08      	it	eq
 8004030:	1aad      	subeq	r5, r5, r2
 8004032:	68a3      	ldr	r3, [r4, #8]
 8004034:	6922      	ldr	r2, [r4, #16]
 8004036:	bf08      	it	eq
 8004038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800403c:	4293      	cmp	r3, r2
 800403e:	bfc4      	itt	gt
 8004040:	1a9b      	subgt	r3, r3, r2
 8004042:	18ed      	addgt	r5, r5, r3
 8004044:	341a      	adds	r4, #26
 8004046:	454d      	cmp	r5, r9
 8004048:	d11a      	bne.n	8004080 <_printf_common+0xd8>
 800404a:	2000      	movs	r0, #0
 800404c:	e008      	b.n	8004060 <_printf_common+0xb8>
 800404e:	2301      	movs	r3, #1
 8004050:	4652      	mov	r2, sl
 8004052:	4639      	mov	r1, r7
 8004054:	4630      	mov	r0, r6
 8004056:	47c0      	blx	r8
 8004058:	3001      	adds	r0, #1
 800405a:	d103      	bne.n	8004064 <_printf_common+0xbc>
 800405c:	f04f 30ff 	mov.w	r0, #4294967295
 8004060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004064:	3501      	adds	r5, #1
 8004066:	e7c2      	b.n	8003fee <_printf_common+0x46>
 8004068:	2030      	movs	r0, #48	; 0x30
 800406a:	18e1      	adds	r1, r4, r3
 800406c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004076:	4422      	add	r2, r4
 8004078:	3302      	adds	r3, #2
 800407a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800407e:	e7c4      	b.n	800400a <_printf_common+0x62>
 8004080:	2301      	movs	r3, #1
 8004082:	4622      	mov	r2, r4
 8004084:	4639      	mov	r1, r7
 8004086:	4630      	mov	r0, r6
 8004088:	47c0      	blx	r8
 800408a:	3001      	adds	r0, #1
 800408c:	d0e6      	beq.n	800405c <_printf_common+0xb4>
 800408e:	f109 0901 	add.w	r9, r9, #1
 8004092:	e7d8      	b.n	8004046 <_printf_common+0x9e>

08004094 <_printf_i>:
 8004094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004098:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800409c:	460c      	mov	r4, r1
 800409e:	7e09      	ldrb	r1, [r1, #24]
 80040a0:	b085      	sub	sp, #20
 80040a2:	296e      	cmp	r1, #110	; 0x6e
 80040a4:	4617      	mov	r7, r2
 80040a6:	4606      	mov	r6, r0
 80040a8:	4698      	mov	r8, r3
 80040aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040ac:	f000 80b3 	beq.w	8004216 <_printf_i+0x182>
 80040b0:	d822      	bhi.n	80040f8 <_printf_i+0x64>
 80040b2:	2963      	cmp	r1, #99	; 0x63
 80040b4:	d036      	beq.n	8004124 <_printf_i+0x90>
 80040b6:	d80a      	bhi.n	80040ce <_printf_i+0x3a>
 80040b8:	2900      	cmp	r1, #0
 80040ba:	f000 80b9 	beq.w	8004230 <_printf_i+0x19c>
 80040be:	2958      	cmp	r1, #88	; 0x58
 80040c0:	f000 8083 	beq.w	80041ca <_printf_i+0x136>
 80040c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80040cc:	e032      	b.n	8004134 <_printf_i+0xa0>
 80040ce:	2964      	cmp	r1, #100	; 0x64
 80040d0:	d001      	beq.n	80040d6 <_printf_i+0x42>
 80040d2:	2969      	cmp	r1, #105	; 0x69
 80040d4:	d1f6      	bne.n	80040c4 <_printf_i+0x30>
 80040d6:	6820      	ldr	r0, [r4, #0]
 80040d8:	6813      	ldr	r3, [r2, #0]
 80040da:	0605      	lsls	r5, r0, #24
 80040dc:	f103 0104 	add.w	r1, r3, #4
 80040e0:	d52a      	bpl.n	8004138 <_printf_i+0xa4>
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6011      	str	r1, [r2, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	da03      	bge.n	80040f2 <_printf_i+0x5e>
 80040ea:	222d      	movs	r2, #45	; 0x2d
 80040ec:	425b      	negs	r3, r3
 80040ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80040f2:	486f      	ldr	r0, [pc, #444]	; (80042b0 <_printf_i+0x21c>)
 80040f4:	220a      	movs	r2, #10
 80040f6:	e039      	b.n	800416c <_printf_i+0xd8>
 80040f8:	2973      	cmp	r1, #115	; 0x73
 80040fa:	f000 809d 	beq.w	8004238 <_printf_i+0x1a4>
 80040fe:	d808      	bhi.n	8004112 <_printf_i+0x7e>
 8004100:	296f      	cmp	r1, #111	; 0x6f
 8004102:	d020      	beq.n	8004146 <_printf_i+0xb2>
 8004104:	2970      	cmp	r1, #112	; 0x70
 8004106:	d1dd      	bne.n	80040c4 <_printf_i+0x30>
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	f043 0320 	orr.w	r3, r3, #32
 800410e:	6023      	str	r3, [r4, #0]
 8004110:	e003      	b.n	800411a <_printf_i+0x86>
 8004112:	2975      	cmp	r1, #117	; 0x75
 8004114:	d017      	beq.n	8004146 <_printf_i+0xb2>
 8004116:	2978      	cmp	r1, #120	; 0x78
 8004118:	d1d4      	bne.n	80040c4 <_printf_i+0x30>
 800411a:	2378      	movs	r3, #120	; 0x78
 800411c:	4865      	ldr	r0, [pc, #404]	; (80042b4 <_printf_i+0x220>)
 800411e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004122:	e055      	b.n	80041d0 <_printf_i+0x13c>
 8004124:	6813      	ldr	r3, [r2, #0]
 8004126:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800412a:	1d19      	adds	r1, r3, #4
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6011      	str	r1, [r2, #0]
 8004130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004134:	2301      	movs	r3, #1
 8004136:	e08c      	b.n	8004252 <_printf_i+0x1be>
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800413e:	6011      	str	r1, [r2, #0]
 8004140:	bf18      	it	ne
 8004142:	b21b      	sxthne	r3, r3
 8004144:	e7cf      	b.n	80040e6 <_printf_i+0x52>
 8004146:	6813      	ldr	r3, [r2, #0]
 8004148:	6825      	ldr	r5, [r4, #0]
 800414a:	1d18      	adds	r0, r3, #4
 800414c:	6010      	str	r0, [r2, #0]
 800414e:	0628      	lsls	r0, r5, #24
 8004150:	d501      	bpl.n	8004156 <_printf_i+0xc2>
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	e002      	b.n	800415c <_printf_i+0xc8>
 8004156:	0668      	lsls	r0, r5, #25
 8004158:	d5fb      	bpl.n	8004152 <_printf_i+0xbe>
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	296f      	cmp	r1, #111	; 0x6f
 800415e:	bf14      	ite	ne
 8004160:	220a      	movne	r2, #10
 8004162:	2208      	moveq	r2, #8
 8004164:	4852      	ldr	r0, [pc, #328]	; (80042b0 <_printf_i+0x21c>)
 8004166:	2100      	movs	r1, #0
 8004168:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800416c:	6865      	ldr	r5, [r4, #4]
 800416e:	2d00      	cmp	r5, #0
 8004170:	60a5      	str	r5, [r4, #8]
 8004172:	f2c0 8095 	blt.w	80042a0 <_printf_i+0x20c>
 8004176:	6821      	ldr	r1, [r4, #0]
 8004178:	f021 0104 	bic.w	r1, r1, #4
 800417c:	6021      	str	r1, [r4, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d13d      	bne.n	80041fe <_printf_i+0x16a>
 8004182:	2d00      	cmp	r5, #0
 8004184:	f040 808e 	bne.w	80042a4 <_printf_i+0x210>
 8004188:	4665      	mov	r5, ip
 800418a:	2a08      	cmp	r2, #8
 800418c:	d10b      	bne.n	80041a6 <_printf_i+0x112>
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	07db      	lsls	r3, r3, #31
 8004192:	d508      	bpl.n	80041a6 <_printf_i+0x112>
 8004194:	6923      	ldr	r3, [r4, #16]
 8004196:	6862      	ldr	r2, [r4, #4]
 8004198:	429a      	cmp	r2, r3
 800419a:	bfde      	ittt	le
 800419c:	2330      	movle	r3, #48	; 0x30
 800419e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041a6:	ebac 0305 	sub.w	r3, ip, r5
 80041aa:	6123      	str	r3, [r4, #16]
 80041ac:	f8cd 8000 	str.w	r8, [sp]
 80041b0:	463b      	mov	r3, r7
 80041b2:	aa03      	add	r2, sp, #12
 80041b4:	4621      	mov	r1, r4
 80041b6:	4630      	mov	r0, r6
 80041b8:	f7ff fef6 	bl	8003fa8 <_printf_common>
 80041bc:	3001      	adds	r0, #1
 80041be:	d14d      	bne.n	800425c <_printf_i+0x1c8>
 80041c0:	f04f 30ff 	mov.w	r0, #4294967295
 80041c4:	b005      	add	sp, #20
 80041c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041ca:	4839      	ldr	r0, [pc, #228]	; (80042b0 <_printf_i+0x21c>)
 80041cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80041d0:	6813      	ldr	r3, [r2, #0]
 80041d2:	6821      	ldr	r1, [r4, #0]
 80041d4:	1d1d      	adds	r5, r3, #4
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6015      	str	r5, [r2, #0]
 80041da:	060a      	lsls	r2, r1, #24
 80041dc:	d50b      	bpl.n	80041f6 <_printf_i+0x162>
 80041de:	07ca      	lsls	r2, r1, #31
 80041e0:	bf44      	itt	mi
 80041e2:	f041 0120 	orrmi.w	r1, r1, #32
 80041e6:	6021      	strmi	r1, [r4, #0]
 80041e8:	b91b      	cbnz	r3, 80041f2 <_printf_i+0x15e>
 80041ea:	6822      	ldr	r2, [r4, #0]
 80041ec:	f022 0220 	bic.w	r2, r2, #32
 80041f0:	6022      	str	r2, [r4, #0]
 80041f2:	2210      	movs	r2, #16
 80041f4:	e7b7      	b.n	8004166 <_printf_i+0xd2>
 80041f6:	064d      	lsls	r5, r1, #25
 80041f8:	bf48      	it	mi
 80041fa:	b29b      	uxthmi	r3, r3
 80041fc:	e7ef      	b.n	80041de <_printf_i+0x14a>
 80041fe:	4665      	mov	r5, ip
 8004200:	fbb3 f1f2 	udiv	r1, r3, r2
 8004204:	fb02 3311 	mls	r3, r2, r1, r3
 8004208:	5cc3      	ldrb	r3, [r0, r3]
 800420a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800420e:	460b      	mov	r3, r1
 8004210:	2900      	cmp	r1, #0
 8004212:	d1f5      	bne.n	8004200 <_printf_i+0x16c>
 8004214:	e7b9      	b.n	800418a <_printf_i+0xf6>
 8004216:	6813      	ldr	r3, [r2, #0]
 8004218:	6825      	ldr	r5, [r4, #0]
 800421a:	1d18      	adds	r0, r3, #4
 800421c:	6961      	ldr	r1, [r4, #20]
 800421e:	6010      	str	r0, [r2, #0]
 8004220:	0628      	lsls	r0, r5, #24
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	d501      	bpl.n	800422a <_printf_i+0x196>
 8004226:	6019      	str	r1, [r3, #0]
 8004228:	e002      	b.n	8004230 <_printf_i+0x19c>
 800422a:	066a      	lsls	r2, r5, #25
 800422c:	d5fb      	bpl.n	8004226 <_printf_i+0x192>
 800422e:	8019      	strh	r1, [r3, #0]
 8004230:	2300      	movs	r3, #0
 8004232:	4665      	mov	r5, ip
 8004234:	6123      	str	r3, [r4, #16]
 8004236:	e7b9      	b.n	80041ac <_printf_i+0x118>
 8004238:	6813      	ldr	r3, [r2, #0]
 800423a:	1d19      	adds	r1, r3, #4
 800423c:	6011      	str	r1, [r2, #0]
 800423e:	681d      	ldr	r5, [r3, #0]
 8004240:	6862      	ldr	r2, [r4, #4]
 8004242:	2100      	movs	r1, #0
 8004244:	4628      	mov	r0, r5
 8004246:	f000 f837 	bl	80042b8 <memchr>
 800424a:	b108      	cbz	r0, 8004250 <_printf_i+0x1bc>
 800424c:	1b40      	subs	r0, r0, r5
 800424e:	6060      	str	r0, [r4, #4]
 8004250:	6863      	ldr	r3, [r4, #4]
 8004252:	6123      	str	r3, [r4, #16]
 8004254:	2300      	movs	r3, #0
 8004256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800425a:	e7a7      	b.n	80041ac <_printf_i+0x118>
 800425c:	6923      	ldr	r3, [r4, #16]
 800425e:	462a      	mov	r2, r5
 8004260:	4639      	mov	r1, r7
 8004262:	4630      	mov	r0, r6
 8004264:	47c0      	blx	r8
 8004266:	3001      	adds	r0, #1
 8004268:	d0aa      	beq.n	80041c0 <_printf_i+0x12c>
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	079b      	lsls	r3, r3, #30
 800426e:	d413      	bmi.n	8004298 <_printf_i+0x204>
 8004270:	68e0      	ldr	r0, [r4, #12]
 8004272:	9b03      	ldr	r3, [sp, #12]
 8004274:	4298      	cmp	r0, r3
 8004276:	bfb8      	it	lt
 8004278:	4618      	movlt	r0, r3
 800427a:	e7a3      	b.n	80041c4 <_printf_i+0x130>
 800427c:	2301      	movs	r3, #1
 800427e:	464a      	mov	r2, r9
 8004280:	4639      	mov	r1, r7
 8004282:	4630      	mov	r0, r6
 8004284:	47c0      	blx	r8
 8004286:	3001      	adds	r0, #1
 8004288:	d09a      	beq.n	80041c0 <_printf_i+0x12c>
 800428a:	3501      	adds	r5, #1
 800428c:	68e3      	ldr	r3, [r4, #12]
 800428e:	9a03      	ldr	r2, [sp, #12]
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	42ab      	cmp	r3, r5
 8004294:	dcf2      	bgt.n	800427c <_printf_i+0x1e8>
 8004296:	e7eb      	b.n	8004270 <_printf_i+0x1dc>
 8004298:	2500      	movs	r5, #0
 800429a:	f104 0919 	add.w	r9, r4, #25
 800429e:	e7f5      	b.n	800428c <_printf_i+0x1f8>
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1ac      	bne.n	80041fe <_printf_i+0x16a>
 80042a4:	7803      	ldrb	r3, [r0, #0]
 80042a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042ae:	e76c      	b.n	800418a <_printf_i+0xf6>
 80042b0:	080046c1 	.word	0x080046c1
 80042b4:	080046d2 	.word	0x080046d2

080042b8 <memchr>:
 80042b8:	b510      	push	{r4, lr}
 80042ba:	b2c9      	uxtb	r1, r1
 80042bc:	4402      	add	r2, r0
 80042be:	4290      	cmp	r0, r2
 80042c0:	4603      	mov	r3, r0
 80042c2:	d101      	bne.n	80042c8 <memchr+0x10>
 80042c4:	2300      	movs	r3, #0
 80042c6:	e003      	b.n	80042d0 <memchr+0x18>
 80042c8:	781c      	ldrb	r4, [r3, #0]
 80042ca:	3001      	adds	r0, #1
 80042cc:	428c      	cmp	r4, r1
 80042ce:	d1f6      	bne.n	80042be <memchr+0x6>
 80042d0:	4618      	mov	r0, r3
 80042d2:	bd10      	pop	{r4, pc}

080042d4 <memcpy>:
 80042d4:	b510      	push	{r4, lr}
 80042d6:	1e43      	subs	r3, r0, #1
 80042d8:	440a      	add	r2, r1
 80042da:	4291      	cmp	r1, r2
 80042dc:	d100      	bne.n	80042e0 <memcpy+0xc>
 80042de:	bd10      	pop	{r4, pc}
 80042e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042e8:	e7f7      	b.n	80042da <memcpy+0x6>

080042ea <memmove>:
 80042ea:	4288      	cmp	r0, r1
 80042ec:	b510      	push	{r4, lr}
 80042ee:	eb01 0302 	add.w	r3, r1, r2
 80042f2:	d807      	bhi.n	8004304 <memmove+0x1a>
 80042f4:	1e42      	subs	r2, r0, #1
 80042f6:	4299      	cmp	r1, r3
 80042f8:	d00a      	beq.n	8004310 <memmove+0x26>
 80042fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042fe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004302:	e7f8      	b.n	80042f6 <memmove+0xc>
 8004304:	4283      	cmp	r3, r0
 8004306:	d9f5      	bls.n	80042f4 <memmove+0xa>
 8004308:	1881      	adds	r1, r0, r2
 800430a:	1ad2      	subs	r2, r2, r3
 800430c:	42d3      	cmn	r3, r2
 800430e:	d100      	bne.n	8004312 <memmove+0x28>
 8004310:	bd10      	pop	{r4, pc}
 8004312:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004316:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800431a:	e7f7      	b.n	800430c <memmove+0x22>

0800431c <_free_r>:
 800431c:	b538      	push	{r3, r4, r5, lr}
 800431e:	4605      	mov	r5, r0
 8004320:	2900      	cmp	r1, #0
 8004322:	d043      	beq.n	80043ac <_free_r+0x90>
 8004324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004328:	1f0c      	subs	r4, r1, #4
 800432a:	2b00      	cmp	r3, #0
 800432c:	bfb8      	it	lt
 800432e:	18e4      	addlt	r4, r4, r3
 8004330:	f000 f8d0 	bl	80044d4 <__malloc_lock>
 8004334:	4a1e      	ldr	r2, [pc, #120]	; (80043b0 <_free_r+0x94>)
 8004336:	6813      	ldr	r3, [r2, #0]
 8004338:	4610      	mov	r0, r2
 800433a:	b933      	cbnz	r3, 800434a <_free_r+0x2e>
 800433c:	6063      	str	r3, [r4, #4]
 800433e:	6014      	str	r4, [r2, #0]
 8004340:	4628      	mov	r0, r5
 8004342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004346:	f000 b8c6 	b.w	80044d6 <__malloc_unlock>
 800434a:	42a3      	cmp	r3, r4
 800434c:	d90b      	bls.n	8004366 <_free_r+0x4a>
 800434e:	6821      	ldr	r1, [r4, #0]
 8004350:	1862      	adds	r2, r4, r1
 8004352:	4293      	cmp	r3, r2
 8004354:	bf01      	itttt	eq
 8004356:	681a      	ldreq	r2, [r3, #0]
 8004358:	685b      	ldreq	r3, [r3, #4]
 800435a:	1852      	addeq	r2, r2, r1
 800435c:	6022      	streq	r2, [r4, #0]
 800435e:	6063      	str	r3, [r4, #4]
 8004360:	6004      	str	r4, [r0, #0]
 8004362:	e7ed      	b.n	8004340 <_free_r+0x24>
 8004364:	4613      	mov	r3, r2
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	b10a      	cbz	r2, 800436e <_free_r+0x52>
 800436a:	42a2      	cmp	r2, r4
 800436c:	d9fa      	bls.n	8004364 <_free_r+0x48>
 800436e:	6819      	ldr	r1, [r3, #0]
 8004370:	1858      	adds	r0, r3, r1
 8004372:	42a0      	cmp	r0, r4
 8004374:	d10b      	bne.n	800438e <_free_r+0x72>
 8004376:	6820      	ldr	r0, [r4, #0]
 8004378:	4401      	add	r1, r0
 800437a:	1858      	adds	r0, r3, r1
 800437c:	4282      	cmp	r2, r0
 800437e:	6019      	str	r1, [r3, #0]
 8004380:	d1de      	bne.n	8004340 <_free_r+0x24>
 8004382:	6810      	ldr	r0, [r2, #0]
 8004384:	6852      	ldr	r2, [r2, #4]
 8004386:	4401      	add	r1, r0
 8004388:	6019      	str	r1, [r3, #0]
 800438a:	605a      	str	r2, [r3, #4]
 800438c:	e7d8      	b.n	8004340 <_free_r+0x24>
 800438e:	d902      	bls.n	8004396 <_free_r+0x7a>
 8004390:	230c      	movs	r3, #12
 8004392:	602b      	str	r3, [r5, #0]
 8004394:	e7d4      	b.n	8004340 <_free_r+0x24>
 8004396:	6820      	ldr	r0, [r4, #0]
 8004398:	1821      	adds	r1, r4, r0
 800439a:	428a      	cmp	r2, r1
 800439c:	bf01      	itttt	eq
 800439e:	6811      	ldreq	r1, [r2, #0]
 80043a0:	6852      	ldreq	r2, [r2, #4]
 80043a2:	1809      	addeq	r1, r1, r0
 80043a4:	6021      	streq	r1, [r4, #0]
 80043a6:	6062      	str	r2, [r4, #4]
 80043a8:	605c      	str	r4, [r3, #4]
 80043aa:	e7c9      	b.n	8004340 <_free_r+0x24>
 80043ac:	bd38      	pop	{r3, r4, r5, pc}
 80043ae:	bf00      	nop
 80043b0:	2000011c 	.word	0x2000011c

080043b4 <_malloc_r>:
 80043b4:	b570      	push	{r4, r5, r6, lr}
 80043b6:	1ccd      	adds	r5, r1, #3
 80043b8:	f025 0503 	bic.w	r5, r5, #3
 80043bc:	3508      	adds	r5, #8
 80043be:	2d0c      	cmp	r5, #12
 80043c0:	bf38      	it	cc
 80043c2:	250c      	movcc	r5, #12
 80043c4:	2d00      	cmp	r5, #0
 80043c6:	4606      	mov	r6, r0
 80043c8:	db01      	blt.n	80043ce <_malloc_r+0x1a>
 80043ca:	42a9      	cmp	r1, r5
 80043cc:	d903      	bls.n	80043d6 <_malloc_r+0x22>
 80043ce:	230c      	movs	r3, #12
 80043d0:	6033      	str	r3, [r6, #0]
 80043d2:	2000      	movs	r0, #0
 80043d4:	bd70      	pop	{r4, r5, r6, pc}
 80043d6:	f000 f87d 	bl	80044d4 <__malloc_lock>
 80043da:	4a21      	ldr	r2, [pc, #132]	; (8004460 <_malloc_r+0xac>)
 80043dc:	6814      	ldr	r4, [r2, #0]
 80043de:	4621      	mov	r1, r4
 80043e0:	b991      	cbnz	r1, 8004408 <_malloc_r+0x54>
 80043e2:	4c20      	ldr	r4, [pc, #128]	; (8004464 <_malloc_r+0xb0>)
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	b91b      	cbnz	r3, 80043f0 <_malloc_r+0x3c>
 80043e8:	4630      	mov	r0, r6
 80043ea:	f000 f863 	bl	80044b4 <_sbrk_r>
 80043ee:	6020      	str	r0, [r4, #0]
 80043f0:	4629      	mov	r1, r5
 80043f2:	4630      	mov	r0, r6
 80043f4:	f000 f85e 	bl	80044b4 <_sbrk_r>
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	d124      	bne.n	8004446 <_malloc_r+0x92>
 80043fc:	230c      	movs	r3, #12
 80043fe:	4630      	mov	r0, r6
 8004400:	6033      	str	r3, [r6, #0]
 8004402:	f000 f868 	bl	80044d6 <__malloc_unlock>
 8004406:	e7e4      	b.n	80043d2 <_malloc_r+0x1e>
 8004408:	680b      	ldr	r3, [r1, #0]
 800440a:	1b5b      	subs	r3, r3, r5
 800440c:	d418      	bmi.n	8004440 <_malloc_r+0x8c>
 800440e:	2b0b      	cmp	r3, #11
 8004410:	d90f      	bls.n	8004432 <_malloc_r+0x7e>
 8004412:	600b      	str	r3, [r1, #0]
 8004414:	18cc      	adds	r4, r1, r3
 8004416:	50cd      	str	r5, [r1, r3]
 8004418:	4630      	mov	r0, r6
 800441a:	f000 f85c 	bl	80044d6 <__malloc_unlock>
 800441e:	f104 000b 	add.w	r0, r4, #11
 8004422:	1d23      	adds	r3, r4, #4
 8004424:	f020 0007 	bic.w	r0, r0, #7
 8004428:	1ac3      	subs	r3, r0, r3
 800442a:	d0d3      	beq.n	80043d4 <_malloc_r+0x20>
 800442c:	425a      	negs	r2, r3
 800442e:	50e2      	str	r2, [r4, r3]
 8004430:	e7d0      	b.n	80043d4 <_malloc_r+0x20>
 8004432:	684b      	ldr	r3, [r1, #4]
 8004434:	428c      	cmp	r4, r1
 8004436:	bf16      	itet	ne
 8004438:	6063      	strne	r3, [r4, #4]
 800443a:	6013      	streq	r3, [r2, #0]
 800443c:	460c      	movne	r4, r1
 800443e:	e7eb      	b.n	8004418 <_malloc_r+0x64>
 8004440:	460c      	mov	r4, r1
 8004442:	6849      	ldr	r1, [r1, #4]
 8004444:	e7cc      	b.n	80043e0 <_malloc_r+0x2c>
 8004446:	1cc4      	adds	r4, r0, #3
 8004448:	f024 0403 	bic.w	r4, r4, #3
 800444c:	42a0      	cmp	r0, r4
 800444e:	d005      	beq.n	800445c <_malloc_r+0xa8>
 8004450:	1a21      	subs	r1, r4, r0
 8004452:	4630      	mov	r0, r6
 8004454:	f000 f82e 	bl	80044b4 <_sbrk_r>
 8004458:	3001      	adds	r0, #1
 800445a:	d0cf      	beq.n	80043fc <_malloc_r+0x48>
 800445c:	6025      	str	r5, [r4, #0]
 800445e:	e7db      	b.n	8004418 <_malloc_r+0x64>
 8004460:	2000011c 	.word	0x2000011c
 8004464:	20000120 	.word	0x20000120

08004468 <_realloc_r>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	4607      	mov	r7, r0
 800446c:	4614      	mov	r4, r2
 800446e:	460e      	mov	r6, r1
 8004470:	b921      	cbnz	r1, 800447c <_realloc_r+0x14>
 8004472:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004476:	4611      	mov	r1, r2
 8004478:	f7ff bf9c 	b.w	80043b4 <_malloc_r>
 800447c:	b922      	cbnz	r2, 8004488 <_realloc_r+0x20>
 800447e:	f7ff ff4d 	bl	800431c <_free_r>
 8004482:	4625      	mov	r5, r4
 8004484:	4628      	mov	r0, r5
 8004486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004488:	f000 f826 	bl	80044d8 <_malloc_usable_size_r>
 800448c:	42a0      	cmp	r0, r4
 800448e:	d20f      	bcs.n	80044b0 <_realloc_r+0x48>
 8004490:	4621      	mov	r1, r4
 8004492:	4638      	mov	r0, r7
 8004494:	f7ff ff8e 	bl	80043b4 <_malloc_r>
 8004498:	4605      	mov	r5, r0
 800449a:	2800      	cmp	r0, #0
 800449c:	d0f2      	beq.n	8004484 <_realloc_r+0x1c>
 800449e:	4631      	mov	r1, r6
 80044a0:	4622      	mov	r2, r4
 80044a2:	f7ff ff17 	bl	80042d4 <memcpy>
 80044a6:	4631      	mov	r1, r6
 80044a8:	4638      	mov	r0, r7
 80044aa:	f7ff ff37 	bl	800431c <_free_r>
 80044ae:	e7e9      	b.n	8004484 <_realloc_r+0x1c>
 80044b0:	4635      	mov	r5, r6
 80044b2:	e7e7      	b.n	8004484 <_realloc_r+0x1c>

080044b4 <_sbrk_r>:
 80044b4:	b538      	push	{r3, r4, r5, lr}
 80044b6:	2300      	movs	r3, #0
 80044b8:	4c05      	ldr	r4, [pc, #20]	; (80044d0 <_sbrk_r+0x1c>)
 80044ba:	4605      	mov	r5, r0
 80044bc:	4608      	mov	r0, r1
 80044be:	6023      	str	r3, [r4, #0]
 80044c0:	f7ff fb50 	bl	8003b64 <_sbrk>
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	d102      	bne.n	80044ce <_sbrk_r+0x1a>
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	b103      	cbz	r3, 80044ce <_sbrk_r+0x1a>
 80044cc:	602b      	str	r3, [r5, #0]
 80044ce:	bd38      	pop	{r3, r4, r5, pc}
 80044d0:	20000288 	.word	0x20000288

080044d4 <__malloc_lock>:
 80044d4:	4770      	bx	lr

080044d6 <__malloc_unlock>:
 80044d6:	4770      	bx	lr

080044d8 <_malloc_usable_size_r>:
 80044d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044dc:	1f18      	subs	r0, r3, #4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	bfbc      	itt	lt
 80044e2:	580b      	ldrlt	r3, [r1, r0]
 80044e4:	18c0      	addlt	r0, r0, r3
 80044e6:	4770      	bx	lr

080044e8 <_init>:
 80044e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ea:	bf00      	nop
 80044ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ee:	bc08      	pop	{r3}
 80044f0:	469e      	mov	lr, r3
 80044f2:	4770      	bx	lr

080044f4 <_fini>:
 80044f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f6:	bf00      	nop
 80044f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fa:	bc08      	pop	{r3}
 80044fc:	469e      	mov	lr, r3
 80044fe:	4770      	bx	lr
