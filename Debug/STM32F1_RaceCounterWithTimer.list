
STM32F1_RaceCounterWithTimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080021fc  080021fc  000121fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002228  08002228  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002228  08002228  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002228  08002228  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002228  08002228  00012228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800222c  0800222c  0001222c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000000c  0800223c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  0800223c  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5f9  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000182b  00000000  00000000  0002b62e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d88  00000000  00000000  0002ce60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ce0  00000000  00000000  0002dbe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000139d2  00000000  00000000  0002e8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b42  00000000  00000000  0004229a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ff2c  00000000  00000000  0004addc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bad08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039b4  00000000  00000000  000bad84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080021e4 	.word	0x080021e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080021e4 	.word	0x080021e4

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f923 	bl	80003a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fe7a 	bl	8001e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f93b 	bl	8000412 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f903 	bl	80003be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000028 	.word	0x20000028

08000210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <__NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	2b00      	cmp	r3, #0
 8000284:	db0b      	blt.n	800029e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 021f 	and.w	r2, r3, #31
 800028c:	4906      	ldr	r1, [pc, #24]	; (80002a8 <__NVIC_EnableIRQ+0x34>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	095b      	lsrs	r3, r3, #5
 8000294:	2001      	movs	r0, #1
 8000296:	fa00 f202 	lsl.w	r2, r0, r2
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000300:	b480      	push	{r7}
 8000302:	b089      	sub	sp, #36	; 0x24
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f003 0307 	and.w	r3, r3, #7
 8000312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	f1c3 0307 	rsb	r3, r3, #7
 800031a:	2b04      	cmp	r3, #4
 800031c:	bf28      	it	cs
 800031e:	2304      	movcs	r3, #4
 8000320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3304      	adds	r3, #4
 8000326:	2b06      	cmp	r3, #6
 8000328:	d902      	bls.n	8000330 <NVIC_EncodePriority+0x30>
 800032a:	69fb      	ldr	r3, [r7, #28]
 800032c:	3b03      	subs	r3, #3
 800032e:	e000      	b.n	8000332 <NVIC_EncodePriority+0x32>
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000334:	f04f 32ff 	mov.w	r2, #4294967295
 8000338:	69bb      	ldr	r3, [r7, #24]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	43da      	mvns	r2, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	401a      	ands	r2, r3
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000348:	f04f 31ff 	mov.w	r1, #4294967295
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	43d9      	mvns	r1, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	4313      	orrs	r3, r2
         );
}
 800035a:	4618      	mov	r0, r3
 800035c:	3724      	adds	r7, #36	; 0x24
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3b01      	subs	r3, #1
 8000370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000374:	d301      	bcc.n	800037a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000376:	2301      	movs	r3, #1
 8000378:	e00f      	b.n	800039a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <SysTick_Config+0x40>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3b01      	subs	r3, #1
 8000380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000382:	210f      	movs	r1, #15
 8000384:	f04f 30ff 	mov.w	r0, #4294967295
 8000388:	f7ff ff90 	bl	80002ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <SysTick_Config+0x40>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000392:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <SysTick_Config+0x40>)
 8000394:	2207      	movs	r2, #7
 8000396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000398:	2300      	movs	r3, #0
}
 800039a:	4618      	mov	r0, r3
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	e000e010 	.word	0xe000e010

080003a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff2d 	bl	8000210 <__NVIC_SetPriorityGrouping>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003be:	b580      	push	{r7, lr}
 80003c0:	b086      	sub	sp, #24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	4603      	mov	r3, r0
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
 80003ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003d0:	f7ff ff42 	bl	8000258 <__NVIC_GetPriorityGrouping>
 80003d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	68b9      	ldr	r1, [r7, #8]
 80003da:	6978      	ldr	r0, [r7, #20]
 80003dc:	f7ff ff90 	bl	8000300 <NVIC_EncodePriority>
 80003e0:	4602      	mov	r2, r0
 80003e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003e6:	4611      	mov	r1, r2
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff5f 	bl	80002ac <__NVIC_SetPriority>
}
 80003ee:	bf00      	nop
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	4603      	mov	r3, r0
 80003fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff35 	bl	8000274 <__NVIC_EnableIRQ>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f7ff ffa2 	bl	8000364 <SysTick_Config>
 8000420:	4603      	mov	r3, r0
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800042c:	b480      	push	{r7}
 800042e:	b08b      	sub	sp, #44	; 0x2c
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000436:	2300      	movs	r3, #0
 8000438:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800043a:	2300      	movs	r3, #0
 800043c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800043e:	e127      	b.n	8000690 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000440:	2201      	movs	r2, #1
 8000442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000444:	fa02 f303 	lsl.w	r3, r2, r3
 8000448:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	69fa      	ldr	r2, [r7, #28]
 8000450:	4013      	ands	r3, r2
 8000452:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000454:	69ba      	ldr	r2, [r7, #24]
 8000456:	69fb      	ldr	r3, [r7, #28]
 8000458:	429a      	cmp	r2, r3
 800045a:	f040 8116 	bne.w	800068a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	2b12      	cmp	r3, #18
 8000464:	d034      	beq.n	80004d0 <HAL_GPIO_Init+0xa4>
 8000466:	2b12      	cmp	r3, #18
 8000468:	d80d      	bhi.n	8000486 <HAL_GPIO_Init+0x5a>
 800046a:	2b02      	cmp	r3, #2
 800046c:	d02b      	beq.n	80004c6 <HAL_GPIO_Init+0x9a>
 800046e:	2b02      	cmp	r3, #2
 8000470:	d804      	bhi.n	800047c <HAL_GPIO_Init+0x50>
 8000472:	2b00      	cmp	r3, #0
 8000474:	d031      	beq.n	80004da <HAL_GPIO_Init+0xae>
 8000476:	2b01      	cmp	r3, #1
 8000478:	d01c      	beq.n	80004b4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800047a:	e048      	b.n	800050e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800047c:	2b03      	cmp	r3, #3
 800047e:	d043      	beq.n	8000508 <HAL_GPIO_Init+0xdc>
 8000480:	2b11      	cmp	r3, #17
 8000482:	d01b      	beq.n	80004bc <HAL_GPIO_Init+0x90>
          break;
 8000484:	e043      	b.n	800050e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000486:	4a89      	ldr	r2, [pc, #548]	; (80006ac <HAL_GPIO_Init+0x280>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d026      	beq.n	80004da <HAL_GPIO_Init+0xae>
 800048c:	4a87      	ldr	r2, [pc, #540]	; (80006ac <HAL_GPIO_Init+0x280>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d806      	bhi.n	80004a0 <HAL_GPIO_Init+0x74>
 8000492:	4a87      	ldr	r2, [pc, #540]	; (80006b0 <HAL_GPIO_Init+0x284>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d020      	beq.n	80004da <HAL_GPIO_Init+0xae>
 8000498:	4a86      	ldr	r2, [pc, #536]	; (80006b4 <HAL_GPIO_Init+0x288>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d01d      	beq.n	80004da <HAL_GPIO_Init+0xae>
          break;
 800049e:	e036      	b.n	800050e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004a0:	4a85      	ldr	r2, [pc, #532]	; (80006b8 <HAL_GPIO_Init+0x28c>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d019      	beq.n	80004da <HAL_GPIO_Init+0xae>
 80004a6:	4a85      	ldr	r2, [pc, #532]	; (80006bc <HAL_GPIO_Init+0x290>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d016      	beq.n	80004da <HAL_GPIO_Init+0xae>
 80004ac:	4a84      	ldr	r2, [pc, #528]	; (80006c0 <HAL_GPIO_Init+0x294>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d013      	beq.n	80004da <HAL_GPIO_Init+0xae>
          break;
 80004b2:	e02c      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	623b      	str	r3, [r7, #32]
          break;
 80004ba:	e028      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	3304      	adds	r3, #4
 80004c2:	623b      	str	r3, [r7, #32]
          break;
 80004c4:	e023      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	3308      	adds	r3, #8
 80004cc:	623b      	str	r3, [r7, #32]
          break;
 80004ce:	e01e      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	330c      	adds	r3, #12
 80004d6:	623b      	str	r3, [r7, #32]
          break;
 80004d8:	e019      	b.n	800050e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d102      	bne.n	80004e8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004e2:	2304      	movs	r3, #4
 80004e4:	623b      	str	r3, [r7, #32]
          break;
 80004e6:	e012      	b.n	800050e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d105      	bne.n	80004fc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004f0:	2308      	movs	r3, #8
 80004f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	69fa      	ldr	r2, [r7, #28]
 80004f8:	611a      	str	r2, [r3, #16]
          break;
 80004fa:	e008      	b.n	800050e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004fc:	2308      	movs	r3, #8
 80004fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	69fa      	ldr	r2, [r7, #28]
 8000504:	615a      	str	r2, [r3, #20]
          break;
 8000506:	e002      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000508:	2300      	movs	r3, #0
 800050a:	623b      	str	r3, [r7, #32]
          break;
 800050c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	2bff      	cmp	r3, #255	; 0xff
 8000512:	d801      	bhi.n	8000518 <HAL_GPIO_Init+0xec>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	e001      	b.n	800051c <HAL_GPIO_Init+0xf0>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	3304      	adds	r3, #4
 800051c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800051e:	69bb      	ldr	r3, [r7, #24]
 8000520:	2bff      	cmp	r3, #255	; 0xff
 8000522:	d802      	bhi.n	800052a <HAL_GPIO_Init+0xfe>
 8000524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	e002      	b.n	8000530 <HAL_GPIO_Init+0x104>
 800052a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800052c:	3b08      	subs	r3, #8
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	210f      	movs	r1, #15
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	fa01 f303 	lsl.w	r3, r1, r3
 800053e:	43db      	mvns	r3, r3
 8000540:	401a      	ands	r2, r3
 8000542:	6a39      	ldr	r1, [r7, #32]
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	431a      	orrs	r2, r3
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	2b00      	cmp	r3, #0
 800055a:	f000 8096 	beq.w	800068a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800055e:	4b59      	ldr	r3, [pc, #356]	; (80006c4 <HAL_GPIO_Init+0x298>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a58      	ldr	r2, [pc, #352]	; (80006c4 <HAL_GPIO_Init+0x298>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b56      	ldr	r3, [pc, #344]	; (80006c4 <HAL_GPIO_Init+0x298>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000576:	4a54      	ldr	r2, [pc, #336]	; (80006c8 <HAL_GPIO_Init+0x29c>)
 8000578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057a:	089b      	lsrs	r3, r3, #2
 800057c:	3302      	adds	r3, #2
 800057e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000582:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000586:	f003 0303 	and.w	r3, r3, #3
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	220f      	movs	r2, #15
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	43db      	mvns	r3, r3
 8000594:	68fa      	ldr	r2, [r7, #12]
 8000596:	4013      	ands	r3, r2
 8000598:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a4b      	ldr	r2, [pc, #300]	; (80006cc <HAL_GPIO_Init+0x2a0>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d013      	beq.n	80005ca <HAL_GPIO_Init+0x19e>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a4a      	ldr	r2, [pc, #296]	; (80006d0 <HAL_GPIO_Init+0x2a4>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d00d      	beq.n	80005c6 <HAL_GPIO_Init+0x19a>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a49      	ldr	r2, [pc, #292]	; (80006d4 <HAL_GPIO_Init+0x2a8>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d007      	beq.n	80005c2 <HAL_GPIO_Init+0x196>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a48      	ldr	r2, [pc, #288]	; (80006d8 <HAL_GPIO_Init+0x2ac>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d101      	bne.n	80005be <HAL_GPIO_Init+0x192>
 80005ba:	2303      	movs	r3, #3
 80005bc:	e006      	b.n	80005cc <HAL_GPIO_Init+0x1a0>
 80005be:	2304      	movs	r3, #4
 80005c0:	e004      	b.n	80005cc <HAL_GPIO_Init+0x1a0>
 80005c2:	2302      	movs	r3, #2
 80005c4:	e002      	b.n	80005cc <HAL_GPIO_Init+0x1a0>
 80005c6:	2301      	movs	r3, #1
 80005c8:	e000      	b.n	80005cc <HAL_GPIO_Init+0x1a0>
 80005ca:	2300      	movs	r3, #0
 80005cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005ce:	f002 0203 	and.w	r2, r2, #3
 80005d2:	0092      	lsls	r2, r2, #2
 80005d4:	4093      	lsls	r3, r2
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	4313      	orrs	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80005dc:	493a      	ldr	r1, [pc, #232]	; (80006c8 <HAL_GPIO_Init+0x29c>)
 80005de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e0:	089b      	lsrs	r3, r3, #2
 80005e2:	3302      	adds	r3, #2
 80005e4:	68fa      	ldr	r2, [r7, #12]
 80005e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d006      	beq.n	8000604 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005f6:	4b39      	ldr	r3, [pc, #228]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	4938      	ldr	r1, [pc, #224]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	4313      	orrs	r3, r2
 8000600:	600b      	str	r3, [r1, #0]
 8000602:	e006      	b.n	8000612 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000604:	4b35      	ldr	r3, [pc, #212]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	43db      	mvns	r3, r3
 800060c:	4933      	ldr	r1, [pc, #204]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800060e:	4013      	ands	r3, r2
 8000610:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061a:	2b00      	cmp	r3, #0
 800061c:	d006      	beq.n	800062c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	4313      	orrs	r3, r2
 8000628:	604b      	str	r3, [r1, #4]
 800062a:	e006      	b.n	800063a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800062c:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800062e:	685a      	ldr	r2, [r3, #4]
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	43db      	mvns	r3, r3
 8000634:	4929      	ldr	r1, [pc, #164]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000636:	4013      	ands	r3, r2
 8000638:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d006      	beq.n	8000654 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	4924      	ldr	r1, [pc, #144]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	4313      	orrs	r3, r2
 8000650:	608b      	str	r3, [r1, #8]
 8000652:	e006      	b.n	8000662 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000654:	4b21      	ldr	r3, [pc, #132]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000656:	689a      	ldr	r2, [r3, #8]
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	43db      	mvns	r3, r3
 800065c:	491f      	ldr	r1, [pc, #124]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800065e:	4013      	ands	r3, r2
 8000660:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066a:	2b00      	cmp	r3, #0
 800066c:	d006      	beq.n	800067c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000670:	68da      	ldr	r2, [r3, #12]
 8000672:	491a      	ldr	r1, [pc, #104]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	4313      	orrs	r3, r2
 8000678:	60cb      	str	r3, [r1, #12]
 800067a:	e006      	b.n	800068a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	43db      	mvns	r3, r3
 8000684:	4915      	ldr	r1, [pc, #84]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000686:	4013      	ands	r3, r2
 8000688:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	3301      	adds	r3, #1
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000696:	fa22 f303 	lsr.w	r3, r2, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	f47f aed0 	bne.w	8000440 <HAL_GPIO_Init+0x14>
  }
}
 80006a0:	bf00      	nop
 80006a2:	372c      	adds	r7, #44	; 0x2c
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	10210000 	.word	0x10210000
 80006b0:	10110000 	.word	0x10110000
 80006b4:	10120000 	.word	0x10120000
 80006b8:	10310000 	.word	0x10310000
 80006bc:	10320000 	.word	0x10320000
 80006c0:	10220000 	.word	0x10220000
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010000 	.word	0x40010000
 80006cc:	40010800 	.word	0x40010800
 80006d0:	40010c00 	.word	0x40010c00
 80006d4:	40011000 	.word	0x40011000
 80006d8:	40011400 	.word	0x40011400
 80006dc:	40010400 	.word	0x40010400

080006e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	807b      	strh	r3, [r7, #2]
 80006ec:	4613      	mov	r3, r2
 80006ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006f0:	787b      	ldrb	r3, [r7, #1]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d003      	beq.n	80006fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006f6:	887a      	ldrh	r2, [r7, #2]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80006fc:	e003      	b.n	8000706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006fe:	887b      	ldrh	r3, [r7, #2]
 8000700:	041a      	lsls	r2, r3, #16
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	611a      	str	r2, [r3, #16]
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d101      	bne.n	8000722 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	e10f      	b.n	8000942 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	d106      	bne.n	800073c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2200      	movs	r2, #0
 8000732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f001 fbc4 	bl	8001ec4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2224      	movs	r2, #36	; 0x24
 8000740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f022 0201 	bic.w	r2, r2, #1
 8000752:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000754:	f000 fcda 	bl	800110c <HAL_RCC_GetPCLK1Freq>
 8000758:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	4a7b      	ldr	r2, [pc, #492]	; (800094c <HAL_I2C_Init+0x23c>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d807      	bhi.n	8000774 <HAL_I2C_Init+0x64>
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	4a7a      	ldr	r2, [pc, #488]	; (8000950 <HAL_I2C_Init+0x240>)
 8000768:	4293      	cmp	r3, r2
 800076a:	bf94      	ite	ls
 800076c:	2301      	movls	r3, #1
 800076e:	2300      	movhi	r3, #0
 8000770:	b2db      	uxtb	r3, r3
 8000772:	e006      	b.n	8000782 <HAL_I2C_Init+0x72>
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	4a77      	ldr	r2, [pc, #476]	; (8000954 <HAL_I2C_Init+0x244>)
 8000778:	4293      	cmp	r3, r2
 800077a:	bf94      	ite	ls
 800077c:	2301      	movls	r3, #1
 800077e:	2300      	movhi	r3, #0
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000786:	2301      	movs	r3, #1
 8000788:	e0db      	b.n	8000942 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	4a72      	ldr	r2, [pc, #456]	; (8000958 <HAL_I2C_Init+0x248>)
 800078e:	fba2 2303 	umull	r2, r3, r2, r3
 8000792:	0c9b      	lsrs	r3, r3, #18
 8000794:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	68ba      	ldr	r2, [r7, #8]
 80007a6:	430a      	orrs	r2, r1
 80007a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	6a1b      	ldr	r3, [r3, #32]
 80007b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	4a64      	ldr	r2, [pc, #400]	; (800094c <HAL_I2C_Init+0x23c>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d802      	bhi.n	80007c4 <HAL_I2C_Init+0xb4>
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	3301      	adds	r3, #1
 80007c2:	e009      	b.n	80007d8 <HAL_I2C_Init+0xc8>
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80007ca:	fb02 f303 	mul.w	r3, r2, r3
 80007ce:	4a63      	ldr	r2, [pc, #396]	; (800095c <HAL_I2C_Init+0x24c>)
 80007d0:	fba2 2303 	umull	r2, r3, r2, r3
 80007d4:	099b      	lsrs	r3, r3, #6
 80007d6:	3301      	adds	r3, #1
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	6812      	ldr	r2, [r2, #0]
 80007dc:	430b      	orrs	r3, r1
 80007de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80007ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	4956      	ldr	r1, [pc, #344]	; (800094c <HAL_I2C_Init+0x23c>)
 80007f4:	428b      	cmp	r3, r1
 80007f6:	d80d      	bhi.n	8000814 <HAL_I2C_Init+0x104>
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	1e59      	subs	r1, r3, #1
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	fbb1 f3f3 	udiv	r3, r1, r3
 8000806:	3301      	adds	r3, #1
 8000808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800080c:	2b04      	cmp	r3, #4
 800080e:	bf38      	it	cc
 8000810:	2304      	movcc	r3, #4
 8000812:	e04f      	b.n	80008b4 <HAL_I2C_Init+0x1a4>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d111      	bne.n	8000840 <HAL_I2C_Init+0x130>
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	1e58      	subs	r0, r3, #1
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6859      	ldr	r1, [r3, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	440b      	add	r3, r1
 800082a:	fbb0 f3f3 	udiv	r3, r0, r3
 800082e:	3301      	adds	r3, #1
 8000830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000834:	2b00      	cmp	r3, #0
 8000836:	bf0c      	ite	eq
 8000838:	2301      	moveq	r3, #1
 800083a:	2300      	movne	r3, #0
 800083c:	b2db      	uxtb	r3, r3
 800083e:	e012      	b.n	8000866 <HAL_I2C_Init+0x156>
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	1e58      	subs	r0, r3, #1
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6859      	ldr	r1, [r3, #4]
 8000848:	460b      	mov	r3, r1
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	440b      	add	r3, r1
 800084e:	0099      	lsls	r1, r3, #2
 8000850:	440b      	add	r3, r1
 8000852:	fbb0 f3f3 	udiv	r3, r0, r3
 8000856:	3301      	adds	r3, #1
 8000858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800085c:	2b00      	cmp	r3, #0
 800085e:	bf0c      	ite	eq
 8000860:	2301      	moveq	r3, #1
 8000862:	2300      	movne	r3, #0
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_I2C_Init+0x15e>
 800086a:	2301      	movs	r3, #1
 800086c:	e022      	b.n	80008b4 <HAL_I2C_Init+0x1a4>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10e      	bne.n	8000894 <HAL_I2C_Init+0x184>
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	1e58      	subs	r0, r3, #1
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6859      	ldr	r1, [r3, #4]
 800087e:	460b      	mov	r3, r1
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	440b      	add	r3, r1
 8000884:	fbb0 f3f3 	udiv	r3, r0, r3
 8000888:	3301      	adds	r3, #1
 800088a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800088e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000892:	e00f      	b.n	80008b4 <HAL_I2C_Init+0x1a4>
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	1e58      	subs	r0, r3, #1
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6859      	ldr	r1, [r3, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	440b      	add	r3, r1
 80008a2:	0099      	lsls	r1, r3, #2
 80008a4:	440b      	add	r3, r1
 80008a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80008aa:	3301      	adds	r3, #1
 80008ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008b4:	6879      	ldr	r1, [r7, #4]
 80008b6:	6809      	ldr	r1, [r1, #0]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	69da      	ldr	r2, [r3, #28]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6a1b      	ldr	r3, [r3, #32]
 80008ce:	431a      	orrs	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	430a      	orrs	r2, r1
 80008d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80008e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	6911      	ldr	r1, [r2, #16]
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	68d2      	ldr	r2, [r2, #12]
 80008ee:	4311      	orrs	r1, r2
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	6812      	ldr	r2, [r2, #0]
 80008f4:	430b      	orrs	r3, r1
 80008f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	695a      	ldr	r2, [r3, #20]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	431a      	orrs	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	430a      	orrs	r2, r1
 8000912:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f042 0201 	orr.w	r2, r2, #1
 8000922:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2220      	movs	r2, #32
 800092e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	000186a0 	.word	0x000186a0
 8000950:	001e847f 	.word	0x001e847f
 8000954:	003d08ff 	.word	0x003d08ff
 8000958:	431bde83 	.word	0x431bde83
 800095c:	10624dd3 	.word	0x10624dd3

08000960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d101      	bne.n	8000972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	e26c      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	2b00      	cmp	r3, #0
 800097c:	f000 8087 	beq.w	8000a8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000980:	4b92      	ldr	r3, [pc, #584]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 030c 	and.w	r3, r3, #12
 8000988:	2b04      	cmp	r3, #4
 800098a:	d00c      	beq.n	80009a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800098c:	4b8f      	ldr	r3, [pc, #572]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 030c 	and.w	r3, r3, #12
 8000994:	2b08      	cmp	r3, #8
 8000996:	d112      	bne.n	80009be <HAL_RCC_OscConfig+0x5e>
 8000998:	4b8c      	ldr	r3, [pc, #560]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009a4:	d10b      	bne.n	80009be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009a6:	4b89      	ldr	r3, [pc, #548]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d06c      	beq.n	8000a8c <HAL_RCC_OscConfig+0x12c>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d168      	bne.n	8000a8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e246      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009c6:	d106      	bne.n	80009d6 <HAL_RCC_OscConfig+0x76>
 80009c8:	4b80      	ldr	r3, [pc, #512]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a7f      	ldr	r2, [pc, #508]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 80009ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	e02e      	b.n	8000a34 <HAL_RCC_OscConfig+0xd4>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d10c      	bne.n	80009f8 <HAL_RCC_OscConfig+0x98>
 80009de:	4b7b      	ldr	r3, [pc, #492]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a7a      	ldr	r2, [pc, #488]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 80009e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009e8:	6013      	str	r3, [r2, #0]
 80009ea:	4b78      	ldr	r3, [pc, #480]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a77      	ldr	r2, [pc, #476]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 80009f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009f4:	6013      	str	r3, [r2, #0]
 80009f6:	e01d      	b.n	8000a34 <HAL_RCC_OscConfig+0xd4>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a00:	d10c      	bne.n	8000a1c <HAL_RCC_OscConfig+0xbc>
 8000a02:	4b72      	ldr	r3, [pc, #456]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a71      	ldr	r2, [pc, #452]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a0c:	6013      	str	r3, [r2, #0]
 8000a0e:	4b6f      	ldr	r3, [pc, #444]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a6e      	ldr	r2, [pc, #440]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a18:	6013      	str	r3, [r2, #0]
 8000a1a:	e00b      	b.n	8000a34 <HAL_RCC_OscConfig+0xd4>
 8000a1c:	4b6b      	ldr	r3, [pc, #428]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a6a      	ldr	r2, [pc, #424]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	4b68      	ldr	r3, [pc, #416]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a67      	ldr	r2, [pc, #412]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d013      	beq.n	8000a64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a3c:	f7ff fbde 	bl	80001fc <HAL_GetTick>
 8000a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a42:	e008      	b.n	8000a56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a44:	f7ff fbda 	bl	80001fc <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	2b64      	cmp	r3, #100	; 0x64
 8000a50:	d901      	bls.n	8000a56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000a52:	2303      	movs	r3, #3
 8000a54:	e1fa      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a56:	4b5d      	ldr	r3, [pc, #372]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d0f0      	beq.n	8000a44 <HAL_RCC_OscConfig+0xe4>
 8000a62:	e014      	b.n	8000a8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a64:	f7ff fbca 	bl	80001fc <HAL_GetTick>
 8000a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a6a:	e008      	b.n	8000a7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a6c:	f7ff fbc6 	bl	80001fc <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	2b64      	cmp	r3, #100	; 0x64
 8000a78:	d901      	bls.n	8000a7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	e1e6      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a7e:	4b53      	ldr	r3, [pc, #332]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1f0      	bne.n	8000a6c <HAL_RCC_OscConfig+0x10c>
 8000a8a:	e000      	b.n	8000a8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d063      	beq.n	8000b62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a9a:	4b4c      	ldr	r3, [pc, #304]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f003 030c 	and.w	r3, r3, #12
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d00b      	beq.n	8000abe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000aa6:	4b49      	ldr	r3, [pc, #292]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f003 030c 	and.w	r3, r3, #12
 8000aae:	2b08      	cmp	r3, #8
 8000ab0:	d11c      	bne.n	8000aec <HAL_RCC_OscConfig+0x18c>
 8000ab2:	4b46      	ldr	r3, [pc, #280]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d116      	bne.n	8000aec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000abe:	4b43      	ldr	r3, [pc, #268]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d005      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x176>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	691b      	ldr	r3, [r3, #16]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d001      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e1ba      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ad6:	4b3d      	ldr	r3, [pc, #244]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	4939      	ldr	r1, [pc, #228]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000aea:	e03a      	b.n	8000b62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	691b      	ldr	r3, [r3, #16]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d020      	beq.n	8000b36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000af4:	4b36      	ldr	r3, [pc, #216]	; (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000afa:	f7ff fb7f 	bl	80001fc <HAL_GetTick>
 8000afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b00:	e008      	b.n	8000b14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b02:	f7ff fb7b 	bl	80001fc <HAL_GetTick>
 8000b06:	4602      	mov	r2, r0
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d901      	bls.n	8000b14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000b10:	2303      	movs	r3, #3
 8000b12:	e19b      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b14:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f003 0302 	and.w	r3, r3, #2
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0f0      	beq.n	8000b02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b20:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	4927      	ldr	r1, [pc, #156]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000b30:	4313      	orrs	r3, r2
 8000b32:	600b      	str	r3, [r1, #0]
 8000b34:	e015      	b.n	8000b62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b36:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <HAL_RCC_OscConfig+0x270>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b3c:	f7ff fb5e 	bl	80001fc <HAL_GetTick>
 8000b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b42:	e008      	b.n	8000b56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b44:	f7ff fb5a 	bl	80001fc <HAL_GetTick>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d901      	bls.n	8000b56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000b52:	2303      	movs	r3, #3
 8000b54:	e17a      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b56:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1f0      	bne.n	8000b44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f003 0308 	and.w	r3, r3, #8
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d03a      	beq.n	8000be4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d019      	beq.n	8000baa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <HAL_RCC_OscConfig+0x274>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b7c:	f7ff fb3e 	bl	80001fc <HAL_GetTick>
 8000b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b82:	e008      	b.n	8000b96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b84:	f7ff fb3a 	bl	80001fc <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d901      	bls.n	8000b96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e15a      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <HAL_RCC_OscConfig+0x26c>)
 8000b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0f0      	beq.n	8000b84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f000 fada 	bl	800115c <RCC_Delay>
 8000ba8:	e01c      	b.n	8000be4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_RCC_OscConfig+0x274>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bb0:	f7ff fb24 	bl	80001fc <HAL_GetTick>
 8000bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bb6:	e00f      	b.n	8000bd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bb8:	f7ff fb20 	bl	80001fc <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d908      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e140      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	42420000 	.word	0x42420000
 8000bd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bd8:	4b9e      	ldr	r3, [pc, #632]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1e9      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f000 80a6 	beq.w	8000d3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bf6:	4b97      	ldr	r3, [pc, #604]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d10d      	bne.n	8000c1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b94      	ldr	r3, [pc, #592]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	4a93      	ldr	r2, [pc, #588]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	61d3      	str	r3, [r2, #28]
 8000c0e:	4b91      	ldr	r3, [pc, #580]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c1e:	4b8e      	ldr	r3, [pc, #568]	; (8000e58 <HAL_RCC_OscConfig+0x4f8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d118      	bne.n	8000c5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c2a:	4b8b      	ldr	r3, [pc, #556]	; (8000e58 <HAL_RCC_OscConfig+0x4f8>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a8a      	ldr	r2, [pc, #552]	; (8000e58 <HAL_RCC_OscConfig+0x4f8>)
 8000c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c36:	f7ff fae1 	bl	80001fc <HAL_GetTick>
 8000c3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c3c:	e008      	b.n	8000c50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c3e:	f7ff fadd 	bl	80001fc <HAL_GetTick>
 8000c42:	4602      	mov	r2, r0
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	2b64      	cmp	r3, #100	; 0x64
 8000c4a:	d901      	bls.n	8000c50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	e0fd      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c50:	4b81      	ldr	r3, [pc, #516]	; (8000e58 <HAL_RCC_OscConfig+0x4f8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d0f0      	beq.n	8000c3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d106      	bne.n	8000c72 <HAL_RCC_OscConfig+0x312>
 8000c64:	4b7b      	ldr	r3, [pc, #492]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000c66:	6a1b      	ldr	r3, [r3, #32]
 8000c68:	4a7a      	ldr	r2, [pc, #488]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6213      	str	r3, [r2, #32]
 8000c70:	e02d      	b.n	8000cce <HAL_RCC_OscConfig+0x36e>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10c      	bne.n	8000c94 <HAL_RCC_OscConfig+0x334>
 8000c7a:	4b76      	ldr	r3, [pc, #472]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000c7c:	6a1b      	ldr	r3, [r3, #32]
 8000c7e:	4a75      	ldr	r2, [pc, #468]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000c80:	f023 0301 	bic.w	r3, r3, #1
 8000c84:	6213      	str	r3, [r2, #32]
 8000c86:	4b73      	ldr	r3, [pc, #460]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000c88:	6a1b      	ldr	r3, [r3, #32]
 8000c8a:	4a72      	ldr	r2, [pc, #456]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000c8c:	f023 0304 	bic.w	r3, r3, #4
 8000c90:	6213      	str	r3, [r2, #32]
 8000c92:	e01c      	b.n	8000cce <HAL_RCC_OscConfig+0x36e>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	2b05      	cmp	r3, #5
 8000c9a:	d10c      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x356>
 8000c9c:	4b6d      	ldr	r3, [pc, #436]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000c9e:	6a1b      	ldr	r3, [r3, #32]
 8000ca0:	4a6c      	ldr	r2, [pc, #432]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	6213      	str	r3, [r2, #32]
 8000ca8:	4b6a      	ldr	r3, [pc, #424]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000caa:	6a1b      	ldr	r3, [r3, #32]
 8000cac:	4a69      	ldr	r2, [pc, #420]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6213      	str	r3, [r2, #32]
 8000cb4:	e00b      	b.n	8000cce <HAL_RCC_OscConfig+0x36e>
 8000cb6:	4b67      	ldr	r3, [pc, #412]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000cb8:	6a1b      	ldr	r3, [r3, #32]
 8000cba:	4a66      	ldr	r2, [pc, #408]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000cbc:	f023 0301 	bic.w	r3, r3, #1
 8000cc0:	6213      	str	r3, [r2, #32]
 8000cc2:	4b64      	ldr	r3, [pc, #400]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000cc4:	6a1b      	ldr	r3, [r3, #32]
 8000cc6:	4a63      	ldr	r2, [pc, #396]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000cc8:	f023 0304 	bic.w	r3, r3, #4
 8000ccc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d015      	beq.n	8000d02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cd6:	f7ff fa91 	bl	80001fc <HAL_GetTick>
 8000cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cdc:	e00a      	b.n	8000cf4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cde:	f7ff fa8d 	bl	80001fc <HAL_GetTick>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d901      	bls.n	8000cf4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e0ab      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cf4:	4b57      	ldr	r3, [pc, #348]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000cf6:	6a1b      	ldr	r3, [r3, #32]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d0ee      	beq.n	8000cde <HAL_RCC_OscConfig+0x37e>
 8000d00:	e014      	b.n	8000d2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d02:	f7ff fa7b 	bl	80001fc <HAL_GetTick>
 8000d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d08:	e00a      	b.n	8000d20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d0a:	f7ff fa77 	bl	80001fc <HAL_GetTick>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d901      	bls.n	8000d20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e095      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d20:	4b4c      	ldr	r3, [pc, #304]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000d22:	6a1b      	ldr	r3, [r3, #32]
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1ee      	bne.n	8000d0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000d2c:	7dfb      	ldrb	r3, [r7, #23]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d105      	bne.n	8000d3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d32:	4b48      	ldr	r3, [pc, #288]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	4a47      	ldr	r2, [pc, #284]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f000 8081 	beq.w	8000e4a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d48:	4b42      	ldr	r3, [pc, #264]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 030c 	and.w	r3, r3, #12
 8000d50:	2b08      	cmp	r3, #8
 8000d52:	d061      	beq.n	8000e18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d146      	bne.n	8000dea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d5c:	4b3f      	ldr	r3, [pc, #252]	; (8000e5c <HAL_RCC_OscConfig+0x4fc>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d62:	f7ff fa4b 	bl	80001fc <HAL_GetTick>
 8000d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d68:	e008      	b.n	8000d7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d6a:	f7ff fa47 	bl	80001fc <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d901      	bls.n	8000d7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e067      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d7c:	4b35      	ldr	r3, [pc, #212]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1f0      	bne.n	8000d6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a1b      	ldr	r3, [r3, #32]
 8000d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d90:	d108      	bne.n	8000da4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d92:	4b30      	ldr	r3, [pc, #192]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	492d      	ldr	r1, [pc, #180]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000da0:	4313      	orrs	r3, r2
 8000da2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000da4:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a19      	ldr	r1, [r3, #32]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db4:	430b      	orrs	r3, r1
 8000db6:	4927      	ldr	r1, [pc, #156]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000db8:	4313      	orrs	r3, r2
 8000dba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <HAL_RCC_OscConfig+0x4fc>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc2:	f7ff fa1b 	bl	80001fc <HAL_GetTick>
 8000dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000dc8:	e008      	b.n	8000ddc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dca:	f7ff fa17 	bl	80001fc <HAL_GetTick>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d901      	bls.n	8000ddc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e037      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0f0      	beq.n	8000dca <HAL_RCC_OscConfig+0x46a>
 8000de8:	e02f      	b.n	8000e4a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <HAL_RCC_OscConfig+0x4fc>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df0:	f7ff fa04 	bl	80001fc <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000df8:	f7ff fa00 	bl	80001fc <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e020      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e0a:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f0      	bne.n	8000df8 <HAL_RCC_OscConfig+0x498>
 8000e16:	e018      	b.n	8000e4a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d101      	bne.n	8000e24 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e013      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_RCC_OscConfig+0x4f4>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d106      	bne.n	8000e46 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d001      	beq.n	8000e4a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40007000 	.word	0x40007000
 8000e5c:	42420060 	.word	0x42420060

08000e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e0d0      	b.n	8001016 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e74:	4b6a      	ldr	r3, [pc, #424]	; (8001020 <HAL_RCC_ClockConfig+0x1c0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d910      	bls.n	8000ea4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e82:	4b67      	ldr	r3, [pc, #412]	; (8001020 <HAL_RCC_ClockConfig+0x1c0>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f023 0207 	bic.w	r2, r3, #7
 8000e8a:	4965      	ldr	r1, [pc, #404]	; (8001020 <HAL_RCC_ClockConfig+0x1c0>)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e92:	4b63      	ldr	r3, [pc, #396]	; (8001020 <HAL_RCC_ClockConfig+0x1c0>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d001      	beq.n	8000ea4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e0b8      	b.n	8001016 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d020      	beq.n	8000ef2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d005      	beq.n	8000ec8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ebc:	4b59      	ldr	r3, [pc, #356]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	4a58      	ldr	r2, [pc, #352]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000ec2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000ec6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0308 	and.w	r3, r3, #8
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d005      	beq.n	8000ee0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ed4:	4b53      	ldr	r3, [pc, #332]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	4a52      	ldr	r2, [pc, #328]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000eda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000ede:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ee0:	4b50      	ldr	r3, [pc, #320]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	494d      	ldr	r1, [pc, #308]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d040      	beq.n	8000f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d107      	bne.n	8000f16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f06:	4b47      	ldr	r3, [pc, #284]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d115      	bne.n	8000f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e07f      	b.n	8001016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d107      	bne.n	8000f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f1e:	4b41      	ldr	r3, [pc, #260]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d109      	bne.n	8000f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e073      	b.n	8001016 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f2e:	4b3d      	ldr	r3, [pc, #244]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e06b      	b.n	8001016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f3e:	4b39      	ldr	r3, [pc, #228]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f023 0203 	bic.w	r2, r3, #3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	4936      	ldr	r1, [pc, #216]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f50:	f7ff f954 	bl	80001fc <HAL_GetTick>
 8000f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f56:	e00a      	b.n	8000f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f58:	f7ff f950 	bl	80001fc <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e053      	b.n	8001016 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f6e:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 020c 	and.w	r2, r3, #12
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d1eb      	bne.n	8000f58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000f80:	4b27      	ldr	r3, [pc, #156]	; (8001020 <HAL_RCC_ClockConfig+0x1c0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d210      	bcs.n	8000fb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f8e:	4b24      	ldr	r3, [pc, #144]	; (8001020 <HAL_RCC_ClockConfig+0x1c0>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f023 0207 	bic.w	r2, r3, #7
 8000f96:	4922      	ldr	r1, [pc, #136]	; (8001020 <HAL_RCC_ClockConfig+0x1c0>)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f9e:	4b20      	ldr	r3, [pc, #128]	; (8001020 <HAL_RCC_ClockConfig+0x1c0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d001      	beq.n	8000fb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e032      	b.n	8001016 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d008      	beq.n	8000fce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	4916      	ldr	r1, [pc, #88]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0308 	and.w	r3, r3, #8
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d009      	beq.n	8000fee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	490e      	ldr	r1, [pc, #56]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000fea:	4313      	orrs	r3, r2
 8000fec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000fee:	f000 f821 	bl	8001034 <HAL_RCC_GetSysClockFreq>
 8000ff2:	4601      	mov	r1, r0
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	091b      	lsrs	r3, r3, #4
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <HAL_RCC_ClockConfig+0x1c8>)
 8001000:	5cd3      	ldrb	r3, [r2, r3]
 8001002:	fa21 f303 	lsr.w	r3, r1, r3
 8001006:	4a09      	ldr	r2, [pc, #36]	; (800102c <HAL_RCC_ClockConfig+0x1cc>)
 8001008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_RCC_ClockConfig+0x1d0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff f8b2 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40022000 	.word	0x40022000
 8001024:	40021000 	.word	0x40021000
 8001028:	08002210 	.word	0x08002210
 800102c:	20000008 	.word	0x20000008
 8001030:	20000000 	.word	0x20000000

08001034 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001034:	b490      	push	{r4, r7}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800103a:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800103c:	1d3c      	adds	r4, r7, #4
 800103e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800105e:	4b23      	ldr	r3, [pc, #140]	; (80010ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f003 030c 	and.w	r3, r3, #12
 800106a:	2b04      	cmp	r3, #4
 800106c:	d002      	beq.n	8001074 <HAL_RCC_GetSysClockFreq+0x40>
 800106e:	2b08      	cmp	r3, #8
 8001070:	d003      	beq.n	800107a <HAL_RCC_GetSysClockFreq+0x46>
 8001072:	e02d      	b.n	80010d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001074:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001076:	623b      	str	r3, [r7, #32]
      break;
 8001078:	e02d      	b.n	80010d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	0c9b      	lsrs	r3, r3, #18
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001086:	4413      	add	r3, r2
 8001088:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800108c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d013      	beq.n	80010c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	0c5b      	lsrs	r3, r3, #17
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010a6:	4413      	add	r3, r2
 80010a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80010ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80010b2:	fb02 f203 	mul.w	r2, r2, r3
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
 80010be:	e004      	b.n	80010ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80010c4:	fb02 f303 	mul.w	r3, r2, r3
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	623b      	str	r3, [r7, #32]
      break;
 80010ce:	e002      	b.n	80010d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80010d2:	623b      	str	r3, [r7, #32]
      break;
 80010d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80010d6:	6a3b      	ldr	r3, [r7, #32]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3728      	adds	r7, #40	; 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc90      	pop	{r4, r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	080021fc 	.word	0x080021fc
 80010e8:	0800220c 	.word	0x0800220c
 80010ec:	40021000 	.word	0x40021000
 80010f0:	007a1200 	.word	0x007a1200
 80010f4:	003d0900 	.word	0x003d0900

080010f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80010fc:	4b02      	ldr	r3, [pc, #8]	; (8001108 <HAL_RCC_GetHCLKFreq+0x10>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	20000008 	.word	0x20000008

0800110c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001110:	f7ff fff2 	bl	80010f8 <HAL_RCC_GetHCLKFreq>
 8001114:	4601      	mov	r1, r0
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	4a03      	ldr	r2, [pc, #12]	; (8001130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001122:	5cd3      	ldrb	r3, [r2, r3]
 8001124:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001128:	4618      	mov	r0, r3
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000
 8001130:	08002220 	.word	0x08002220

08001134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001138:	f7ff ffde 	bl	80010f8 <HAL_RCC_GetHCLKFreq>
 800113c:	4601      	mov	r1, r0
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	0adb      	lsrs	r3, r3, #11
 8001144:	f003 0307 	and.w	r3, r3, #7
 8001148:	4a03      	ldr	r2, [pc, #12]	; (8001158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800114a:	5cd3      	ldrb	r3, [r2, r3]
 800114c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001150:	4618      	mov	r0, r3
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40021000 	.word	0x40021000
 8001158:	08002220 	.word	0x08002220

0800115c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <RCC_Delay+0x34>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <RCC_Delay+0x38>)
 800116a:	fba2 2303 	umull	r2, r3, r2, r3
 800116e:	0a5b      	lsrs	r3, r3, #9
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	fb02 f303 	mul.w	r3, r2, r3
 8001176:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001178:	bf00      	nop
  }
  while (Delay --);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	1e5a      	subs	r2, r3, #1
 800117e:	60fa      	str	r2, [r7, #12]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1f9      	bne.n	8001178 <RCC_Delay+0x1c>
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008
 8001194:	10624dd3 	.word	0x10624dd3

08001198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e01d      	b.n	80011e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d106      	bne.n	80011c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 fec0 	bl	8001f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2202      	movs	r2, #2
 80011c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3304      	adds	r3, #4
 80011d4:	4619      	mov	r1, r3
 80011d6:	4610      	mov	r0, r2
 80011d8:	f000 f9f6 	bl	80015c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b02      	cmp	r3, #2
 8001202:	d122      	bne.n	800124a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b02      	cmp	r3, #2
 8001210:	d11b      	bne.n	800124a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f06f 0202 	mvn.w	r2, #2
 800121a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 f9ad 	bl	8001590 <HAL_TIM_IC_CaptureCallback>
 8001236:	e005      	b.n	8001244 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 f9a0 	bl	800157e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f9af 	bl	80015a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b04      	cmp	r3, #4
 8001256:	d122      	bne.n	800129e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	2b04      	cmp	r3, #4
 8001264:	d11b      	bne.n	800129e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f06f 0204 	mvn.w	r2, #4
 800126e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2202      	movs	r2, #2
 8001274:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 f983 	bl	8001590 <HAL_TIM_IC_CaptureCallback>
 800128a:	e005      	b.n	8001298 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f976 	bl	800157e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 f985 	bl	80015a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d122      	bne.n	80012f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d11b      	bne.n	80012f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f06f 0208 	mvn.w	r2, #8
 80012c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2204      	movs	r2, #4
 80012c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 f959 	bl	8001590 <HAL_TIM_IC_CaptureCallback>
 80012de:	e005      	b.n	80012ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 f94c 	bl	800157e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 f95b 	bl	80015a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	f003 0310 	and.w	r3, r3, #16
 80012fc:	2b10      	cmp	r3, #16
 80012fe:	d122      	bne.n	8001346 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	2b10      	cmp	r3, #16
 800130c:	d11b      	bne.n	8001346 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f06f 0210 	mvn.w	r2, #16
 8001316:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2208      	movs	r2, #8
 800131c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 f92f 	bl	8001590 <HAL_TIM_IC_CaptureCallback>
 8001332:	e005      	b.n	8001340 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 f922 	bl	800157e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f931 	bl	80015a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b01      	cmp	r3, #1
 8001352:	d10e      	bne.n	8001372 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b01      	cmp	r3, #1
 8001360:	d107      	bne.n	8001372 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f06f 0201 	mvn.w	r2, #1
 800136a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 f8fd 	bl	800156c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137c:	2b80      	cmp	r3, #128	; 0x80
 800137e:	d10e      	bne.n	800139e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138a:	2b80      	cmp	r3, #128	; 0x80
 800138c:	d107      	bne.n	800139e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 fa5a 	bl	8001852 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a8:	2b40      	cmp	r3, #64	; 0x40
 80013aa:	d10e      	bne.n	80013ca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b6:	2b40      	cmp	r3, #64	; 0x40
 80013b8:	d107      	bne.n	80013ca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80013c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f8f5 	bl	80015b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	f003 0320 	and.w	r3, r3, #32
 80013d4:	2b20      	cmp	r3, #32
 80013d6:	d10e      	bne.n	80013f6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	f003 0320 	and.w	r3, r3, #32
 80013e2:	2b20      	cmp	r3, #32
 80013e4:	d107      	bne.n	80013f6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f06f 0220 	mvn.w	r2, #32
 80013ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 fa25 	bl	8001840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b084      	sub	sp, #16
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_TIM_ConfigClockSource+0x18>
 8001412:	2302      	movs	r3, #2
 8001414:	e0a6      	b.n	8001564 <HAL_TIM_ConfigClockSource+0x166>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2202      	movs	r2, #2
 8001422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001434:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800143c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b40      	cmp	r3, #64	; 0x40
 800144c:	d067      	beq.n	800151e <HAL_TIM_ConfigClockSource+0x120>
 800144e:	2b40      	cmp	r3, #64	; 0x40
 8001450:	d80b      	bhi.n	800146a <HAL_TIM_ConfigClockSource+0x6c>
 8001452:	2b10      	cmp	r3, #16
 8001454:	d073      	beq.n	800153e <HAL_TIM_ConfigClockSource+0x140>
 8001456:	2b10      	cmp	r3, #16
 8001458:	d802      	bhi.n	8001460 <HAL_TIM_ConfigClockSource+0x62>
 800145a:	2b00      	cmp	r3, #0
 800145c:	d06f      	beq.n	800153e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800145e:	e078      	b.n	8001552 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001460:	2b20      	cmp	r3, #32
 8001462:	d06c      	beq.n	800153e <HAL_TIM_ConfigClockSource+0x140>
 8001464:	2b30      	cmp	r3, #48	; 0x30
 8001466:	d06a      	beq.n	800153e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001468:	e073      	b.n	8001552 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800146a:	2b70      	cmp	r3, #112	; 0x70
 800146c:	d00d      	beq.n	800148a <HAL_TIM_ConfigClockSource+0x8c>
 800146e:	2b70      	cmp	r3, #112	; 0x70
 8001470:	d804      	bhi.n	800147c <HAL_TIM_ConfigClockSource+0x7e>
 8001472:	2b50      	cmp	r3, #80	; 0x50
 8001474:	d033      	beq.n	80014de <HAL_TIM_ConfigClockSource+0xe0>
 8001476:	2b60      	cmp	r3, #96	; 0x60
 8001478:	d041      	beq.n	80014fe <HAL_TIM_ConfigClockSource+0x100>
      break;
 800147a:	e06a      	b.n	8001552 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800147c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001480:	d066      	beq.n	8001550 <HAL_TIM_ConfigClockSource+0x152>
 8001482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001486:	d017      	beq.n	80014b8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001488:	e063      	b.n	8001552 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6818      	ldr	r0, [r3, #0]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	6899      	ldr	r1, [r3, #8]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	f000 f96e 	bl	800177a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80014ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	609a      	str	r2, [r3, #8]
      break;
 80014b6:	e04c      	b.n	8001552 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6818      	ldr	r0, [r3, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	6899      	ldr	r1, [r3, #8]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	f000 f957 	bl	800177a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014da:	609a      	str	r2, [r3, #8]
      break;
 80014dc:	e039      	b.n	8001552 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	6859      	ldr	r1, [r3, #4]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	461a      	mov	r2, r3
 80014ec:	f000 f8ce 	bl	800168c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2150      	movs	r1, #80	; 0x50
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f925 	bl	8001746 <TIM_ITRx_SetConfig>
      break;
 80014fc:	e029      	b.n	8001552 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	6859      	ldr	r1, [r3, #4]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	461a      	mov	r2, r3
 800150c:	f000 f8ec 	bl	80016e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2160      	movs	r1, #96	; 0x60
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f915 	bl	8001746 <TIM_ITRx_SetConfig>
      break;
 800151c:	e019      	b.n	8001552 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6818      	ldr	r0, [r3, #0]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	6859      	ldr	r1, [r3, #4]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	461a      	mov	r2, r3
 800152c:	f000 f8ae 	bl	800168c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2140      	movs	r1, #64	; 0x40
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f905 	bl	8001746 <TIM_ITRx_SetConfig>
      break;
 800153c:	e009      	b.n	8001552 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4619      	mov	r1, r3
 8001548:	4610      	mov	r0, r2
 800154a:	f000 f8fc 	bl	8001746 <TIM_ITRx_SetConfig>
      break;
 800154e:	e000      	b.n	8001552 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001550:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr

080015a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
	...

080015c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a29      	ldr	r2, [pc, #164]	; (8001680 <TIM_Base_SetConfig+0xb8>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d00b      	beq.n	80015f8 <TIM_Base_SetConfig+0x30>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e6:	d007      	beq.n	80015f8 <TIM_Base_SetConfig+0x30>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a26      	ldr	r2, [pc, #152]	; (8001684 <TIM_Base_SetConfig+0xbc>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d003      	beq.n	80015f8 <TIM_Base_SetConfig+0x30>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a25      	ldr	r2, [pc, #148]	; (8001688 <TIM_Base_SetConfig+0xc0>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d108      	bne.n	800160a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	4313      	orrs	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <TIM_Base_SetConfig+0xb8>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d00b      	beq.n	800162a <TIM_Base_SetConfig+0x62>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001618:	d007      	beq.n	800162a <TIM_Base_SetConfig+0x62>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a19      	ldr	r2, [pc, #100]	; (8001684 <TIM_Base_SetConfig+0xbc>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d003      	beq.n	800162a <TIM_Base_SetConfig+0x62>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a18      	ldr	r2, [pc, #96]	; (8001688 <TIM_Base_SetConfig+0xc0>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d108      	bne.n	800163c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	4313      	orrs	r3, r2
 800163a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	4313      	orrs	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a07      	ldr	r2, [pc, #28]	; (8001680 <TIM_Base_SetConfig+0xb8>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d103      	bne.n	8001670 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	615a      	str	r2, [r3, #20]
}
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	40012c00 	.word	0x40012c00
 8001684:	40000400 	.word	0x40000400
 8001688:	40000800 	.word	0x40000800

0800168c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800168c:	b480      	push	{r7}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	f023 0201 	bic.w	r2, r3, #1
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f023 030a 	bic.w	r3, r3, #10
 80016c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	621a      	str	r2, [r3, #32]
}
 80016de:	bf00      	nop
 80016e0:	371c      	adds	r7, #28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	f023 0210 	bic.w	r2, r3, #16
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001712:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	031b      	lsls	r3, r3, #12
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	4313      	orrs	r3, r2
 800171c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001724:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	621a      	str	r2, [r3, #32]
}
 800173c:	bf00      	nop
 800173e:	371c      	adds	r7, #28
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001746:	b480      	push	{r7}
 8001748:	b085      	sub	sp, #20
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800175c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4313      	orrs	r3, r2
 8001764:	f043 0307 	orr.w	r3, r3, #7
 8001768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	609a      	str	r2, [r3, #8]
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800177a:	b480      	push	{r7}
 800177c:	b087      	sub	sp, #28
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001794:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	021a      	lsls	r2, r3, #8
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	431a      	orrs	r2, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	609a      	str	r2, [r3, #8]
}
 80017ae:	bf00      	nop
 80017b0:	371c      	adds	r7, #28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e032      	b.n	8001836 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2202      	movs	r2, #2
 80017dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001808:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	4313      	orrs	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e03f      	b.n	80018f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fb9a 	bl	8001fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2224      	movs	r2, #36	; 0x24
 8001894:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f829 	bl	8001900 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2220      	movs	r2, #32
 80018e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2220      	movs	r2, #32
 80018f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	4313      	orrs	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800193a:	f023 030c 	bic.w	r3, r3, #12
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	68f9      	ldr	r1, [r7, #12]
 8001944:	430b      	orrs	r3, r1
 8001946:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699a      	ldr	r2, [r3, #24]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a52      	ldr	r2, [pc, #328]	; (8001aac <UART_SetConfig+0x1ac>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d14e      	bne.n	8001a06 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001968:	f7ff fbe4 	bl	8001134 <HAL_RCC_GetPCLK2Freq>
 800196c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	009a      	lsls	r2, r3, #2
 8001978:	441a      	add	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	fbb2 f3f3 	udiv	r3, r2, r3
 8001984:	4a4a      	ldr	r2, [pc, #296]	; (8001ab0 <UART_SetConfig+0x1b0>)
 8001986:	fba2 2303 	umull	r2, r3, r2, r3
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	0119      	lsls	r1, r3, #4
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	009a      	lsls	r2, r3, #2
 8001998:	441a      	add	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80019a4:	4b42      	ldr	r3, [pc, #264]	; (8001ab0 <UART_SetConfig+0x1b0>)
 80019a6:	fba3 0302 	umull	r0, r3, r3, r2
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	2064      	movs	r0, #100	; 0x64
 80019ae:	fb00 f303 	mul.w	r3, r0, r3
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	3332      	adds	r3, #50	; 0x32
 80019b8:	4a3d      	ldr	r2, [pc, #244]	; (8001ab0 <UART_SetConfig+0x1b0>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019c4:	4419      	add	r1, r3
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	009a      	lsls	r2, r3, #2
 80019d0:	441a      	add	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80019dc:	4b34      	ldr	r3, [pc, #208]	; (8001ab0 <UART_SetConfig+0x1b0>)
 80019de:	fba3 0302 	umull	r0, r3, r3, r2
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	2064      	movs	r0, #100	; 0x64
 80019e6:	fb00 f303 	mul.w	r3, r0, r3
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	3332      	adds	r3, #50	; 0x32
 80019f0:	4a2f      	ldr	r2, [pc, #188]	; (8001ab0 <UART_SetConfig+0x1b0>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	f003 020f 	and.w	r2, r3, #15
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	440a      	add	r2, r1
 8001a02:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001a04:	e04d      	b.n	8001aa2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001a06:	f7ff fb81 	bl	800110c <HAL_RCC_GetPCLK1Freq>
 8001a0a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	009a      	lsls	r2, r3, #2
 8001a16:	441a      	add	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a22:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <UART_SetConfig+0x1b0>)
 8001a24:	fba2 2303 	umull	r2, r3, r2, r3
 8001a28:	095b      	lsrs	r3, r3, #5
 8001a2a:	0119      	lsls	r1, r3, #4
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	009a      	lsls	r2, r3, #2
 8001a36:	441a      	add	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <UART_SetConfig+0x1b0>)
 8001a44:	fba3 0302 	umull	r0, r3, r3, r2
 8001a48:	095b      	lsrs	r3, r3, #5
 8001a4a:	2064      	movs	r0, #100	; 0x64
 8001a4c:	fb00 f303 	mul.w	r3, r0, r3
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	3332      	adds	r3, #50	; 0x32
 8001a56:	4a16      	ldr	r2, [pc, #88]	; (8001ab0 <UART_SetConfig+0x1b0>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	095b      	lsrs	r3, r3, #5
 8001a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a62:	4419      	add	r1, r3
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	009a      	lsls	r2, r3, #2
 8001a6e:	441a      	add	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <UART_SetConfig+0x1b0>)
 8001a7c:	fba3 0302 	umull	r0, r3, r3, r2
 8001a80:	095b      	lsrs	r3, r3, #5
 8001a82:	2064      	movs	r0, #100	; 0x64
 8001a84:	fb00 f303 	mul.w	r3, r0, r3
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	3332      	adds	r3, #50	; 0x32
 8001a8e:	4a08      	ldr	r2, [pc, #32]	; (8001ab0 <UART_SetConfig+0x1b0>)
 8001a90:	fba2 2303 	umull	r2, r3, r2, r3
 8001a94:	095b      	lsrs	r3, r3, #5
 8001a96:	f003 020f 	and.w	r2, r3, #15
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	440a      	add	r2, r1
 8001aa0:	609a      	str	r2, [r3, #8]
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40013800 	.word	0x40013800
 8001ab0:	51eb851f 	.word	0x51eb851f

08001ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ab8:	f7fe fb48 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001abc:	f000 f80b 	bl	8001ad6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ac0:	f000 f942 	bl	8001d48 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001ac4:	f000 f84c 	bl	8001b60 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001ac8:	f000 f914 	bl	8001cf4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001acc:	f000 f876 	bl	8001bbc <MX_TIM2_Init>
  MX_TIM4_Init();
 8001ad0:	f000 f8c2 	bl	8001c58 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <main+0x20>

08001ad6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b090      	sub	sp, #64	; 0x40
 8001ada:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001adc:	f107 0318 	add.w	r3, r7, #24
 8001ae0:	2228      	movs	r2, #40	; 0x28
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 fb75 	bl	80021d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001af8:	2301      	movs	r3, #1
 8001afa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001afc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b00:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b06:	2301      	movs	r3, #1
 8001b08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b14:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b1a:	f107 0318 	add.w	r3, r7, #24
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe ff1e 	bl	8000960 <HAL_RCC_OscConfig>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b2a:	f000 f993 	bl	8001e54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b2e:	230f      	movs	r3, #15
 8001b30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b32:	2302      	movs	r3, #2
 8001b34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	2102      	movs	r1, #2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff f989 	bl	8000e60 <HAL_RCC_ClockConfig>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b54:	f000 f97e 	bl	8001e54 <Error_Handler>
  }
}
 8001b58:	bf00      	nop
 8001b5a:	3740      	adds	r7, #64	; 0x40
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <MX_I2C2_Init+0x50>)
 8001b66:	4a13      	ldr	r2, [pc, #76]	; (8001bb4 <MX_I2C2_Init+0x54>)
 8001b68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <MX_I2C2_Init+0x50>)
 8001b6c:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <MX_I2C2_Init+0x58>)
 8001b6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <MX_I2C2_Init+0x50>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <MX_I2C2_Init+0x50>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <MX_I2C2_Init+0x50>)
 8001b7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <MX_I2C2_Init+0x50>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <MX_I2C2_Init+0x50>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b90:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <MX_I2C2_Init+0x50>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <MX_I2C2_Init+0x50>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b9c:	4804      	ldr	r0, [pc, #16]	; (8001bb0 <MX_I2C2_Init+0x50>)
 8001b9e:	f7fe fdb7 	bl	8000710 <HAL_I2C_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ba8:	f000 f954 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	2000006c 	.word	0x2000006c
 8001bb4:	40005800 	.word	0x40005800
 8001bb8:	000186a0 	.word	0x000186a0

08001bbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc2:	f107 0308 	add.w	r3, r7, #8
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <MX_TIM2_Init+0x98>)
 8001bda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000-1;
 8001be0:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <MX_TIM2_Init+0x98>)
 8001be2:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001be6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be8:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <MX_TIM2_Init+0x98>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <MX_TIM2_Init+0x98>)
 8001bf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bf4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <MX_TIM2_Init+0x98>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <MX_TIM2_Init+0x98>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c02:	4814      	ldr	r0, [pc, #80]	; (8001c54 <MX_TIM2_Init+0x98>)
 8001c04:	f7ff fac8 	bl	8001198 <HAL_TIM_Base_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c0e:	f000 f921 	bl	8001e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c18:	f107 0308 	add.w	r3, r7, #8
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480d      	ldr	r0, [pc, #52]	; (8001c54 <MX_TIM2_Init+0x98>)
 8001c20:	f7ff fbed 	bl	80013fe <HAL_TIM_ConfigClockSource>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c2a:	f000 f913 	bl	8001e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c36:	463b      	mov	r3, r7
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4806      	ldr	r0, [pc, #24]	; (8001c54 <MX_TIM2_Init+0x98>)
 8001c3c:	f7ff fdbc 	bl	80017b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c46:	f000 f905 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000100 	.word	0x20000100

08001c58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6c:	463b      	mov	r3, r7
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <MX_TIM4_Init+0x94>)
 8001c76:	4a1e      	ldr	r2, [pc, #120]	; (8001cf0 <MX_TIM4_Init+0x98>)
 8001c78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000-1;
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <MX_TIM4_Init+0x94>)
 8001c7c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001c80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <MX_TIM4_Init+0x94>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <MX_TIM4_Init+0x94>)
 8001c8a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001c8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c90:	4b16      	ldr	r3, [pc, #88]	; (8001cec <MX_TIM4_Init+0x94>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <MX_TIM4_Init+0x94>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c9c:	4813      	ldr	r0, [pc, #76]	; (8001cec <MX_TIM4_Init+0x94>)
 8001c9e:	f7ff fa7b 	bl	8001198 <HAL_TIM_Base_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001ca8:	f000 f8d4 	bl	8001e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cb2:	f107 0308 	add.w	r3, r7, #8
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480c      	ldr	r0, [pc, #48]	; (8001cec <MX_TIM4_Init+0x94>)
 8001cba:	f7ff fba0 	bl	80013fe <HAL_TIM_ConfigClockSource>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001cc4:	f000 f8c6 	bl	8001e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cd0:	463b      	mov	r3, r7
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_TIM4_Init+0x94>)
 8001cd6:	f7ff fd6f 	bl	80017b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001ce0:	f000 f8b8 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	2000002c 	.word	0x2000002c
 8001cf0:	40000800 	.word	0x40000800

08001cf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001cfa:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <MX_USART1_UART_Init+0x50>)
 8001cfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d2a:	4805      	ldr	r0, [pc, #20]	; (8001d40 <MX_USART1_UART_Init+0x4c>)
 8001d2c:	f7ff fd9a 	bl	8001864 <HAL_UART_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d36:	f000 f88d 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200000c0 	.word	0x200000c0
 8001d44:	40013800 	.word	0x40013800

08001d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4e:	f107 0310 	add.w	r3, r7, #16
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5c:	4b3a      	ldr	r3, [pc, #232]	; (8001e48 <MX_GPIO_Init+0x100>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	4a39      	ldr	r2, [pc, #228]	; (8001e48 <MX_GPIO_Init+0x100>)
 8001d62:	f043 0310 	orr.w	r3, r3, #16
 8001d66:	6193      	str	r3, [r2, #24]
 8001d68:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <MX_GPIO_Init+0x100>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d74:	4b34      	ldr	r3, [pc, #208]	; (8001e48 <MX_GPIO_Init+0x100>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	4a33      	ldr	r2, [pc, #204]	; (8001e48 <MX_GPIO_Init+0x100>)
 8001d7a:	f043 0320 	orr.w	r3, r3, #32
 8001d7e:	6193      	str	r3, [r2, #24]
 8001d80:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <MX_GPIO_Init+0x100>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 0320 	and.w	r3, r3, #32
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8c:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <MX_GPIO_Init+0x100>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	4a2d      	ldr	r2, [pc, #180]	; (8001e48 <MX_GPIO_Init+0x100>)
 8001d92:	f043 0308 	orr.w	r3, r3, #8
 8001d96:	6193      	str	r3, [r2, #24]
 8001d98:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <MX_GPIO_Init+0x100>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da4:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <MX_GPIO_Init+0x100>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	4a27      	ldr	r2, [pc, #156]	; (8001e48 <MX_GPIO_Init+0x100>)
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	6193      	str	r3, [r2, #24]
 8001db0:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <MX_GPIO_Init+0x100>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	603b      	str	r3, [r7, #0]
 8001dba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001dc2:	4822      	ldr	r0, [pc, #136]	; (8001e4c <MX_GPIO_Init+0x104>)
 8001dc4:	f7fe fc8c 	bl	80006e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2102      	movs	r1, #2
 8001dcc:	4820      	ldr	r0, [pc, #128]	; (8001e50 <MX_GPIO_Init+0x108>)
 8001dce:	f7fe fc87 	bl	80006e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin;
 8001dd2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001dd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2302      	movs	r3, #2
 8001de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de4:	f107 0310 	add.w	r3, r7, #16
 8001de8:	4619      	mov	r1, r3
 8001dea:	4818      	ldr	r0, [pc, #96]	; (8001e4c <MX_GPIO_Init+0x104>)
 8001dec:	f7fe fb1e 	bl	800042c <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001df0:	2302      	movs	r3, #2
 8001df2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df4:	2301      	movs	r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001e00:	f107 0310 	add.w	r3, r7, #16
 8001e04:	4619      	mov	r1, r3
 8001e06:	4812      	ldr	r0, [pc, #72]	; (8001e50 <MX_GPIO_Init+0x108>)
 8001e08:	f7fe fb10 	bl	800042c <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor3_Pin Sensor2_Pin Sensor1_Pin */
  GPIO_InitStruct.Pin = Sensor3_Pin|Sensor2_Pin|Sensor1_Pin;
 8001e0c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1a:	f107 0310 	add.w	r3, r7, #16
 8001e1e:	4619      	mov	r1, r3
 8001e20:	480b      	ldr	r0, [pc, #44]	; (8001e50 <MX_GPIO_Init+0x108>)
 8001e22:	f7fe fb03 	bl	800042c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBReset_Pin PBOn_Pin */
  GPIO_InitStruct.Pin = PBReset_Pin|PBOn_Pin;
 8001e26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e30:	2301      	movs	r3, #1
 8001e32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4805      	ldr	r0, [pc, #20]	; (8001e50 <MX_GPIO_Init+0x108>)
 8001e3c:	f7fe faf6 	bl	800042c <HAL_GPIO_Init>

}
 8001e40:	bf00      	nop
 8001e42:	3720      	adds	r7, #32
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40011000 	.word	0x40011000
 8001e50:	40010c00 	.word	0x40010c00

08001e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <HAL_MspInit+0x5c>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <HAL_MspInit+0x5c>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6193      	str	r3, [r2, #24]
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_MspInit+0x5c>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_MspInit+0x5c>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	4a0e      	ldr	r2, [pc, #56]	; (8001ebc <HAL_MspInit+0x5c>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e88:	61d3      	str	r3, [r2, #28]
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <HAL_MspInit+0x5c>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	607b      	str	r3, [r7, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_MspInit+0x60>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <HAL_MspInit+0x60>)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40010000 	.word	0x40010000

08001ec4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0310 	add.w	r3, r7, #16
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a16      	ldr	r2, [pc, #88]	; (8001f38 <HAL_I2C_MspInit+0x74>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d124      	bne.n	8001f2e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee4:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_I2C_MspInit+0x78>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	4a14      	ldr	r2, [pc, #80]	; (8001f3c <HAL_I2C_MspInit+0x78>)
 8001eea:	f043 0308 	orr.w	r3, r3, #8
 8001eee:	6193      	str	r3, [r2, #24]
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_I2C_MspInit+0x78>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001efc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f02:	2312      	movs	r3, #18
 8001f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0a:	f107 0310 	add.w	r3, r7, #16
 8001f0e:	4619      	mov	r1, r3
 8001f10:	480b      	ldr	r0, [pc, #44]	; (8001f40 <HAL_I2C_MspInit+0x7c>)
 8001f12:	f7fe fa8b 	bl	800042c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_I2C_MspInit+0x78>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	4a08      	ldr	r2, [pc, #32]	; (8001f3c <HAL_I2C_MspInit+0x78>)
 8001f1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f20:	61d3      	str	r3, [r2, #28]
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_I2C_MspInit+0x78>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f2e:	bf00      	nop
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40005800 	.word	0x40005800
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40010c00 	.word	0x40010c00

08001f44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f54:	d114      	bne.n	8001f80 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f56:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_TIM_Base_MspInit+0x78>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4a18      	ldr	r2, [pc, #96]	; (8001fbc <HAL_TIM_Base_MspInit+0x78>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	61d3      	str	r3, [r2, #28]
 8001f62:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <HAL_TIM_Base_MspInit+0x78>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	201c      	movs	r0, #28
 8001f74:	f7fe fa23 	bl	80003be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f78:	201c      	movs	r0, #28
 8001f7a:	f7fe fa3c 	bl	80003f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f7e:	e018      	b.n	8001fb2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0e      	ldr	r2, [pc, #56]	; (8001fc0 <HAL_TIM_Base_MspInit+0x7c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d113      	bne.n	8001fb2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_TIM_Base_MspInit+0x78>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <HAL_TIM_Base_MspInit+0x78>)
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	61d3      	str	r3, [r2, #28]
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_TIM_Base_MspInit+0x78>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	201e      	movs	r0, #30
 8001fa8:	f7fe fa09 	bl	80003be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001fac:	201e      	movs	r0, #30
 8001fae:	f7fe fa22 	bl	80003f6 <HAL_NVIC_EnableIRQ>
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40000800 	.word	0x40000800

08001fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a1c      	ldr	r2, [pc, #112]	; (8002050 <HAL_UART_MspInit+0x8c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d131      	bne.n	8002048 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <HAL_UART_MspInit+0x90>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	4a1a      	ldr	r2, [pc, #104]	; (8002054 <HAL_UART_MspInit+0x90>)
 8001fea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fee:	6193      	str	r3, [r2, #24]
 8001ff0:	4b18      	ldr	r3, [pc, #96]	; (8002054 <HAL_UART_MspInit+0x90>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffc:	4b15      	ldr	r3, [pc, #84]	; (8002054 <HAL_UART_MspInit+0x90>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	4a14      	ldr	r2, [pc, #80]	; (8002054 <HAL_UART_MspInit+0x90>)
 8002002:	f043 0304 	orr.w	r3, r3, #4
 8002006:	6193      	str	r3, [r2, #24]
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_UART_MspInit+0x90>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002018:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800201e:	2303      	movs	r3, #3
 8002020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002022:	f107 0310 	add.w	r3, r7, #16
 8002026:	4619      	mov	r1, r3
 8002028:	480b      	ldr	r0, [pc, #44]	; (8002058 <HAL_UART_MspInit+0x94>)
 800202a:	f7fe f9ff 	bl	800042c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800202e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002032:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	4619      	mov	r1, r3
 8002042:	4805      	ldr	r0, [pc, #20]	; (8002058 <HAL_UART_MspInit+0x94>)
 8002044:	f7fe f9f2 	bl	800042c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002048:	bf00      	nop
 800204a:	3720      	adds	r7, #32
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40013800 	.word	0x40013800
 8002054:	40021000 	.word	0x40021000
 8002058:	40010800 	.word	0x40010800

0800205c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206c:	e7fe      	b.n	800206c <HardFault_Handler+0x4>

0800206e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002072:	e7fe      	b.n	8002072 <MemManage_Handler+0x4>

08002074 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <BusFault_Handler+0x4>

0800207a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <UsageFault_Handler+0x4>

08002080 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a8:	f7fe f896 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <TIM2_IRQHandler+0x10>)
 80020b6:	f7ff f89a 	bl	80011ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000100 	.word	0x20000100

080020c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <TIM4_IRQHandler+0x10>)
 80020ca:	f7ff f890 	bl	80011ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2000002c 	.word	0x2000002c

080020d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80020dc:	4b15      	ldr	r3, [pc, #84]	; (8002134 <SystemInit+0x5c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a14      	ldr	r2, [pc, #80]	; (8002134 <SystemInit+0x5c>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <SystemInit+0x5c>)
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	4911      	ldr	r1, [pc, #68]	; (8002134 <SystemInit+0x5c>)
 80020ee:	4b12      	ldr	r3, [pc, #72]	; (8002138 <SystemInit+0x60>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <SystemInit+0x5c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <SystemInit+0x5c>)
 80020fa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80020fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002102:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <SystemInit+0x5c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <SystemInit+0x5c>)
 800210a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <SystemInit+0x5c>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4a07      	ldr	r2, [pc, #28]	; (8002134 <SystemInit+0x5c>)
 8002116:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800211a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <SystemInit+0x5c>)
 800211e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002122:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <SystemInit+0x64>)
 8002126:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800212a:	609a      	str	r2, [r3, #8]
#endif 
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr
 8002134:	40021000 	.word	0x40021000
 8002138:	f8ff0000 	.word	0xf8ff0000
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002140:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002142:	e003      	b.n	800214c <LoopCopyDataInit>

08002144 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002146:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002148:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800214a:	3104      	adds	r1, #4

0800214c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800214c:	480a      	ldr	r0, [pc, #40]	; (8002178 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002150:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002152:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002154:	d3f6      	bcc.n	8002144 <CopyDataInit>
  ldr r2, =_sbss
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002158:	e002      	b.n	8002160 <LoopFillZerobss>

0800215a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800215c:	f842 3b04 	str.w	r3, [r2], #4

08002160 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002162:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002164:	d3f9      	bcc.n	800215a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002166:	f7ff ffb7 	bl	80020d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800216a:	f000 f80f 	bl	800218c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800216e:	f7ff fca1 	bl	8001ab4 <main>
  bx lr
 8002172:	4770      	bx	lr
  ldr r3, =_sidata
 8002174:	08002230 	.word	0x08002230
  ldr r0, =_sdata
 8002178:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800217c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002180:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002184:	20000140 	.word	0x20000140

08002188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002188:	e7fe      	b.n	8002188 <ADC1_2_IRQHandler>
	...

0800218c <__libc_init_array>:
 800218c:	b570      	push	{r4, r5, r6, lr}
 800218e:	2500      	movs	r5, #0
 8002190:	4e0c      	ldr	r6, [pc, #48]	; (80021c4 <__libc_init_array+0x38>)
 8002192:	4c0d      	ldr	r4, [pc, #52]	; (80021c8 <__libc_init_array+0x3c>)
 8002194:	1ba4      	subs	r4, r4, r6
 8002196:	10a4      	asrs	r4, r4, #2
 8002198:	42a5      	cmp	r5, r4
 800219a:	d109      	bne.n	80021b0 <__libc_init_array+0x24>
 800219c:	f000 f822 	bl	80021e4 <_init>
 80021a0:	2500      	movs	r5, #0
 80021a2:	4e0a      	ldr	r6, [pc, #40]	; (80021cc <__libc_init_array+0x40>)
 80021a4:	4c0a      	ldr	r4, [pc, #40]	; (80021d0 <__libc_init_array+0x44>)
 80021a6:	1ba4      	subs	r4, r4, r6
 80021a8:	10a4      	asrs	r4, r4, #2
 80021aa:	42a5      	cmp	r5, r4
 80021ac:	d105      	bne.n	80021ba <__libc_init_array+0x2e>
 80021ae:	bd70      	pop	{r4, r5, r6, pc}
 80021b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021b4:	4798      	blx	r3
 80021b6:	3501      	adds	r5, #1
 80021b8:	e7ee      	b.n	8002198 <__libc_init_array+0xc>
 80021ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021be:	4798      	blx	r3
 80021c0:	3501      	adds	r5, #1
 80021c2:	e7f2      	b.n	80021aa <__libc_init_array+0x1e>
 80021c4:	08002228 	.word	0x08002228
 80021c8:	08002228 	.word	0x08002228
 80021cc:	08002228 	.word	0x08002228
 80021d0:	0800222c 	.word	0x0800222c

080021d4 <memset>:
 80021d4:	4603      	mov	r3, r0
 80021d6:	4402      	add	r2, r0
 80021d8:	4293      	cmp	r3, r2
 80021da:	d100      	bne.n	80021de <memset+0xa>
 80021dc:	4770      	bx	lr
 80021de:	f803 1b01 	strb.w	r1, [r3], #1
 80021e2:	e7f9      	b.n	80021d8 <memset+0x4>

080021e4 <_init>:
 80021e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e6:	bf00      	nop
 80021e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ea:	bc08      	pop	{r3}
 80021ec:	469e      	mov	lr, r3
 80021ee:	4770      	bx	lr

080021f0 <_fini>:
 80021f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f2:	bf00      	nop
 80021f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021f6:	bc08      	pop	{r3}
 80021f8:	469e      	mov	lr, r3
 80021fa:	4770      	bx	lr
